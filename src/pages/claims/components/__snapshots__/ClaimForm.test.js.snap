// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Claims Create Form component snapshot testing should match component in all steps 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <ClaimForm
    data={
      Object {
        "checked_date": "2020-12-12T00:00:00.000Z",
        "claim_date": "2020-12-12T00:00:00.000Z",
        "claim_sources": "claim_sources",
        "claimant": 1,
        "description": Object {
          "blocks": Array [
            Object {
              "data": Object {
                "level": 2,
                "text": "Editor.js",
              },
              "type": "header",
            },
            Object {
              "data": Object {
                "text": "Hey. Meet the new Editor. On this page you can see it in action — try to edit this text.",
              },
              "type": "paragraph",
            },
          ],
          "time": 1595747741807,
          "version": "2.18.0",
        },
        "rating": 1,
        "review": "review",
        "review_sources": "review_sources",
        "review_tag_line": "review_tag_line",
        "slug": "slug",
        "title": "title",
      }
    }
  >
    <div>
      <Steps
        current={0}
        onChange={[Function]}
      >
        <Steps
          className=""
          current={0}
          direction="horizontal"
          iconPrefix="ant"
          icons={
            Object {
              "error": <ForwardRef(CloseOutlined)
                className="ant-steps-error-icon"
              />,
              "finish": <ForwardRef(CheckOutlined)
                className="ant-steps-finish-icon"
              />,
            }
          }
          initial={0}
          labelPlacement="horizontal"
          onChange={[Function]}
          prefixCls="ant-steps"
          progressDot={false}
          size=""
          status="process"
          stepIcon={[Function]}
          type="default"
        >
          <div
            className="ant-steps ant-steps-horizontal ant-steps-label-horizontal"
            style={Object {}}
          >
            <Step
              active={true}
              iconPrefix="ant"
              icons={
                Object {
                  "error": <ForwardRef(CloseOutlined)
                    className="ant-steps-error-icon"
                  />,
                  "finish": <ForwardRef(CheckOutlined)
                    className="ant-steps-finish-icon"
                  />,
                }
              }
              key="0"
              onStepClick={[Function]}
              prefixCls="ant-steps"
              progressDot={false}
              status="process"
              stepIcon={[Function]}
              stepIndex={0}
              stepNumber="1"
              title="Basic"
              wrapperStyle={Object {}}
            >
              <div
                className="ant-steps-item ant-steps-item-process ant-steps-item-active"
                style={Object {}}
              >
                <div
                  className="ant-steps-item-container"
                  onClick={[Function]}
                  role="button"
                  tabIndex={0}
                >
                  <div
                    className="ant-steps-item-tail"
                  />
                  <div
                    className="ant-steps-item-icon"
                  >
                    <span
                      className="ant-steps-icon"
                    >
                      1
                    </span>
                  </div>
                  <div
                    className="ant-steps-item-content"
                  >
                    <div
                      className="ant-steps-item-title"
                    >
                      Basic
                    </div>
                  </div>
                </div>
              </div>
            </Step>
            <Step
              active={false}
              iconPrefix="ant"
              icons={
                Object {
                  "error": <ForwardRef(CloseOutlined)
                    className="ant-steps-error-icon"
                  />,
                  "finish": <ForwardRef(CheckOutlined)
                    className="ant-steps-finish-icon"
                  />,
                }
              }
              key="1"
              onStepClick={[Function]}
              prefixCls="ant-steps"
              progressDot={false}
              status="wait"
              stepIcon={[Function]}
              stepIndex={1}
              stepNumber="2"
              title="Sources"
              wrapperStyle={Object {}}
            >
              <div
                className="ant-steps-item ant-steps-item-wait"
                style={Object {}}
              >
                <div
                  className="ant-steps-item-container"
                  onClick={[Function]}
                  role="button"
                  tabIndex={0}
                >
                  <div
                    className="ant-steps-item-tail"
                  />
                  <div
                    className="ant-steps-item-icon"
                  >
                    <span
                      className="ant-steps-icon"
                    >
                      2
                    </span>
                  </div>
                  <div
                    className="ant-steps-item-content"
                  >
                    <div
                      className="ant-steps-item-title"
                    >
                      Sources
                    </div>
                  </div>
                </div>
              </div>
            </Step>
          </div>
        </Steps>
      </Steps>
      <ForwardRef(InternalForm)
        form={
          Object {
            "__INTERNAL__": Object {
              "itemRef": [Function],
              "name": "create-claim",
            },
            "getFieldError": [Function],
            "getFieldInstance": [Function],
            "getFieldValue": [Function],
            "getFieldsError": [Function],
            "getFieldsValue": [Function],
            "getInternalHooks": [Function],
            "isFieldTouched": [Function],
            "isFieldValidating": [Function],
            "isFieldsTouched": [Function],
            "isFieldsValidating": [Function],
            "resetFields": [Function],
            "scrollToField": [Function],
            "setFields": [Function],
            "setFieldsValue": [Function],
            "submit": [Function],
            "validateFields": [Function],
          }
        }
        initialValues={
          Object {
            "checked_date": "2020-12-12T00:00:00.000Z",
            "claim_date": "2020-12-12T00:00:00.000Z",
            "claim_sources": "claim_sources",
            "claimant": 1,
            "description": Object {
              "blocks": Array [
                Object {
                  "data": Object {
                    "level": 2,
                    "text": "Editor.js",
                  },
                  "type": "header",
                },
                Object {
                  "data": Object {
                    "text": "Hey. Meet the new Editor. On this page you can see it in action — try to edit this text.",
                  },
                  "type": "paragraph",
                },
              ],
              "time": 1595747741807,
              "version": "2.18.0",
            },
            "rating": 1,
            "review": "review",
            "review_sources": "review_sources",
            "review_tag_line": "review_tag_line",
            "slug": "slug",
            "title": "title",
          }
        }
        labelCol={
          Object {
            "offset": 2,
            "span": 8,
          }
        }
        layout="vertical"
        name="create-claim"
        onFinish={[Function]}
        onFinishFailed={[Function]}
        onValuesChange={[Function]}
        scrollToFirstError={true}
        style={
          Object {
            "paddingTop": "24px",
          }
        }
        wrapperCol={
          Object {
            "offset": 2,
            "span": 20,
          }
        }
      >
        <SizeContextProvider>
          <ForwardRef(Form)
            className="ant-form ant-form-vertical"
            form={
              Object {
                "__INTERNAL__": Object {
                  "itemRef": [Function],
                  "name": "create-claim",
                },
                "getFieldError": [Function],
                "getFieldInstance": [Function],
                "getFieldValue": [Function],
                "getFieldsError": [Function],
                "getFieldsValue": [Function],
                "getInternalHooks": [Function],
                "isFieldTouched": [Function],
                "isFieldValidating": [Function],
                "isFieldsTouched": [Function],
                "isFieldsValidating": [Function],
                "resetFields": [Function],
                "scrollToField": [Function],
                "setFields": [Function],
                "setFieldsValue": [Function],
                "submit": [Function],
                "validateFields": [Function],
              }
            }
            id="create-claim"
            initialValues={
              Object {
                "checked_date": "2020-12-12T00:00:00.000Z",
                "claim_date": "2020-12-12T00:00:00.000Z",
                "claim_sources": "claim_sources",
                "claimant": 1,
                "description": Object {
                  "blocks": Array [
                    Object {
                      "data": Object {
                        "level": 2,
                        "text": "Editor.js",
                      },
                      "type": "header",
                    },
                    Object {
                      "data": Object {
                        "text": "Hey. Meet the new Editor. On this page you can see it in action — try to edit this text.",
                      },
                      "type": "paragraph",
                    },
                  ],
                  "time": 1595747741807,
                  "version": "2.18.0",
                },
                "rating": 1,
                "review": "review",
                "review_sources": "review_sources",
                "review_tag_line": "review_tag_line",
                "slug": "slug",
                "title": "title",
              }
            }
            name="create-claim"
            onFinish={[Function]}
            onFinishFailed={[Function]}
            onValuesChange={[Function]}
            style={
              Object {
                "paddingTop": "24px",
              }
            }
          >
            <form
              className="ant-form ant-form-vertical"
              id="create-claim"
              onSubmit={[Function]}
              style={
                Object {
                  "paddingTop": "24px",
                }
              }
            >
              <div
                style={
                  Object {
                    "display": "block",
                  }
                }
              >
                <FormItem
                  label="Claim"
                  name="claim"
                  rules={
                    Array [
                      Object {
                        "message": "Please input the Claim!",
                        "required": true,
                      },
                      Object {
                        "message": "Claim must be minimum 3 characters.",
                        "min": 3,
                      },
                      Object {
                        "max": 5000,
                        "message": "Claim must be maximum 5000 characters.",
                      },
                    ]
                  }
                >
                  <WrapperField
                    label="Claim"
                    messageVariables={
                      Object {
                        "label": "Claim",
                      }
                    }
                    name="claim"
                    onReset={[Function]}
                    rules={
                      Array [
                        Object {
                          "message": "Please input the Claim!",
                          "required": true,
                        },
                        Object {
                          "message": "Claim must be minimum 3 characters.",
                          "min": 3,
                        },
                        Object {
                          "max": 5000,
                          "message": "Claim must be maximum 5000 characters.",
                        },
                      ]
                    }
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_claim"
                      label="Claim"
                      messageVariables={
                        Object {
                          "label": "Claim",
                        }
                      }
                      name={
                        Array [
                          "claim",
                        ]
                      }
                      onReset={[Function]}
                      rules={
                        Array [
                          Object {
                            "message": "Please input the Claim!",
                            "required": true,
                          },
                          Object {
                            "message": "Claim must be minimum 3 characters.",
                            "min": 3,
                          },
                          Object {
                            "max": 5000,
                            "message": "Claim must be maximum 5000 characters.",
                          },
                        ]
                      }
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_claim"
                            label="Claim"
                            name="claim"
                            prefixCls="ant-form"
                            required={true}
                            requiredMark={true}
                            rules={
                              Array [
                                Object {
                                  "message": "Please input the Claim!",
                                  "required": true,
                                },
                                Object {
                                  "message": "Claim must be minimum 3 characters.",
                                  "min": 3,
                                },
                                Object {
                                  "max": 5000,
                                  "message": "Claim must be maximum 5000 characters.",
                                },
                              ]
                            }
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className="ant-form-item-required"
                                  htmlFor="create-claim_claim"
                                  title="Claim"
                                >
                                  Claim
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Claim"
                            name={
                              Array [
                                "claim",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            rules={
                              Array [
                                Object {
                                  "message": "Please input the Claim!",
                                  "required": true,
                                },
                                Object {
                                  "message": "Claim must be minimum 3 characters.",
                                  "min": 3,
                                },
                                Object {
                                  "max": 5000,
                                  "message": "Claim must be maximum 5000 characters.",
                                },
                              ]
                            }
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={1}
                                    >
                                      <TextArea
                                        id="create-claim_claim"
                                        onChange={[Function]}
                                        placeholder="Enter claim...."
                                        rows={6}
                                      >
                                        <ClearableLabeledInput
                                          bordered={true}
                                          element={
                                            <TextArea
                                              className=""
                                              id="create-claim_claim"
                                              onChange={[Function]}
                                              placeholder="Enter claim...."
                                              prefixCls="ant-input"
                                              rows={6}
                                            />
                                          }
                                          handleReset={[Function]}
                                          id="create-claim_claim"
                                          inputType="text"
                                          onChange={[Function]}
                                          placeholder="Enter claim...."
                                          prefixCls="ant-input"
                                          rows={6}
                                          triggerFocus={[Function]}
                                          value=""
                                        >
                                          <TextArea
                                            className=""
                                            id="create-claim_claim"
                                            onChange={[Function]}
                                            placeholder="Enter claim...."
                                            prefixCls="ant-input"
                                            rows={6}
                                            value=""
                                          >
                                            <ResizableTextArea
                                              className=""
                                              id="create-claim_claim"
                                              onChange={[Function]}
                                              onKeyDown={[Function]}
                                              placeholder="Enter claim...."
                                              prefixCls="ant-input"
                                              rows={6}
                                              value=""
                                            >
                                              <ResizeObserver
                                                disabled={true}
                                                onResize={[Function]}
                                              >
                                                <textarea
                                                  className="ant-input"
                                                  id="create-claim_claim"
                                                  onChange={[Function]}
                                                  onKeyDown={[Function]}
                                                  placeholder="Enter claim...."
                                                  rows={6}
                                                  style={Object {}}
                                                  value=""
                                                />
                                              </ResizeObserver>
                                            </ResizableTextArea>
                                          </TextArea>
                                        </ClearableLabeledInput>
                                      </TextArea>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Slug"
                  name="slug"
                  rules={
                    Array [
                      Object {
                        "message": "Please input the slug!",
                        "required": true,
                      },
                      Object {
                        "message": "Please enter valid slug!",
                        "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                      },
                      Object {
                        "max": 150,
                        "message": "Slug must be maximum 150 characters.",
                      },
                    ]
                  }
                >
                  <WrapperField
                    label="Slug"
                    messageVariables={
                      Object {
                        "label": "Slug",
                      }
                    }
                    name="slug"
                    onReset={[Function]}
                    rules={
                      Array [
                        Object {
                          "message": "Please input the slug!",
                          "required": true,
                        },
                        Object {
                          "message": "Please enter valid slug!",
                          "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                        },
                        Object {
                          "max": 150,
                          "message": "Slug must be maximum 150 characters.",
                        },
                      ]
                    }
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_slug"
                      label="Slug"
                      messageVariables={
                        Object {
                          "label": "Slug",
                        }
                      }
                      name={
                        Array [
                          "slug",
                        ]
                      }
                      onReset={[Function]}
                      rules={
                        Array [
                          Object {
                            "message": "Please input the slug!",
                            "required": true,
                          },
                          Object {
                            "message": "Please enter valid slug!",
                            "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                          },
                          Object {
                            "max": 150,
                            "message": "Slug must be maximum 150 characters.",
                          },
                        ]
                      }
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_slug"
                            label="Slug"
                            name="slug"
                            prefixCls="ant-form"
                            required={true}
                            requiredMark={true}
                            rules={
                              Array [
                                Object {
                                  "message": "Please input the slug!",
                                  "required": true,
                                },
                                Object {
                                  "message": "Please enter valid slug!",
                                  "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                                },
                                Object {
                                  "max": 150,
                                  "message": "Slug must be maximum 150 characters.",
                                },
                              ]
                            }
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className="ant-form-item-required"
                                  htmlFor="create-claim_slug"
                                  title="Slug"
                                >
                                  Slug
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Slug"
                            name={
                              Array [
                                "slug",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            rules={
                              Array [
                                Object {
                                  "message": "Please input the slug!",
                                  "required": true,
                                },
                                Object {
                                  "message": "Please enter valid slug!",
                                  "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                                },
                                Object {
                                  "max": 150,
                                  "message": "Slug must be maximum 150 characters.",
                                },
                              ]
                            }
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={1}
                                      value="slug"
                                    >
                                      <Input
                                        id="create-claim_slug"
                                        onChange={[Function]}
                                        type="text"
                                        value="slug"
                                      >
                                        <ClearableLabeledInput
                                          bordered={true}
                                          element={
                                            <input
                                              className="ant-input"
                                              id="create-claim_slug"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              onKeyDown={[Function]}
                                              type="text"
                                              value="slug"
                                            />
                                          }
                                          focused={false}
                                          handleReset={[Function]}
                                          id="create-claim_slug"
                                          inputType="input"
                                          onChange={[Function]}
                                          prefixCls="ant-input"
                                          triggerFocus={[Function]}
                                          type="text"
                                          value="slug"
                                        >
                                          <input
                                            className="ant-input"
                                            id="create-claim_slug"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            onKeyDown={[Function]}
                                            type="text"
                                            value="slug"
                                          />
                                        </ClearableLabeledInput>
                                      </Input>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Fact"
                  name="fact"
                >
                  <WrapperField
                    label="Fact"
                    messageVariables={
                      Object {
                        "label": "Fact",
                      }
                    }
                    name="fact"
                    onReset={[Function]}
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_fact"
                      label="Fact"
                      messageVariables={
                        Object {
                          "label": "Fact",
                        }
                      }
                      name={
                        Array [
                          "fact",
                        ]
                      }
                      onReset={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_fact"
                            label="Fact"
                            name="fact"
                            prefixCls="ant-form"
                            required={false}
                            requiredMark={true}
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className=""
                                  htmlFor="create-claim_fact"
                                  title="Fact"
                                >
                                  Fact
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Fact"
                            name={
                              Array [
                                "fact",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={1}
                                    >
                                      <TextArea
                                        id="create-claim_fact"
                                        onChange={[Function]}
                                        placeholder="Enter Fact ..."
                                        rows={6}
                                      >
                                        <ClearableLabeledInput
                                          bordered={true}
                                          element={
                                            <TextArea
                                              className=""
                                              id="create-claim_fact"
                                              onChange={[Function]}
                                              placeholder="Enter Fact ..."
                                              prefixCls="ant-input"
                                              rows={6}
                                            />
                                          }
                                          handleReset={[Function]}
                                          id="create-claim_fact"
                                          inputType="text"
                                          onChange={[Function]}
                                          placeholder="Enter Fact ..."
                                          prefixCls="ant-input"
                                          rows={6}
                                          triggerFocus={[Function]}
                                          value=""
                                        >
                                          <TextArea
                                            className=""
                                            id="create-claim_fact"
                                            onChange={[Function]}
                                            placeholder="Enter Fact ..."
                                            prefixCls="ant-input"
                                            rows={6}
                                            value=""
                                          >
                                            <ResizableTextArea
                                              className=""
                                              id="create-claim_fact"
                                              onChange={[Function]}
                                              onKeyDown={[Function]}
                                              placeholder="Enter Fact ..."
                                              prefixCls="ant-input"
                                              rows={6}
                                              value=""
                                            >
                                              <ResizeObserver
                                                disabled={true}
                                                onResize={[Function]}
                                              >
                                                <textarea
                                                  className="ant-input"
                                                  id="create-claim_fact"
                                                  onChange={[Function]}
                                                  onKeyDown={[Function]}
                                                  placeholder="Enter Fact ..."
                                                  rows={6}
                                                  style={Object {}}
                                                  value=""
                                                />
                                              </ResizeObserver>
                                            </ResizableTextArea>
                                          </TextArea>
                                        </ClearableLabeledInput>
                                      </TextArea>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Claimant"
                  name="claimant"
                  rules={
                    Array [
                      Object {
                        "message": "Please add claimant!",
                        "required": true,
                      },
                    ]
                  }
                >
                  <WrapperField
                    label="Claimant"
                    messageVariables={
                      Object {
                        "label": "Claimant",
                      }
                    }
                    name="claimant"
                    onReset={[Function]}
                    rules={
                      Array [
                        Object {
                          "message": "Please add claimant!",
                          "required": true,
                        },
                      ]
                    }
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_claimant"
                      label="Claimant"
                      messageVariables={
                        Object {
                          "label": "Claimant",
                        }
                      }
                      name={
                        Array [
                          "claimant",
                        ]
                      }
                      onReset={[Function]}
                      rules={
                        Array [
                          Object {
                            "message": "Please add claimant!",
                            "required": true,
                          },
                        ]
                      }
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_claimant"
                            label="Claimant"
                            name="claimant"
                            prefixCls="ant-form"
                            required={true}
                            requiredMark={true}
                            rules={
                              Array [
                                Object {
                                  "message": "Please add claimant!",
                                  "required": true,
                                },
                              ]
                            }
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className="ant-form-item-required"
                                  htmlFor="create-claim_claimant"
                                  title="Claimant"
                                >
                                  Claimant
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Claimant"
                            name={
                              Array [
                                "claimant",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            rules={
                              Array [
                                Object {
                                  "message": "Please add claimant!",
                                  "required": true,
                                },
                              ]
                            }
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={1}
                                      value={1}
                                    >
                                      <Selector
                                        action="Claimants"
                                        id="create-claim_claimant"
                                        onChange={[Function]}
                                        value={1}
                                      >
                                        <ForwardRef(InternalSelect)
                                          allowClear={true}
                                          bordered={true}
                                          defaultValue={
                                            Array [
                                              1,
                                            ]
                                          }
                                          filterOption={[Function]}
                                          getPopupContainer={[Function]}
                                          listHeight={128}
                                          loading={false}
                                          notFoundContent={null}
                                          onChange={[Function]}
                                          onPopupScroll={[Function]}
                                          onSearch={[Function]}
                                          placeholder="Select claimants"
                                        >
                                          <Select
                                            allowClear={true}
                                            className=""
                                            clearIcon={<ForwardRef(CloseCircleFilled) />}
                                            defaultValue={
                                              Array [
                                                1,
                                              ]
                                            }
                                            dropdownClassName=""
                                            filterOption={[Function]}
                                            getPopupContainer={[Function]}
                                            inputIcon={[Function]}
                                            listHeight={128}
                                            listItemHeight={24}
                                            loading={false}
                                            menuItemSelectedIcon={null}
                                            notFoundContent={null}
                                            onChange={[Function]}
                                            onPopupScroll={[Function]}
                                            onSearch={[Function]}
                                            placeholder="Select claimants"
                                            prefixCls="ant-select"
                                            removeIcon={<ForwardRef(CloseOutlined) />}
                                            transitionName="slide-up"
                                          >
                                            <ForwardRef(Select)
                                              allowClear={true}
                                              className=""
                                              clearIcon={<ForwardRef(CloseCircleFilled) />}
                                              defaultValue={
                                                Array [
                                                  1,
                                                ]
                                              }
                                              dropdownClassName=""
                                              filterOption={[Function]}
                                              getPopupContainer={[Function]}
                                              inputIcon={[Function]}
                                              listHeight={128}
                                              listItemHeight={24}
                                              loading={false}
                                              menuItemSelectedIcon={null}
                                              notFoundContent={null}
                                              onChange={[Function]}
                                              onPopupScroll={[Function]}
                                              onSearch={[Function]}
                                              placeholder="Select claimants"
                                              prefixCls="ant-select"
                                              removeIcon={<ForwardRef(CloseOutlined) />}
                                              transitionName="slide-up"
                                            >
                                              <div
                                                className="ant-select ant-select-single ant-select-allow-clear ant-select-show-arrow"
                                                onBlur={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                onKeyUp={[Function]}
                                                onMouseDown={[Function]}
                                              >
                                                <SelectTrigger
                                                  containerWidth={null}
                                                  dropdownClassName=""
                                                  empty={true}
                                                  getPopupContainer={[Function]}
                                                  getTriggerDOMNode={[Function]}
                                                  popupElement={
                                                    <ForwardRef(OptionList)
                                                      childrenAsData={true}
                                                      defaultActiveFirstOption={true}
                                                      flattenOptions={Array []}
                                                      height={128}
                                                      itemHeight={24}
                                                      menuItemSelectedIcon={null}
                                                      multiple={false}
                                                      notFoundContent={null}
                                                      onActiveValue={[Function]}
                                                      onMouseEnter={[Function]}
                                                      onScroll={[Function]}
                                                      onSelect={[Function]}
                                                      onToggleOpen={[Function]}
                                                      options={Array []}
                                                      prefixCls="ant-select"
                                                      searchValue=""
                                                      values={
                                                        Set {
                                                          1,
                                                        }
                                                      }
                                                      virtual={true}
                                                    />
                                                  }
                                                  prefixCls="ant-select"
                                                  transitionName="slide-up"
                                                  visible={false}
                                                >
                                                  <Trigger
                                                    action={Array []}
                                                    afterPopupVisibleChange={[Function]}
                                                    autoDestroy={false}
                                                    blurDelay={0.15}
                                                    builtinPlacements={
                                                      Object {
                                                        "bottomLeft": Object {
                                                          "offset": Array [
                                                            0,
                                                            4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "tl",
                                                            "bl",
                                                          ],
                                                        },
                                                        "bottomRight": Object {
                                                          "offset": Array [
                                                            0,
                                                            4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "tr",
                                                            "br",
                                                          ],
                                                        },
                                                        "topLeft": Object {
                                                          "offset": Array [
                                                            0,
                                                            -4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "bl",
                                                            "tl",
                                                          ],
                                                        },
                                                        "topRight": Object {
                                                          "offset": Array [
                                                            0,
                                                            -4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "br",
                                                            "tr",
                                                          ],
                                                        },
                                                      }
                                                    }
                                                    defaultPopupVisible={false}
                                                    destroyPopupOnHide={false}
                                                    focusDelay={0}
                                                    getDocument={[Function]}
                                                    getPopupClassNameFromAlign={[Function]}
                                                    getPopupContainer={[Function]}
                                                    getTriggerDOMNode={[Function]}
                                                    hideAction={Array []}
                                                    mask={false}
                                                    maskClosable={true}
                                                    mouseEnterDelay={0}
                                                    mouseLeaveDelay={0.1}
                                                    onPopupAlign={[Function]}
                                                    onPopupVisibleChange={[Function]}
                                                    popup={
                                                      <div>
                                                        <ForwardRef(OptionList)
                                                          childrenAsData={true}
                                                          defaultActiveFirstOption={true}
                                                          flattenOptions={Array []}
                                                          height={128}
                                                          itemHeight={24}
                                                          menuItemSelectedIcon={null}
                                                          multiple={false}
                                                          notFoundContent={null}
                                                          onActiveValue={[Function]}
                                                          onMouseEnter={[Function]}
                                                          onScroll={[Function]}
                                                          onSelect={[Function]}
                                                          onToggleOpen={[Function]}
                                                          options={Array []}
                                                          prefixCls="ant-select"
                                                          searchValue=""
                                                          values={
                                                            Set {
                                                              1,
                                                            }
                                                          }
                                                          virtual={true}
                                                        />
                                                      </div>
                                                    }
                                                    popupAlign={Object {}}
                                                    popupClassName="ant-select-dropdown-empty"
                                                    popupPlacement="bottomLeft"
                                                    popupStyle={
                                                      Object {
                                                        "minWidth": null,
                                                        "width": null,
                                                      }
                                                    }
                                                    popupTransitionName="slide-up"
                                                    popupVisible={false}
                                                    prefixCls="ant-select-dropdown"
                                                    showAction={Array []}
                                                  >
                                                    <Selector
                                                      accessibilityIndex={0}
                                                      activeValue={null}
                                                      allowClear={true}
                                                      className=""
                                                      clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                      defaultValue={
                                                        Array [
                                                          1,
                                                        ]
                                                      }
                                                      domRef={
                                                        Object {
                                                          "current": <div
                                                            class="ant-select-selector"
                                                          >
                                                            <span
                                                              class="ant-select-selection-search"
                                                            >
                                                              <input
                                                                aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                aria-autocomplete="list"
                                                                aria-controls="rc_select_TEST_OR_SSR_list"
                                                                aria-haspopup="listbox"
                                                                aria-owns="rc_select_TEST_OR_SSR_list"
                                                                autocomplete="off"
                                                                class="ant-select-selection-search-input"
                                                                id="rc_select_TEST_OR_SSR"
                                                                readonly=""
                                                                role="combobox"
                                                                style="opacity: 0;"
                                                                type="search"
                                                                unselectable="on"
                                                                value=""
                                                              />
                                                            </span>
                                                            <span
                                                              class="ant-select-selection-item"
                                                              title="1"
                                                            >
                                                              1
                                                            </span>
                                                          </div>,
                                                        }
                                                      }
                                                      dropdownClassName=""
                                                      filterOption={[Function]}
                                                      getPopupContainer={[Function]}
                                                      inputElement={null}
                                                      inputIcon={[Function]}
                                                      key="trigger"
                                                      listHeight={128}
                                                      listItemHeight={24}
                                                      loading={false}
                                                      menuItemSelectedIcon={null}
                                                      multiple={false}
                                                      notFoundContent={null}
                                                      onChange={[Function]}
                                                      onPopupScroll={[Function]}
                                                      onSearch={[Function]}
                                                      onSearchSubmit={[Function]}
                                                      onSelect={[Function]}
                                                      onToggleOpen={[Function]}
                                                      placeholder="Select claimants"
                                                      prefixCls="ant-select"
                                                      removeIcon={<ForwardRef(CloseOutlined) />}
                                                      searchValue=""
                                                      showSearch={false}
                                                      tokenWithEnter={false}
                                                      transitionName="slide-up"
                                                      values={
                                                        Array [
                                                          Object {
                                                            "disabled": undefined,
                                                            "key": 1,
                                                            "label": 1,
                                                            "value": 1,
                                                          },
                                                        ]
                                                      }
                                                    >
                                                      <div
                                                        className="ant-select-selector"
                                                        onClick={[Function]}
                                                        onMouseDown={[Function]}
                                                      >
                                                        <SingleSelector
                                                          accessibilityIndex={0}
                                                          activeValue={null}
                                                          allowClear={true}
                                                          className=""
                                                          clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                          defaultValue={
                                                            Array [
                                                              1,
                                                            ]
                                                          }
                                                          domRef={
                                                            Object {
                                                              "current": <div
                                                                class="ant-select-selector"
                                                              >
                                                                <span
                                                                  class="ant-select-selection-search"
                                                                >
                                                                  <input
                                                                    aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                    aria-autocomplete="list"
                                                                    aria-controls="rc_select_TEST_OR_SSR_list"
                                                                    aria-haspopup="listbox"
                                                                    aria-owns="rc_select_TEST_OR_SSR_list"
                                                                    autocomplete="off"
                                                                    class="ant-select-selection-search-input"
                                                                    id="rc_select_TEST_OR_SSR"
                                                                    readonly=""
                                                                    role="combobox"
                                                                    style="opacity: 0;"
                                                                    type="search"
                                                                    unselectable="on"
                                                                    value=""
                                                                  />
                                                                </span>
                                                                <span
                                                                  class="ant-select-selection-item"
                                                                  title="1"
                                                                >
                                                                  1
                                                                </span>
                                                              </div>,
                                                            }
                                                          }
                                                          dropdownClassName=""
                                                          filterOption={[Function]}
                                                          getPopupContainer={[Function]}
                                                          inputElement={null}
                                                          inputIcon={[Function]}
                                                          inputRef={
                                                            Object {
                                                              "current": <input
                                                                aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                aria-autocomplete="list"
                                                                aria-controls="rc_select_TEST_OR_SSR_list"
                                                                aria-haspopup="listbox"
                                                                aria-owns="rc_select_TEST_OR_SSR_list"
                                                                autocomplete="off"
                                                                class="ant-select-selection-search-input"
                                                                id="rc_select_TEST_OR_SSR"
                                                                readonly=""
                                                                role="combobox"
                                                                style="opacity: 0;"
                                                                type="search"
                                                                unselectable="on"
                                                                value=""
                                                              />,
                                                            }
                                                          }
                                                          listHeight={128}
                                                          listItemHeight={24}
                                                          loading={false}
                                                          menuItemSelectedIcon={null}
                                                          multiple={false}
                                                          notFoundContent={null}
                                                          onChange={[Function]}
                                                          onInputChange={[Function]}
                                                          onInputCompositionEnd={[Function]}
                                                          onInputCompositionStart={[Function]}
                                                          onInputKeyDown={[Function]}
                                                          onInputMouseDown={[Function]}
                                                          onInputPaste={[Function]}
                                                          onPopupScroll={[Function]}
                                                          onSearch={[Function]}
                                                          onSearchSubmit={[Function]}
                                                          onSelect={[Function]}
                                                          onToggleOpen={[Function]}
                                                          placeholder="Select claimants"
                                                          prefixCls="ant-select"
                                                          removeIcon={<ForwardRef(CloseOutlined) />}
                                                          searchValue=""
                                                          showSearch={false}
                                                          tokenWithEnter={false}
                                                          transitionName="slide-up"
                                                          values={
                                                            Array [
                                                              Object {
                                                                "disabled": undefined,
                                                                "key": 1,
                                                                "label": 1,
                                                                "value": 1,
                                                              },
                                                            ]
                                                          }
                                                        >
                                                          <span
                                                            className="ant-select-selection-search"
                                                          >
                                                            <Input
                                                              accessibilityIndex={0}
                                                              attrs={Object {}}
                                                              editable={false}
                                                              inputElement={null}
                                                              onChange={[Function]}
                                                              onCompositionEnd={[Function]}
                                                              onCompositionStart={[Function]}
                                                              onKeyDown={[Function]}
                                                              onMouseDown={[Function]}
                                                              onPaste={[Function]}
                                                              prefixCls="ant-select"
                                                              value=""
                                                            >
                                                              <input
                                                                aria-activedescendant="undefined_list_0"
                                                                aria-autocomplete="list"
                                                                aria-controls="undefined_list"
                                                                aria-haspopup="listbox"
                                                                aria-owns="undefined_list"
                                                                autoComplete="off"
                                                                className="ant-select-selection-search-input"
                                                                onChange={[Function]}
                                                                onCompositionEnd={[Function]}
                                                                onCompositionStart={[Function]}
                                                                onKeyDown={[Function]}
                                                                onMouseDown={[Function]}
                                                                onPaste={[Function]}
                                                                readOnly={true}
                                                                role="combobox"
                                                                style={
                                                                  Object {
                                                                    "opacity": 0,
                                                                  }
                                                                }
                                                                type="search"
                                                                unselectable="on"
                                                                value=""
                                                              />
                                                            </Input>
                                                          </span>
                                                          <span
                                                            className="ant-select-selection-item"
                                                            title="1"
                                                          >
                                                            1
                                                          </span>
                                                        </SingleSelector>
                                                      </div>
                                                    </Selector>
                                                  </Trigger>
                                                </SelectTrigger>
                                                <TransBtn
                                                  className="ant-select-arrow"
                                                  customizeIcon={[Function]}
                                                  customizeIconProps={
                                                    Object {
                                                      "focused": false,
                                                      "loading": false,
                                                      "open": undefined,
                                                      "searchValue": "",
                                                      "showSearch": false,
                                                    }
                                                  }
                                                >
                                                  <span
                                                    aria-hidden={true}
                                                    className="ant-select-arrow"
                                                    onMouseDown={[Function]}
                                                    style={
                                                      Object {
                                                        "WebkitUserSelect": "none",
                                                        "userSelect": "none",
                                                      }
                                                    }
                                                    unselectable="on"
                                                  >
                                                    <ForwardRef(DownOutlined)
                                                      className="ant-select-suffix"
                                                    >
                                                      <AntdIcon
                                                        className="ant-select-suffix"
                                                        icon={
                                                          Object {
                                                            "icon": Object {
                                                              "attrs": Object {
                                                                "focusable": "false",
                                                                "viewBox": "64 64 896 896",
                                                              },
                                                              "children": Array [
                                                                Object {
                                                                  "attrs": Object {
                                                                    "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                                                  },
                                                                  "tag": "path",
                                                                },
                                                              ],
                                                              "tag": "svg",
                                                            },
                                                            "name": "down",
                                                            "theme": "outlined",
                                                          }
                                                        }
                                                      >
                                                        <span
                                                          aria-label="down"
                                                          className="anticon anticon-down ant-select-suffix"
                                                          role="img"
                                                        >
                                                          <IconReact
                                                            className=""
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "down",
                                                                "theme": "outlined",
                                                              }
                                                            }
                                                          >
                                                            <svg
                                                              aria-hidden="true"
                                                              className=""
                                                              data-icon="down"
                                                              fill="currentColor"
                                                              focusable="false"
                                                              height="1em"
                                                              key="svg-down"
                                                              viewBox="64 64 896 896"
                                                              width="1em"
                                                            >
                                                              <path
                                                                d="M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z"
                                                                key="svg-down-svg-0"
                                                              />
                                                            </svg>
                                                          </IconReact>
                                                        </span>
                                                      </AntdIcon>
                                                    </ForwardRef(DownOutlined)>
                                                  </span>
                                                </TransBtn>
                                                <TransBtn
                                                  className="ant-select-clear"
                                                  customizeIcon={<ForwardRef(CloseCircleFilled) />}
                                                  onMouseDown={[Function]}
                                                >
                                                  <span
                                                    aria-hidden={true}
                                                    className="ant-select-clear"
                                                    onMouseDown={[Function]}
                                                    style={
                                                      Object {
                                                        "WebkitUserSelect": "none",
                                                        "userSelect": "none",
                                                      }
                                                    }
                                                    unselectable="on"
                                                  >
                                                    <ForwardRef(CloseCircleFilled)>
                                                      <AntdIcon
                                                        icon={
                                                          Object {
                                                            "icon": Object {
                                                              "attrs": Object {
                                                                "focusable": "false",
                                                                "viewBox": "64 64 896 896",
                                                              },
                                                              "children": Array [
                                                                Object {
                                                                  "attrs": Object {
                                                                    "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                  },
                                                                  "tag": "path",
                                                                },
                                                              ],
                                                              "tag": "svg",
                                                            },
                                                            "name": "close-circle",
                                                            "theme": "filled",
                                                          }
                                                        }
                                                      >
                                                        <span
                                                          aria-label="close-circle"
                                                          className="anticon anticon-close-circle"
                                                          role="img"
                                                        >
                                                          <IconReact
                                                            className=""
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "close-circle",
                                                                "theme": "filled",
                                                              }
                                                            }
                                                          >
                                                            <svg
                                                              aria-hidden="true"
                                                              className=""
                                                              data-icon="close-circle"
                                                              fill="currentColor"
                                                              focusable="false"
                                                              height="1em"
                                                              key="svg-close-circle"
                                                              viewBox="64 64 896 896"
                                                              width="1em"
                                                            >
                                                              <path
                                                                d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z"
                                                                key="svg-close-circle-svg-0"
                                                              />
                                                            </svg>
                                                          </IconReact>
                                                        </span>
                                                      </AntdIcon>
                                                    </ForwardRef(CloseCircleFilled)>
                                                  </span>
                                                </TransBtn>
                                              </div>
                                            </ForwardRef(Select)>
                                          </Select>
                                        </ForwardRef(InternalSelect)>
                                      </Selector>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Rating"
                  name="rating"
                  rules={
                    Array [
                      Object {
                        "message": "Please add rating!",
                        "required": true,
                      },
                    ]
                  }
                >
                  <WrapperField
                    label="Rating"
                    messageVariables={
                      Object {
                        "label": "Rating",
                      }
                    }
                    name="rating"
                    onReset={[Function]}
                    rules={
                      Array [
                        Object {
                          "message": "Please add rating!",
                          "required": true,
                        },
                      ]
                    }
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_rating"
                      label="Rating"
                      messageVariables={
                        Object {
                          "label": "Rating",
                        }
                      }
                      name={
                        Array [
                          "rating",
                        ]
                      }
                      onReset={[Function]}
                      rules={
                        Array [
                          Object {
                            "message": "Please add rating!",
                            "required": true,
                          },
                        ]
                      }
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_rating"
                            label="Rating"
                            name="rating"
                            prefixCls="ant-form"
                            required={true}
                            requiredMark={true}
                            rules={
                              Array [
                                Object {
                                  "message": "Please add rating!",
                                  "required": true,
                                },
                              ]
                            }
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className="ant-form-item-required"
                                  htmlFor="create-claim_rating"
                                  title="Rating"
                                >
                                  Rating
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Rating"
                            name={
                              Array [
                                "rating",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            rules={
                              Array [
                                Object {
                                  "message": "Please add rating!",
                                  "required": true,
                                },
                              ]
                            }
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={1}
                                      value={1}
                                    >
                                      <Selector
                                        action="Ratings"
                                        id="create-claim_rating"
                                        onChange={[Function]}
                                        value={1}
                                      >
                                        <ForwardRef(InternalSelect)
                                          allowClear={true}
                                          bordered={true}
                                          defaultValue={
                                            Array [
                                              1,
                                            ]
                                          }
                                          filterOption={[Function]}
                                          getPopupContainer={[Function]}
                                          listHeight={128}
                                          loading={false}
                                          notFoundContent={null}
                                          onChange={[Function]}
                                          onPopupScroll={[Function]}
                                          onSearch={[Function]}
                                          placeholder="Select ratings"
                                        >
                                          <Select
                                            allowClear={true}
                                            className=""
                                            clearIcon={<ForwardRef(CloseCircleFilled) />}
                                            defaultValue={
                                              Array [
                                                1,
                                              ]
                                            }
                                            dropdownClassName=""
                                            filterOption={[Function]}
                                            getPopupContainer={[Function]}
                                            inputIcon={[Function]}
                                            listHeight={128}
                                            listItemHeight={24}
                                            loading={false}
                                            menuItemSelectedIcon={null}
                                            notFoundContent={null}
                                            onChange={[Function]}
                                            onPopupScroll={[Function]}
                                            onSearch={[Function]}
                                            placeholder="Select ratings"
                                            prefixCls="ant-select"
                                            removeIcon={<ForwardRef(CloseOutlined) />}
                                            transitionName="slide-up"
                                          >
                                            <ForwardRef(Select)
                                              allowClear={true}
                                              className=""
                                              clearIcon={<ForwardRef(CloseCircleFilled) />}
                                              defaultValue={
                                                Array [
                                                  1,
                                                ]
                                              }
                                              dropdownClassName=""
                                              filterOption={[Function]}
                                              getPopupContainer={[Function]}
                                              inputIcon={[Function]}
                                              listHeight={128}
                                              listItemHeight={24}
                                              loading={false}
                                              menuItemSelectedIcon={null}
                                              notFoundContent={null}
                                              onChange={[Function]}
                                              onPopupScroll={[Function]}
                                              onSearch={[Function]}
                                              placeholder="Select ratings"
                                              prefixCls="ant-select"
                                              removeIcon={<ForwardRef(CloseOutlined) />}
                                              transitionName="slide-up"
                                            >
                                              <div
                                                className="ant-select ant-select-single ant-select-allow-clear ant-select-show-arrow"
                                                onBlur={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                onKeyUp={[Function]}
                                                onMouseDown={[Function]}
                                              >
                                                <SelectTrigger
                                                  containerWidth={null}
                                                  dropdownClassName=""
                                                  empty={true}
                                                  getPopupContainer={[Function]}
                                                  getTriggerDOMNode={[Function]}
                                                  popupElement={
                                                    <ForwardRef(OptionList)
                                                      childrenAsData={true}
                                                      defaultActiveFirstOption={true}
                                                      flattenOptions={Array []}
                                                      height={128}
                                                      itemHeight={24}
                                                      menuItemSelectedIcon={null}
                                                      multiple={false}
                                                      notFoundContent={null}
                                                      onActiveValue={[Function]}
                                                      onMouseEnter={[Function]}
                                                      onScroll={[Function]}
                                                      onSelect={[Function]}
                                                      onToggleOpen={[Function]}
                                                      options={Array []}
                                                      prefixCls="ant-select"
                                                      searchValue=""
                                                      values={
                                                        Set {
                                                          1,
                                                        }
                                                      }
                                                      virtual={true}
                                                    />
                                                  }
                                                  prefixCls="ant-select"
                                                  transitionName="slide-up"
                                                  visible={false}
                                                >
                                                  <Trigger
                                                    action={Array []}
                                                    afterPopupVisibleChange={[Function]}
                                                    autoDestroy={false}
                                                    blurDelay={0.15}
                                                    builtinPlacements={
                                                      Object {
                                                        "bottomLeft": Object {
                                                          "offset": Array [
                                                            0,
                                                            4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "tl",
                                                            "bl",
                                                          ],
                                                        },
                                                        "bottomRight": Object {
                                                          "offset": Array [
                                                            0,
                                                            4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "tr",
                                                            "br",
                                                          ],
                                                        },
                                                        "topLeft": Object {
                                                          "offset": Array [
                                                            0,
                                                            -4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "bl",
                                                            "tl",
                                                          ],
                                                        },
                                                        "topRight": Object {
                                                          "offset": Array [
                                                            0,
                                                            -4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "br",
                                                            "tr",
                                                          ],
                                                        },
                                                      }
                                                    }
                                                    defaultPopupVisible={false}
                                                    destroyPopupOnHide={false}
                                                    focusDelay={0}
                                                    getDocument={[Function]}
                                                    getPopupClassNameFromAlign={[Function]}
                                                    getPopupContainer={[Function]}
                                                    getTriggerDOMNode={[Function]}
                                                    hideAction={Array []}
                                                    mask={false}
                                                    maskClosable={true}
                                                    mouseEnterDelay={0}
                                                    mouseLeaveDelay={0.1}
                                                    onPopupAlign={[Function]}
                                                    onPopupVisibleChange={[Function]}
                                                    popup={
                                                      <div>
                                                        <ForwardRef(OptionList)
                                                          childrenAsData={true}
                                                          defaultActiveFirstOption={true}
                                                          flattenOptions={Array []}
                                                          height={128}
                                                          itemHeight={24}
                                                          menuItemSelectedIcon={null}
                                                          multiple={false}
                                                          notFoundContent={null}
                                                          onActiveValue={[Function]}
                                                          onMouseEnter={[Function]}
                                                          onScroll={[Function]}
                                                          onSelect={[Function]}
                                                          onToggleOpen={[Function]}
                                                          options={Array []}
                                                          prefixCls="ant-select"
                                                          searchValue=""
                                                          values={
                                                            Set {
                                                              1,
                                                            }
                                                          }
                                                          virtual={true}
                                                        />
                                                      </div>
                                                    }
                                                    popupAlign={Object {}}
                                                    popupClassName="ant-select-dropdown-empty"
                                                    popupPlacement="bottomLeft"
                                                    popupStyle={
                                                      Object {
                                                        "minWidth": null,
                                                        "width": null,
                                                      }
                                                    }
                                                    popupTransitionName="slide-up"
                                                    popupVisible={false}
                                                    prefixCls="ant-select-dropdown"
                                                    showAction={Array []}
                                                  >
                                                    <Selector
                                                      accessibilityIndex={0}
                                                      activeValue={null}
                                                      allowClear={true}
                                                      className=""
                                                      clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                      defaultValue={
                                                        Array [
                                                          1,
                                                        ]
                                                      }
                                                      domRef={
                                                        Object {
                                                          "current": <div
                                                            class="ant-select-selector"
                                                          >
                                                            <span
                                                              class="ant-select-selection-search"
                                                            >
                                                              <input
                                                                aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                aria-autocomplete="list"
                                                                aria-controls="rc_select_TEST_OR_SSR_list"
                                                                aria-haspopup="listbox"
                                                                aria-owns="rc_select_TEST_OR_SSR_list"
                                                                autocomplete="off"
                                                                class="ant-select-selection-search-input"
                                                                id="rc_select_TEST_OR_SSR"
                                                                readonly=""
                                                                role="combobox"
                                                                style="opacity: 0;"
                                                                type="search"
                                                                unselectable="on"
                                                                value=""
                                                              />
                                                            </span>
                                                            <span
                                                              class="ant-select-selection-item"
                                                              title="1"
                                                            >
                                                              1
                                                            </span>
                                                          </div>,
                                                        }
                                                      }
                                                      dropdownClassName=""
                                                      filterOption={[Function]}
                                                      getPopupContainer={[Function]}
                                                      inputElement={null}
                                                      inputIcon={[Function]}
                                                      key="trigger"
                                                      listHeight={128}
                                                      listItemHeight={24}
                                                      loading={false}
                                                      menuItemSelectedIcon={null}
                                                      multiple={false}
                                                      notFoundContent={null}
                                                      onChange={[Function]}
                                                      onPopupScroll={[Function]}
                                                      onSearch={[Function]}
                                                      onSearchSubmit={[Function]}
                                                      onSelect={[Function]}
                                                      onToggleOpen={[Function]}
                                                      placeholder="Select ratings"
                                                      prefixCls="ant-select"
                                                      removeIcon={<ForwardRef(CloseOutlined) />}
                                                      searchValue=""
                                                      showSearch={false}
                                                      tokenWithEnter={false}
                                                      transitionName="slide-up"
                                                      values={
                                                        Array [
                                                          Object {
                                                            "disabled": undefined,
                                                            "key": 1,
                                                            "label": 1,
                                                            "value": 1,
                                                          },
                                                        ]
                                                      }
                                                    >
                                                      <div
                                                        className="ant-select-selector"
                                                        onClick={[Function]}
                                                        onMouseDown={[Function]}
                                                      >
                                                        <SingleSelector
                                                          accessibilityIndex={0}
                                                          activeValue={null}
                                                          allowClear={true}
                                                          className=""
                                                          clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                          defaultValue={
                                                            Array [
                                                              1,
                                                            ]
                                                          }
                                                          domRef={
                                                            Object {
                                                              "current": <div
                                                                class="ant-select-selector"
                                                              >
                                                                <span
                                                                  class="ant-select-selection-search"
                                                                >
                                                                  <input
                                                                    aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                    aria-autocomplete="list"
                                                                    aria-controls="rc_select_TEST_OR_SSR_list"
                                                                    aria-haspopup="listbox"
                                                                    aria-owns="rc_select_TEST_OR_SSR_list"
                                                                    autocomplete="off"
                                                                    class="ant-select-selection-search-input"
                                                                    id="rc_select_TEST_OR_SSR"
                                                                    readonly=""
                                                                    role="combobox"
                                                                    style="opacity: 0;"
                                                                    type="search"
                                                                    unselectable="on"
                                                                    value=""
                                                                  />
                                                                </span>
                                                                <span
                                                                  class="ant-select-selection-item"
                                                                  title="1"
                                                                >
                                                                  1
                                                                </span>
                                                              </div>,
                                                            }
                                                          }
                                                          dropdownClassName=""
                                                          filterOption={[Function]}
                                                          getPopupContainer={[Function]}
                                                          inputElement={null}
                                                          inputIcon={[Function]}
                                                          inputRef={
                                                            Object {
                                                              "current": <input
                                                                aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                aria-autocomplete="list"
                                                                aria-controls="rc_select_TEST_OR_SSR_list"
                                                                aria-haspopup="listbox"
                                                                aria-owns="rc_select_TEST_OR_SSR_list"
                                                                autocomplete="off"
                                                                class="ant-select-selection-search-input"
                                                                id="rc_select_TEST_OR_SSR"
                                                                readonly=""
                                                                role="combobox"
                                                                style="opacity: 0;"
                                                                type="search"
                                                                unselectable="on"
                                                                value=""
                                                              />,
                                                            }
                                                          }
                                                          listHeight={128}
                                                          listItemHeight={24}
                                                          loading={false}
                                                          menuItemSelectedIcon={null}
                                                          multiple={false}
                                                          notFoundContent={null}
                                                          onChange={[Function]}
                                                          onInputChange={[Function]}
                                                          onInputCompositionEnd={[Function]}
                                                          onInputCompositionStart={[Function]}
                                                          onInputKeyDown={[Function]}
                                                          onInputMouseDown={[Function]}
                                                          onInputPaste={[Function]}
                                                          onPopupScroll={[Function]}
                                                          onSearch={[Function]}
                                                          onSearchSubmit={[Function]}
                                                          onSelect={[Function]}
                                                          onToggleOpen={[Function]}
                                                          placeholder="Select ratings"
                                                          prefixCls="ant-select"
                                                          removeIcon={<ForwardRef(CloseOutlined) />}
                                                          searchValue=""
                                                          showSearch={false}
                                                          tokenWithEnter={false}
                                                          transitionName="slide-up"
                                                          values={
                                                            Array [
                                                              Object {
                                                                "disabled": undefined,
                                                                "key": 1,
                                                                "label": 1,
                                                                "value": 1,
                                                              },
                                                            ]
                                                          }
                                                        >
                                                          <span
                                                            className="ant-select-selection-search"
                                                          >
                                                            <Input
                                                              accessibilityIndex={0}
                                                              attrs={Object {}}
                                                              editable={false}
                                                              inputElement={null}
                                                              onChange={[Function]}
                                                              onCompositionEnd={[Function]}
                                                              onCompositionStart={[Function]}
                                                              onKeyDown={[Function]}
                                                              onMouseDown={[Function]}
                                                              onPaste={[Function]}
                                                              prefixCls="ant-select"
                                                              value=""
                                                            >
                                                              <input
                                                                aria-activedescendant="undefined_list_0"
                                                                aria-autocomplete="list"
                                                                aria-controls="undefined_list"
                                                                aria-haspopup="listbox"
                                                                aria-owns="undefined_list"
                                                                autoComplete="off"
                                                                className="ant-select-selection-search-input"
                                                                onChange={[Function]}
                                                                onCompositionEnd={[Function]}
                                                                onCompositionStart={[Function]}
                                                                onKeyDown={[Function]}
                                                                onMouseDown={[Function]}
                                                                onPaste={[Function]}
                                                                readOnly={true}
                                                                role="combobox"
                                                                style={
                                                                  Object {
                                                                    "opacity": 0,
                                                                  }
                                                                }
                                                                type="search"
                                                                unselectable="on"
                                                                value=""
                                                              />
                                                            </Input>
                                                          </span>
                                                          <span
                                                            className="ant-select-selection-item"
                                                            title="1"
                                                          >
                                                            1
                                                          </span>
                                                        </SingleSelector>
                                                      </div>
                                                    </Selector>
                                                  </Trigger>
                                                </SelectTrigger>
                                                <TransBtn
                                                  className="ant-select-arrow"
                                                  customizeIcon={[Function]}
                                                  customizeIconProps={
                                                    Object {
                                                      "focused": false,
                                                      "loading": false,
                                                      "open": undefined,
                                                      "searchValue": "",
                                                      "showSearch": false,
                                                    }
                                                  }
                                                >
                                                  <span
                                                    aria-hidden={true}
                                                    className="ant-select-arrow"
                                                    onMouseDown={[Function]}
                                                    style={
                                                      Object {
                                                        "WebkitUserSelect": "none",
                                                        "userSelect": "none",
                                                      }
                                                    }
                                                    unselectable="on"
                                                  >
                                                    <ForwardRef(DownOutlined)
                                                      className="ant-select-suffix"
                                                    >
                                                      <AntdIcon
                                                        className="ant-select-suffix"
                                                        icon={
                                                          Object {
                                                            "icon": Object {
                                                              "attrs": Object {
                                                                "focusable": "false",
                                                                "viewBox": "64 64 896 896",
                                                              },
                                                              "children": Array [
                                                                Object {
                                                                  "attrs": Object {
                                                                    "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                                                  },
                                                                  "tag": "path",
                                                                },
                                                              ],
                                                              "tag": "svg",
                                                            },
                                                            "name": "down",
                                                            "theme": "outlined",
                                                          }
                                                        }
                                                      >
                                                        <span
                                                          aria-label="down"
                                                          className="anticon anticon-down ant-select-suffix"
                                                          role="img"
                                                        >
                                                          <IconReact
                                                            className=""
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "down",
                                                                "theme": "outlined",
                                                              }
                                                            }
                                                          >
                                                            <svg
                                                              aria-hidden="true"
                                                              className=""
                                                              data-icon="down"
                                                              fill="currentColor"
                                                              focusable="false"
                                                              height="1em"
                                                              key="svg-down"
                                                              viewBox="64 64 896 896"
                                                              width="1em"
                                                            >
                                                              <path
                                                                d="M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z"
                                                                key="svg-down-svg-0"
                                                              />
                                                            </svg>
                                                          </IconReact>
                                                        </span>
                                                      </AntdIcon>
                                                    </ForwardRef(DownOutlined)>
                                                  </span>
                                                </TransBtn>
                                                <TransBtn
                                                  className="ant-select-clear"
                                                  customizeIcon={<ForwardRef(CloseCircleFilled) />}
                                                  onMouseDown={[Function]}
                                                >
                                                  <span
                                                    aria-hidden={true}
                                                    className="ant-select-clear"
                                                    onMouseDown={[Function]}
                                                    style={
                                                      Object {
                                                        "WebkitUserSelect": "none",
                                                        "userSelect": "none",
                                                      }
                                                    }
                                                    unselectable="on"
                                                  >
                                                    <ForwardRef(CloseCircleFilled)>
                                                      <AntdIcon
                                                        icon={
                                                          Object {
                                                            "icon": Object {
                                                              "attrs": Object {
                                                                "focusable": "false",
                                                                "viewBox": "64 64 896 896",
                                                              },
                                                              "children": Array [
                                                                Object {
                                                                  "attrs": Object {
                                                                    "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                  },
                                                                  "tag": "path",
                                                                },
                                                              ],
                                                              "tag": "svg",
                                                            },
                                                            "name": "close-circle",
                                                            "theme": "filled",
                                                          }
                                                        }
                                                      >
                                                        <span
                                                          aria-label="close-circle"
                                                          className="anticon anticon-close-circle"
                                                          role="img"
                                                        >
                                                          <IconReact
                                                            className=""
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "close-circle",
                                                                "theme": "filled",
                                                              }
                                                            }
                                                          >
                                                            <svg
                                                              aria-hidden="true"
                                                              className=""
                                                              data-icon="close-circle"
                                                              fill="currentColor"
                                                              focusable="false"
                                                              height="1em"
                                                              key="svg-close-circle"
                                                              viewBox="64 64 896 896"
                                                              width="1em"
                                                            >
                                                              <path
                                                                d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z"
                                                                key="svg-close-circle-svg-0"
                                                              />
                                                            </svg>
                                                          </IconReact>
                                                        </span>
                                                      </AntdIcon>
                                                    </ForwardRef(CloseCircleFilled)>
                                                  </span>
                                                </TransBtn>
                                              </div>
                                            </ForwardRef(Select)>
                                          </Select>
                                        </ForwardRef(InternalSelect)>
                                      </Selector>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Description"
                  name="description"
                >
                  <WrapperField
                    label="Description"
                    messageVariables={
                      Object {
                        "label": "Description",
                      }
                    }
                    name="description"
                    onReset={[Function]}
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_description"
                      label="Description"
                      messageVariables={
                        Object {
                          "label": "Description",
                        }
                      }
                      name={
                        Array [
                          "description",
                        ]
                      }
                      onReset={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_description"
                            label="Description"
                            name="description"
                            prefixCls="ant-form"
                            required={false}
                            requiredMark={true}
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className=""
                                  htmlFor="create-claim_description"
                                  title="Description"
                                >
                                  Description
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Description"
                            name={
                              Array [
                                "description",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={1}
                                      value={
                                        Object {
                                          "blocks": Array [
                                            Object {
                                              "data": Object {
                                                "level": 2,
                                                "text": "Editor.js",
                                              },
                                              "type": "header",
                                            },
                                            Object {
                                              "data": Object {
                                                "text": "Hey. Meet the new Editor. On this page you can see it in action — try to edit this text.",
                                              },
                                              "type": "paragraph",
                                            },
                                          ],
                                          "time": 1595747741807,
                                          "version": "2.18.0",
                                        }
                                      }
                                    >
                                      <Editor
                                        id="create-claim_description"
                                        onChange={[Function]}
                                        placeholder="Enter Description..."
                                        value={
                                          Object {
                                            "blocks": Array [
                                              Object {
                                                "data": Object {
                                                  "level": 2,
                                                  "text": "Editor.js",
                                                },
                                                "type": "header",
                                              },
                                              Object {
                                                "data": Object {
                                                  "text": "Hey. Meet the new Editor. On this page you can see it in action — try to edit this text.",
                                                },
                                                "type": "paragraph",
                                              },
                                            ],
                                            "time": 1595747741807,
                                            "version": "2.18.0",
                                          }
                                        }
                                      >
                                        <div
                                          style={null}
                                        />
                                      </Editor>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
              </div>
              <div
                style={
                  Object {
                    "display": "none",
                  }
                }
              >
                <FormItem
                  label="Claim Date"
                  name="claim_date"
                >
                  <WrapperField
                    label="Claim Date"
                    messageVariables={
                      Object {
                        "label": "Claim Date",
                      }
                    }
                    name="claim_date"
                    onReset={[Function]}
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_claim_date"
                      label="Claim Date"
                      messageVariables={
                        Object {
                          "label": "Claim Date",
                        }
                      }
                      name={
                        Array [
                          "claim_date",
                        ]
                      }
                      onReset={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_claim_date"
                            label="Claim Date"
                            name="claim_date"
                            prefixCls="ant-form"
                            required={false}
                            requiredMark={true}
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className=""
                                  htmlFor="create-claim_claim_date"
                                  title="Claim Date"
                                >
                                  Claim Date
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Claim Date"
                            name={
                              Array [
                                "claim_date",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={1}
                                      value={"2020-12-12T00:00:00.000Z"}
                                    >
                                      <Picker
                                        id="create-claim_claim_date"
                                        onChange={[Function]}
                                        value={"2020-12-12T00:00:00.000Z"}
                                      >
                                        <LocaleReceiver
                                          componentName="DatePicker"
                                          defaultLocale={[Function]}
                                        >
                                          <Picker
                                            allowClear={true}
                                            className=""
                                            clearIcon={<ForwardRef(CloseCircleFilled) />}
                                            components={
                                              Object {
                                                "button": [Function],
                                                "rangeItem": [Function],
                                              }
                                            }
                                            generateConfig={
                                              Object {
                                                "addDate": [Function],
                                                "addMonth": [Function],
                                                "addYear": [Function],
                                                "getDate": [Function],
                                                "getHour": [Function],
                                                "getMinute": [Function],
                                                "getMonth": [Function],
                                                "getNow": [Function],
                                                "getSecond": [Function],
                                                "getWeekDay": [Function],
                                                "getYear": [Function],
                                                "isAfter": [Function],
                                                "isValidate": [Function],
                                                "locale": Object {
                                                  "format": [Function],
                                                  "getShortMonths": [Function],
                                                  "getShortWeekDays": [Function],
                                                  "getWeek": [Function],
                                                  "getWeekFirstDay": [Function],
                                                  "parse": [Function],
                                                },
                                                "setDate": [Function],
                                                "setHour": [Function],
                                                "setMinute": [Function],
                                                "setMonth": [Function],
                                                "setSecond": [Function],
                                                "setYear": [Function],
                                              }
                                            }
                                            id="create-claim_claim_date"
                                            locale={
                                              Object {
                                                "backToToday": "Back to today",
                                                "clear": "Clear",
                                                "dateFormat": "M/D/YYYY",
                                                "dateSelect": "select date",
                                                "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                "dayFormat": "D",
                                                "decadeSelect": "Choose a decade",
                                                "locale": "en_US",
                                                "month": "Month",
                                                "monthBeforeYear": true,
                                                "monthPlaceholder": "Select month",
                                                "monthSelect": "Choose a month",
                                                "nextCentury": "Next century",
                                                "nextDecade": "Next decade",
                                                "nextMonth": "Next month (PageDown)",
                                                "nextYear": "Next year (Control + right)",
                                                "now": "Now",
                                                "ok": "Ok",
                                                "placeholder": "Select date",
                                                "previousCentury": "Last century",
                                                "previousDecade": "Last decade",
                                                "previousMonth": "Previous month (PageUp)",
                                                "previousYear": "Last year (Control + left)",
                                                "quarterPlaceholder": "Select quarter",
                                                "rangeMonthPlaceholder": Array [
                                                  "Start month",
                                                  "End month",
                                                ],
                                                "rangePlaceholder": Array [
                                                  "Start date",
                                                  "End date",
                                                ],
                                                "rangeWeekPlaceholder": Array [
                                                  "Start week",
                                                  "End week",
                                                ],
                                                "rangeYearPlaceholder": Array [
                                                  "Start year",
                                                  "End year",
                                                ],
                                                "timeSelect": "select time",
                                                "today": "Today",
                                                "weekPlaceholder": "Select week",
                                                "weekSelect": "Choose a week",
                                                "year": "Year",
                                                "yearFormat": "YYYY",
                                                "yearPlaceholder": "Select year",
                                                "yearSelect": "Choose a year",
                                              }
                                            }
                                            nextIcon={
                                              <span
                                                className="ant-picker-next-icon"
                                              />
                                            }
                                            onChange={[Function]}
                                            placeholder="Select date"
                                            prefixCls="ant-picker"
                                            prevIcon={
                                              <span
                                                className="ant-picker-prev-icon"
                                              />
                                            }
                                            showToday={true}
                                            suffixIcon={<ForwardRef(CalendarOutlined) />}
                                            superNextIcon={
                                              <span
                                                className="ant-picker-super-next-icon"
                                              />
                                            }
                                            superPrevIcon={
                                              <span
                                                className="ant-picker-super-prev-icon"
                                              />
                                            }
                                            transitionName="slide-up"
                                            value={"2020-12-12T00:00:00.000Z"}
                                          >
                                            <InnerPicker
                                              allowClear={true}
                                              className=""
                                              clearIcon={<ForwardRef(CloseCircleFilled) />}
                                              components={
                                                Object {
                                                  "button": [Function],
                                                  "rangeItem": [Function],
                                                }
                                              }
                                              generateConfig={
                                                Object {
                                                  "addDate": [Function],
                                                  "addMonth": [Function],
                                                  "addYear": [Function],
                                                  "getDate": [Function],
                                                  "getHour": [Function],
                                                  "getMinute": [Function],
                                                  "getMonth": [Function],
                                                  "getNow": [Function],
                                                  "getSecond": [Function],
                                                  "getWeekDay": [Function],
                                                  "getYear": [Function],
                                                  "isAfter": [Function],
                                                  "isValidate": [Function],
                                                  "locale": Object {
                                                    "format": [Function],
                                                    "getShortMonths": [Function],
                                                    "getShortWeekDays": [Function],
                                                    "getWeek": [Function],
                                                    "getWeekFirstDay": [Function],
                                                    "parse": [Function],
                                                  },
                                                  "setDate": [Function],
                                                  "setHour": [Function],
                                                  "setMinute": [Function],
                                                  "setMonth": [Function],
                                                  "setSecond": [Function],
                                                  "setYear": [Function],
                                                }
                                              }
                                              id="create-claim_claim_date"
                                              locale={
                                                Object {
                                                  "backToToday": "Back to today",
                                                  "clear": "Clear",
                                                  "dateFormat": "M/D/YYYY",
                                                  "dateSelect": "select date",
                                                  "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                  "dayFormat": "D",
                                                  "decadeSelect": "Choose a decade",
                                                  "locale": "en_US",
                                                  "month": "Month",
                                                  "monthBeforeYear": true,
                                                  "monthPlaceholder": "Select month",
                                                  "monthSelect": "Choose a month",
                                                  "nextCentury": "Next century",
                                                  "nextDecade": "Next decade",
                                                  "nextMonth": "Next month (PageDown)",
                                                  "nextYear": "Next year (Control + right)",
                                                  "now": "Now",
                                                  "ok": "Ok",
                                                  "placeholder": "Select date",
                                                  "previousCentury": "Last century",
                                                  "previousDecade": "Last decade",
                                                  "previousMonth": "Previous month (PageUp)",
                                                  "previousYear": "Last year (Control + left)",
                                                  "quarterPlaceholder": "Select quarter",
                                                  "rangeMonthPlaceholder": Array [
                                                    "Start month",
                                                    "End month",
                                                  ],
                                                  "rangePlaceholder": Array [
                                                    "Start date",
                                                    "End date",
                                                  ],
                                                  "rangeWeekPlaceholder": Array [
                                                    "Start week",
                                                    "End week",
                                                  ],
                                                  "rangeYearPlaceholder": Array [
                                                    "Start year",
                                                    "End year",
                                                  ],
                                                  "timeSelect": "select time",
                                                  "today": "Today",
                                                  "weekPlaceholder": "Select week",
                                                  "weekSelect": "Choose a week",
                                                  "year": "Year",
                                                  "yearFormat": "YYYY",
                                                  "yearPlaceholder": "Select year",
                                                  "yearSelect": "Choose a year",
                                                }
                                              }
                                              nextIcon={
                                                <span
                                                  className="ant-picker-next-icon"
                                                />
                                              }
                                              onChange={[Function]}
                                              pickerRef={
                                                Object {
                                                  "current": Object {
                                                    "blur": [Function],
                                                    "focus": [Function],
                                                  },
                                                }
                                              }
                                              placeholder="Select date"
                                              prefixCls="ant-picker"
                                              prevIcon={
                                                <span
                                                  className="ant-picker-prev-icon"
                                                />
                                              }
                                              showToday={true}
                                              suffixIcon={<ForwardRef(CalendarOutlined) />}
                                              superNextIcon={
                                                <span
                                                  className="ant-picker-super-next-icon"
                                                />
                                              }
                                              superPrevIcon={
                                                <span
                                                  className="ant-picker-super-prev-icon"
                                                />
                                              }
                                              transitionName="slide-up"
                                              value={"2020-12-12T00:00:00.000Z"}
                                            >
                                              <PickerTrigger
                                                popupElement={
                                                  <div
                                                    className="ant-picker-panel-container"
                                                    onMouseDown={[Function]}
                                                  >
                                                    <PickerPanel
                                                      allowClear={true}
                                                      className="ant-picker-panel-focused"
                                                      clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                      components={
                                                        Object {
                                                          "button": [Function],
                                                          "rangeItem": [Function],
                                                        }
                                                      }
                                                      generateConfig={
                                                        Object {
                                                          "addDate": [Function],
                                                          "addMonth": [Function],
                                                          "addYear": [Function],
                                                          "getDate": [Function],
                                                          "getHour": [Function],
                                                          "getMinute": [Function],
                                                          "getMonth": [Function],
                                                          "getNow": [Function],
                                                          "getSecond": [Function],
                                                          "getWeekDay": [Function],
                                                          "getYear": [Function],
                                                          "isAfter": [Function],
                                                          "isValidate": [Function],
                                                          "locale": Object {
                                                            "format": [Function],
                                                            "getShortMonths": [Function],
                                                            "getShortWeekDays": [Function],
                                                            "getWeek": [Function],
                                                            "getWeekFirstDay": [Function],
                                                            "parse": [Function],
                                                          },
                                                          "setDate": [Function],
                                                          "setHour": [Function],
                                                          "setMinute": [Function],
                                                          "setMonth": [Function],
                                                          "setSecond": [Function],
                                                          "setYear": [Function],
                                                        }
                                                      }
                                                      id="create-claim_claim_date"
                                                      locale={
                                                        Object {
                                                          "backToToday": "Back to today",
                                                          "clear": "Clear",
                                                          "dateFormat": "M/D/YYYY",
                                                          "dateSelect": "select date",
                                                          "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                          "dayFormat": "D",
                                                          "decadeSelect": "Choose a decade",
                                                          "locale": "en_US",
                                                          "month": "Month",
                                                          "monthBeforeYear": true,
                                                          "monthPlaceholder": "Select month",
                                                          "monthSelect": "Choose a month",
                                                          "nextCentury": "Next century",
                                                          "nextDecade": "Next decade",
                                                          "nextMonth": "Next month (PageDown)",
                                                          "nextYear": "Next year (Control + right)",
                                                          "now": "Now",
                                                          "ok": "Ok",
                                                          "placeholder": "Select date",
                                                          "previousCentury": "Last century",
                                                          "previousDecade": "Last decade",
                                                          "previousMonth": "Previous month (PageUp)",
                                                          "previousYear": "Last year (Control + left)",
                                                          "quarterPlaceholder": "Select quarter",
                                                          "rangeMonthPlaceholder": Array [
                                                            "Start month",
                                                            "End month",
                                                          ],
                                                          "rangePlaceholder": Array [
                                                            "Start date",
                                                            "End date",
                                                          ],
                                                          "rangeWeekPlaceholder": Array [
                                                            "Start week",
                                                            "End week",
                                                          ],
                                                          "rangeYearPlaceholder": Array [
                                                            "Start year",
                                                            "End year",
                                                          ],
                                                          "timeSelect": "select time",
                                                          "today": "Today",
                                                          "weekPlaceholder": "Select week",
                                                          "weekSelect": "Choose a week",
                                                          "year": "Year",
                                                          "yearFormat": "YYYY",
                                                          "yearPlaceholder": "Select year",
                                                          "yearSelect": "Choose a year",
                                                        }
                                                      }
                                                      nextIcon={
                                                        <span
                                                          className="ant-picker-next-icon"
                                                        />
                                                      }
                                                      onChange={[Function]}
                                                      pickerRef={
                                                        Object {
                                                          "current": Object {
                                                            "blur": [Function],
                                                            "focus": [Function],
                                                          },
                                                        }
                                                      }
                                                      placeholder="Select date"
                                                      prefixCls="ant-picker"
                                                      prevIcon={
                                                        <span
                                                          className="ant-picker-prev-icon"
                                                        />
                                                      }
                                                      showToday={true}
                                                      suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                      superNextIcon={
                                                        <span
                                                          className="ant-picker-super-next-icon"
                                                        />
                                                      }
                                                      superPrevIcon={
                                                        <span
                                                          className="ant-picker-super-prev-icon"
                                                        />
                                                      }
                                                      tabIndex={-1}
                                                      transitionName="slide-up"
                                                      value={"2020-12-12T00:00:00.000Z"}
                                                    />
                                                  </div>
                                                }
                                                popupPlacement="bottomLeft"
                                                prefixCls="ant-picker"
                                                transitionName="slide-up"
                                                visible={false}
                                              >
                                                <Trigger
                                                  action={Array []}
                                                  afterPopupVisibleChange={[Function]}
                                                  autoDestroy={false}
                                                  blurDelay={0.15}
                                                  builtinPlacements={
                                                    Object {
                                                      "bottomLeft": Object {
                                                        "offset": Array [
                                                          0,
                                                          4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 1,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "tl",
                                                          "bl",
                                                        ],
                                                      },
                                                      "bottomRight": Object {
                                                        "offset": Array [
                                                          0,
                                                          4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 1,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "tr",
                                                          "br",
                                                        ],
                                                      },
                                                      "topLeft": Object {
                                                        "offset": Array [
                                                          0,
                                                          -4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 0,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "bl",
                                                          "tl",
                                                        ],
                                                      },
                                                      "topRight": Object {
                                                        "offset": Array [
                                                          0,
                                                          -4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 0,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "br",
                                                          "tr",
                                                        ],
                                                      },
                                                    }
                                                  }
                                                  defaultPopupVisible={false}
                                                  destroyPopupOnHide={false}
                                                  focusDelay={0}
                                                  getDocument={[Function]}
                                                  getPopupClassNameFromAlign={[Function]}
                                                  hideAction={Array []}
                                                  mask={false}
                                                  maskClosable={true}
                                                  mouseEnterDelay={0}
                                                  mouseLeaveDelay={0.1}
                                                  onPopupAlign={[Function]}
                                                  onPopupVisibleChange={[Function]}
                                                  popup={
                                                    <div
                                                      className="ant-picker-panel-container"
                                                      onMouseDown={[Function]}
                                                    >
                                                      <PickerPanel
                                                        allowClear={true}
                                                        className="ant-picker-panel-focused"
                                                        clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                        components={
                                                          Object {
                                                            "button": [Function],
                                                            "rangeItem": [Function],
                                                          }
                                                        }
                                                        generateConfig={
                                                          Object {
                                                            "addDate": [Function],
                                                            "addMonth": [Function],
                                                            "addYear": [Function],
                                                            "getDate": [Function],
                                                            "getHour": [Function],
                                                            "getMinute": [Function],
                                                            "getMonth": [Function],
                                                            "getNow": [Function],
                                                            "getSecond": [Function],
                                                            "getWeekDay": [Function],
                                                            "getYear": [Function],
                                                            "isAfter": [Function],
                                                            "isValidate": [Function],
                                                            "locale": Object {
                                                              "format": [Function],
                                                              "getShortMonths": [Function],
                                                              "getShortWeekDays": [Function],
                                                              "getWeek": [Function],
                                                              "getWeekFirstDay": [Function],
                                                              "parse": [Function],
                                                            },
                                                            "setDate": [Function],
                                                            "setHour": [Function],
                                                            "setMinute": [Function],
                                                            "setMonth": [Function],
                                                            "setSecond": [Function],
                                                            "setYear": [Function],
                                                          }
                                                        }
                                                        id="create-claim_claim_date"
                                                        locale={
                                                          Object {
                                                            "backToToday": "Back to today",
                                                            "clear": "Clear",
                                                            "dateFormat": "M/D/YYYY",
                                                            "dateSelect": "select date",
                                                            "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                            "dayFormat": "D",
                                                            "decadeSelect": "Choose a decade",
                                                            "locale": "en_US",
                                                            "month": "Month",
                                                            "monthBeforeYear": true,
                                                            "monthPlaceholder": "Select month",
                                                            "monthSelect": "Choose a month",
                                                            "nextCentury": "Next century",
                                                            "nextDecade": "Next decade",
                                                            "nextMonth": "Next month (PageDown)",
                                                            "nextYear": "Next year (Control + right)",
                                                            "now": "Now",
                                                            "ok": "Ok",
                                                            "placeholder": "Select date",
                                                            "previousCentury": "Last century",
                                                            "previousDecade": "Last decade",
                                                            "previousMonth": "Previous month (PageUp)",
                                                            "previousYear": "Last year (Control + left)",
                                                            "quarterPlaceholder": "Select quarter",
                                                            "rangeMonthPlaceholder": Array [
                                                              "Start month",
                                                              "End month",
                                                            ],
                                                            "rangePlaceholder": Array [
                                                              "Start date",
                                                              "End date",
                                                            ],
                                                            "rangeWeekPlaceholder": Array [
                                                              "Start week",
                                                              "End week",
                                                            ],
                                                            "rangeYearPlaceholder": Array [
                                                              "Start year",
                                                              "End year",
                                                            ],
                                                            "timeSelect": "select time",
                                                            "today": "Today",
                                                            "weekPlaceholder": "Select week",
                                                            "weekSelect": "Choose a week",
                                                            "year": "Year",
                                                            "yearFormat": "YYYY",
                                                            "yearPlaceholder": "Select year",
                                                            "yearSelect": "Choose a year",
                                                          }
                                                        }
                                                        nextIcon={
                                                          <span
                                                            className="ant-picker-next-icon"
                                                          />
                                                        }
                                                        onChange={[Function]}
                                                        pickerRef={
                                                          Object {
                                                            "current": Object {
                                                              "blur": [Function],
                                                              "focus": [Function],
                                                            },
                                                          }
                                                        }
                                                        placeholder="Select date"
                                                        prefixCls="ant-picker"
                                                        prevIcon={
                                                          <span
                                                            className="ant-picker-prev-icon"
                                                          />
                                                        }
                                                        showToday={true}
                                                        suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                        superNextIcon={
                                                          <span
                                                            className="ant-picker-super-next-icon"
                                                          />
                                                        }
                                                        superPrevIcon={
                                                          <span
                                                            className="ant-picker-super-prev-icon"
                                                          />
                                                        }
                                                        tabIndex={-1}
                                                        transitionName="slide-up"
                                                        value={"2020-12-12T00:00:00.000Z"}
                                                      />
                                                    </div>
                                                  }
                                                  popupAlign={Object {}}
                                                  popupClassName=""
                                                  popupPlacement="bottomLeft"
                                                  popupStyle={Object {}}
                                                  popupTransitionName="slide-up"
                                                  popupVisible={false}
                                                  prefixCls="ant-picker-dropdown"
                                                  showAction={Array []}
                                                >
                                                  <div
                                                    className="ant-picker"
                                                    key="trigger"
                                                    onMouseUp={[Function]}
                                                  >
                                                    <div
                                                      className="ant-picker-input"
                                                    >
                                                      <input
                                                        autoComplete="off"
                                                        id="create-claim_claim_date"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        onMouseDown={[Function]}
                                                        placeholder="Select date"
                                                        readOnly={true}
                                                        size={12}
                                                        title=""
                                                        value=""
                                                      />
                                                      <span
                                                        className="ant-picker-suffix"
                                                      >
                                                        <ForwardRef(CalendarOutlined)>
                                                          <AntdIcon
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "calendar",
                                                                "theme": "outlined",
                                                              }
                                                            }
                                                          >
                                                            <span
                                                              aria-label="calendar"
                                                              className="anticon anticon-calendar"
                                                              role="img"
                                                            >
                                                              <IconReact
                                                                className=""
                                                                icon={
                                                                  Object {
                                                                    "icon": Object {
                                                                      "attrs": Object {
                                                                        "focusable": "false",
                                                                        "viewBox": "64 64 896 896",
                                                                      },
                                                                      "children": Array [
                                                                        Object {
                                                                          "attrs": Object {
                                                                            "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                          },
                                                                          "tag": "path",
                                                                        },
                                                                      ],
                                                                      "tag": "svg",
                                                                    },
                                                                    "name": "calendar",
                                                                    "theme": "outlined",
                                                                  }
                                                                }
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className=""
                                                                  data-icon="calendar"
                                                                  fill="currentColor"
                                                                  focusable="false"
                                                                  height="1em"
                                                                  key="svg-calendar"
                                                                  viewBox="64 64 896 896"
                                                                  width="1em"
                                                                >
                                                                  <path
                                                                    d="M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z"
                                                                    key="svg-calendar-svg-0"
                                                                  />
                                                                </svg>
                                                              </IconReact>
                                                            </span>
                                                          </AntdIcon>
                                                        </ForwardRef(CalendarOutlined)>
                                                      </span>
                                                      <span
                                                        className="ant-picker-clear"
                                                        onMouseDown={[Function]}
                                                        onMouseUp={[Function]}
                                                      >
                                                        <ForwardRef(CloseCircleFilled)>
                                                          <AntdIcon
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "close-circle",
                                                                "theme": "filled",
                                                              }
                                                            }
                                                          >
                                                            <span
                                                              aria-label="close-circle"
                                                              className="anticon anticon-close-circle"
                                                              role="img"
                                                            >
                                                              <IconReact
                                                                className=""
                                                                icon={
                                                                  Object {
                                                                    "icon": Object {
                                                                      "attrs": Object {
                                                                        "focusable": "false",
                                                                        "viewBox": "64 64 896 896",
                                                                      },
                                                                      "children": Array [
                                                                        Object {
                                                                          "attrs": Object {
                                                                            "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                          },
                                                                          "tag": "path",
                                                                        },
                                                                      ],
                                                                      "tag": "svg",
                                                                    },
                                                                    "name": "close-circle",
                                                                    "theme": "filled",
                                                                  }
                                                                }
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className=""
                                                                  data-icon="close-circle"
                                                                  fill="currentColor"
                                                                  focusable="false"
                                                                  height="1em"
                                                                  key="svg-close-circle"
                                                                  viewBox="64 64 896 896"
                                                                  width="1em"
                                                                >
                                                                  <path
                                                                    d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z"
                                                                    key="svg-close-circle-svg-0"
                                                                  />
                                                                </svg>
                                                              </IconReact>
                                                            </span>
                                                          </AntdIcon>
                                                        </ForwardRef(CloseCircleFilled)>
                                                      </span>
                                                    </div>
                                                  </div>
                                                </Trigger>
                                              </PickerTrigger>
                                            </InnerPicker>
                                          </Picker>
                                        </LocaleReceiver>
                                      </Picker>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Checked Date"
                  name="checked_date"
                >
                  <WrapperField
                    label="Checked Date"
                    messageVariables={
                      Object {
                        "label": "Checked Date",
                      }
                    }
                    name="checked_date"
                    onReset={[Function]}
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_checked_date"
                      label="Checked Date"
                      messageVariables={
                        Object {
                          "label": "Checked Date",
                        }
                      }
                      name={
                        Array [
                          "checked_date",
                        ]
                      }
                      onReset={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_checked_date"
                            label="Checked Date"
                            name="checked_date"
                            prefixCls="ant-form"
                            required={false}
                            requiredMark={true}
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className=""
                                  htmlFor="create-claim_checked_date"
                                  title="Checked Date"
                                >
                                  Checked Date
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Checked Date"
                            name={
                              Array [
                                "checked_date",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={1}
                                      value={"2020-12-12T00:00:00.000Z"}
                                    >
                                      <Picker
                                        id="create-claim_checked_date"
                                        onChange={[Function]}
                                        value={"2020-12-12T00:00:00.000Z"}
                                      >
                                        <LocaleReceiver
                                          componentName="DatePicker"
                                          defaultLocale={[Function]}
                                        >
                                          <Picker
                                            allowClear={true}
                                            className=""
                                            clearIcon={<ForwardRef(CloseCircleFilled) />}
                                            components={
                                              Object {
                                                "button": [Function],
                                                "rangeItem": [Function],
                                              }
                                            }
                                            generateConfig={
                                              Object {
                                                "addDate": [Function],
                                                "addMonth": [Function],
                                                "addYear": [Function],
                                                "getDate": [Function],
                                                "getHour": [Function],
                                                "getMinute": [Function],
                                                "getMonth": [Function],
                                                "getNow": [Function],
                                                "getSecond": [Function],
                                                "getWeekDay": [Function],
                                                "getYear": [Function],
                                                "isAfter": [Function],
                                                "isValidate": [Function],
                                                "locale": Object {
                                                  "format": [Function],
                                                  "getShortMonths": [Function],
                                                  "getShortWeekDays": [Function],
                                                  "getWeek": [Function],
                                                  "getWeekFirstDay": [Function],
                                                  "parse": [Function],
                                                },
                                                "setDate": [Function],
                                                "setHour": [Function],
                                                "setMinute": [Function],
                                                "setMonth": [Function],
                                                "setSecond": [Function],
                                                "setYear": [Function],
                                              }
                                            }
                                            id="create-claim_checked_date"
                                            locale={
                                              Object {
                                                "backToToday": "Back to today",
                                                "clear": "Clear",
                                                "dateFormat": "M/D/YYYY",
                                                "dateSelect": "select date",
                                                "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                "dayFormat": "D",
                                                "decadeSelect": "Choose a decade",
                                                "locale": "en_US",
                                                "month": "Month",
                                                "monthBeforeYear": true,
                                                "monthPlaceholder": "Select month",
                                                "monthSelect": "Choose a month",
                                                "nextCentury": "Next century",
                                                "nextDecade": "Next decade",
                                                "nextMonth": "Next month (PageDown)",
                                                "nextYear": "Next year (Control + right)",
                                                "now": "Now",
                                                "ok": "Ok",
                                                "placeholder": "Select date",
                                                "previousCentury": "Last century",
                                                "previousDecade": "Last decade",
                                                "previousMonth": "Previous month (PageUp)",
                                                "previousYear": "Last year (Control + left)",
                                                "quarterPlaceholder": "Select quarter",
                                                "rangeMonthPlaceholder": Array [
                                                  "Start month",
                                                  "End month",
                                                ],
                                                "rangePlaceholder": Array [
                                                  "Start date",
                                                  "End date",
                                                ],
                                                "rangeWeekPlaceholder": Array [
                                                  "Start week",
                                                  "End week",
                                                ],
                                                "rangeYearPlaceholder": Array [
                                                  "Start year",
                                                  "End year",
                                                ],
                                                "timeSelect": "select time",
                                                "today": "Today",
                                                "weekPlaceholder": "Select week",
                                                "weekSelect": "Choose a week",
                                                "year": "Year",
                                                "yearFormat": "YYYY",
                                                "yearPlaceholder": "Select year",
                                                "yearSelect": "Choose a year",
                                              }
                                            }
                                            nextIcon={
                                              <span
                                                className="ant-picker-next-icon"
                                              />
                                            }
                                            onChange={[Function]}
                                            placeholder="Select date"
                                            prefixCls="ant-picker"
                                            prevIcon={
                                              <span
                                                className="ant-picker-prev-icon"
                                              />
                                            }
                                            showToday={true}
                                            suffixIcon={<ForwardRef(CalendarOutlined) />}
                                            superNextIcon={
                                              <span
                                                className="ant-picker-super-next-icon"
                                              />
                                            }
                                            superPrevIcon={
                                              <span
                                                className="ant-picker-super-prev-icon"
                                              />
                                            }
                                            transitionName="slide-up"
                                            value={"2020-12-12T00:00:00.000Z"}
                                          >
                                            <InnerPicker
                                              allowClear={true}
                                              className=""
                                              clearIcon={<ForwardRef(CloseCircleFilled) />}
                                              components={
                                                Object {
                                                  "button": [Function],
                                                  "rangeItem": [Function],
                                                }
                                              }
                                              generateConfig={
                                                Object {
                                                  "addDate": [Function],
                                                  "addMonth": [Function],
                                                  "addYear": [Function],
                                                  "getDate": [Function],
                                                  "getHour": [Function],
                                                  "getMinute": [Function],
                                                  "getMonth": [Function],
                                                  "getNow": [Function],
                                                  "getSecond": [Function],
                                                  "getWeekDay": [Function],
                                                  "getYear": [Function],
                                                  "isAfter": [Function],
                                                  "isValidate": [Function],
                                                  "locale": Object {
                                                    "format": [Function],
                                                    "getShortMonths": [Function],
                                                    "getShortWeekDays": [Function],
                                                    "getWeek": [Function],
                                                    "getWeekFirstDay": [Function],
                                                    "parse": [Function],
                                                  },
                                                  "setDate": [Function],
                                                  "setHour": [Function],
                                                  "setMinute": [Function],
                                                  "setMonth": [Function],
                                                  "setSecond": [Function],
                                                  "setYear": [Function],
                                                }
                                              }
                                              id="create-claim_checked_date"
                                              locale={
                                                Object {
                                                  "backToToday": "Back to today",
                                                  "clear": "Clear",
                                                  "dateFormat": "M/D/YYYY",
                                                  "dateSelect": "select date",
                                                  "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                  "dayFormat": "D",
                                                  "decadeSelect": "Choose a decade",
                                                  "locale": "en_US",
                                                  "month": "Month",
                                                  "monthBeforeYear": true,
                                                  "monthPlaceholder": "Select month",
                                                  "monthSelect": "Choose a month",
                                                  "nextCentury": "Next century",
                                                  "nextDecade": "Next decade",
                                                  "nextMonth": "Next month (PageDown)",
                                                  "nextYear": "Next year (Control + right)",
                                                  "now": "Now",
                                                  "ok": "Ok",
                                                  "placeholder": "Select date",
                                                  "previousCentury": "Last century",
                                                  "previousDecade": "Last decade",
                                                  "previousMonth": "Previous month (PageUp)",
                                                  "previousYear": "Last year (Control + left)",
                                                  "quarterPlaceholder": "Select quarter",
                                                  "rangeMonthPlaceholder": Array [
                                                    "Start month",
                                                    "End month",
                                                  ],
                                                  "rangePlaceholder": Array [
                                                    "Start date",
                                                    "End date",
                                                  ],
                                                  "rangeWeekPlaceholder": Array [
                                                    "Start week",
                                                    "End week",
                                                  ],
                                                  "rangeYearPlaceholder": Array [
                                                    "Start year",
                                                    "End year",
                                                  ],
                                                  "timeSelect": "select time",
                                                  "today": "Today",
                                                  "weekPlaceholder": "Select week",
                                                  "weekSelect": "Choose a week",
                                                  "year": "Year",
                                                  "yearFormat": "YYYY",
                                                  "yearPlaceholder": "Select year",
                                                  "yearSelect": "Choose a year",
                                                }
                                              }
                                              nextIcon={
                                                <span
                                                  className="ant-picker-next-icon"
                                                />
                                              }
                                              onChange={[Function]}
                                              pickerRef={
                                                Object {
                                                  "current": Object {
                                                    "blur": [Function],
                                                    "focus": [Function],
                                                  },
                                                }
                                              }
                                              placeholder="Select date"
                                              prefixCls="ant-picker"
                                              prevIcon={
                                                <span
                                                  className="ant-picker-prev-icon"
                                                />
                                              }
                                              showToday={true}
                                              suffixIcon={<ForwardRef(CalendarOutlined) />}
                                              superNextIcon={
                                                <span
                                                  className="ant-picker-super-next-icon"
                                                />
                                              }
                                              superPrevIcon={
                                                <span
                                                  className="ant-picker-super-prev-icon"
                                                />
                                              }
                                              transitionName="slide-up"
                                              value={"2020-12-12T00:00:00.000Z"}
                                            >
                                              <PickerTrigger
                                                popupElement={
                                                  <div
                                                    className="ant-picker-panel-container"
                                                    onMouseDown={[Function]}
                                                  >
                                                    <PickerPanel
                                                      allowClear={true}
                                                      className="ant-picker-panel-focused"
                                                      clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                      components={
                                                        Object {
                                                          "button": [Function],
                                                          "rangeItem": [Function],
                                                        }
                                                      }
                                                      generateConfig={
                                                        Object {
                                                          "addDate": [Function],
                                                          "addMonth": [Function],
                                                          "addYear": [Function],
                                                          "getDate": [Function],
                                                          "getHour": [Function],
                                                          "getMinute": [Function],
                                                          "getMonth": [Function],
                                                          "getNow": [Function],
                                                          "getSecond": [Function],
                                                          "getWeekDay": [Function],
                                                          "getYear": [Function],
                                                          "isAfter": [Function],
                                                          "isValidate": [Function],
                                                          "locale": Object {
                                                            "format": [Function],
                                                            "getShortMonths": [Function],
                                                            "getShortWeekDays": [Function],
                                                            "getWeek": [Function],
                                                            "getWeekFirstDay": [Function],
                                                            "parse": [Function],
                                                          },
                                                          "setDate": [Function],
                                                          "setHour": [Function],
                                                          "setMinute": [Function],
                                                          "setMonth": [Function],
                                                          "setSecond": [Function],
                                                          "setYear": [Function],
                                                        }
                                                      }
                                                      id="create-claim_checked_date"
                                                      locale={
                                                        Object {
                                                          "backToToday": "Back to today",
                                                          "clear": "Clear",
                                                          "dateFormat": "M/D/YYYY",
                                                          "dateSelect": "select date",
                                                          "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                          "dayFormat": "D",
                                                          "decadeSelect": "Choose a decade",
                                                          "locale": "en_US",
                                                          "month": "Month",
                                                          "monthBeforeYear": true,
                                                          "monthPlaceholder": "Select month",
                                                          "monthSelect": "Choose a month",
                                                          "nextCentury": "Next century",
                                                          "nextDecade": "Next decade",
                                                          "nextMonth": "Next month (PageDown)",
                                                          "nextYear": "Next year (Control + right)",
                                                          "now": "Now",
                                                          "ok": "Ok",
                                                          "placeholder": "Select date",
                                                          "previousCentury": "Last century",
                                                          "previousDecade": "Last decade",
                                                          "previousMonth": "Previous month (PageUp)",
                                                          "previousYear": "Last year (Control + left)",
                                                          "quarterPlaceholder": "Select quarter",
                                                          "rangeMonthPlaceholder": Array [
                                                            "Start month",
                                                            "End month",
                                                          ],
                                                          "rangePlaceholder": Array [
                                                            "Start date",
                                                            "End date",
                                                          ],
                                                          "rangeWeekPlaceholder": Array [
                                                            "Start week",
                                                            "End week",
                                                          ],
                                                          "rangeYearPlaceholder": Array [
                                                            "Start year",
                                                            "End year",
                                                          ],
                                                          "timeSelect": "select time",
                                                          "today": "Today",
                                                          "weekPlaceholder": "Select week",
                                                          "weekSelect": "Choose a week",
                                                          "year": "Year",
                                                          "yearFormat": "YYYY",
                                                          "yearPlaceholder": "Select year",
                                                          "yearSelect": "Choose a year",
                                                        }
                                                      }
                                                      nextIcon={
                                                        <span
                                                          className="ant-picker-next-icon"
                                                        />
                                                      }
                                                      onChange={[Function]}
                                                      pickerRef={
                                                        Object {
                                                          "current": Object {
                                                            "blur": [Function],
                                                            "focus": [Function],
                                                          },
                                                        }
                                                      }
                                                      placeholder="Select date"
                                                      prefixCls="ant-picker"
                                                      prevIcon={
                                                        <span
                                                          className="ant-picker-prev-icon"
                                                        />
                                                      }
                                                      showToday={true}
                                                      suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                      superNextIcon={
                                                        <span
                                                          className="ant-picker-super-next-icon"
                                                        />
                                                      }
                                                      superPrevIcon={
                                                        <span
                                                          className="ant-picker-super-prev-icon"
                                                        />
                                                      }
                                                      tabIndex={-1}
                                                      transitionName="slide-up"
                                                      value={"2020-12-12T00:00:00.000Z"}
                                                    />
                                                  </div>
                                                }
                                                popupPlacement="bottomLeft"
                                                prefixCls="ant-picker"
                                                transitionName="slide-up"
                                                visible={false}
                                              >
                                                <Trigger
                                                  action={Array []}
                                                  afterPopupVisibleChange={[Function]}
                                                  autoDestroy={false}
                                                  blurDelay={0.15}
                                                  builtinPlacements={
                                                    Object {
                                                      "bottomLeft": Object {
                                                        "offset": Array [
                                                          0,
                                                          4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 1,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "tl",
                                                          "bl",
                                                        ],
                                                      },
                                                      "bottomRight": Object {
                                                        "offset": Array [
                                                          0,
                                                          4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 1,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "tr",
                                                          "br",
                                                        ],
                                                      },
                                                      "topLeft": Object {
                                                        "offset": Array [
                                                          0,
                                                          -4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 0,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "bl",
                                                          "tl",
                                                        ],
                                                      },
                                                      "topRight": Object {
                                                        "offset": Array [
                                                          0,
                                                          -4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 0,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "br",
                                                          "tr",
                                                        ],
                                                      },
                                                    }
                                                  }
                                                  defaultPopupVisible={false}
                                                  destroyPopupOnHide={false}
                                                  focusDelay={0}
                                                  getDocument={[Function]}
                                                  getPopupClassNameFromAlign={[Function]}
                                                  hideAction={Array []}
                                                  mask={false}
                                                  maskClosable={true}
                                                  mouseEnterDelay={0}
                                                  mouseLeaveDelay={0.1}
                                                  onPopupAlign={[Function]}
                                                  onPopupVisibleChange={[Function]}
                                                  popup={
                                                    <div
                                                      className="ant-picker-panel-container"
                                                      onMouseDown={[Function]}
                                                    >
                                                      <PickerPanel
                                                        allowClear={true}
                                                        className="ant-picker-panel-focused"
                                                        clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                        components={
                                                          Object {
                                                            "button": [Function],
                                                            "rangeItem": [Function],
                                                          }
                                                        }
                                                        generateConfig={
                                                          Object {
                                                            "addDate": [Function],
                                                            "addMonth": [Function],
                                                            "addYear": [Function],
                                                            "getDate": [Function],
                                                            "getHour": [Function],
                                                            "getMinute": [Function],
                                                            "getMonth": [Function],
                                                            "getNow": [Function],
                                                            "getSecond": [Function],
                                                            "getWeekDay": [Function],
                                                            "getYear": [Function],
                                                            "isAfter": [Function],
                                                            "isValidate": [Function],
                                                            "locale": Object {
                                                              "format": [Function],
                                                              "getShortMonths": [Function],
                                                              "getShortWeekDays": [Function],
                                                              "getWeek": [Function],
                                                              "getWeekFirstDay": [Function],
                                                              "parse": [Function],
                                                            },
                                                            "setDate": [Function],
                                                            "setHour": [Function],
                                                            "setMinute": [Function],
                                                            "setMonth": [Function],
                                                            "setSecond": [Function],
                                                            "setYear": [Function],
                                                          }
                                                        }
                                                        id="create-claim_checked_date"
                                                        locale={
                                                          Object {
                                                            "backToToday": "Back to today",
                                                            "clear": "Clear",
                                                            "dateFormat": "M/D/YYYY",
                                                            "dateSelect": "select date",
                                                            "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                            "dayFormat": "D",
                                                            "decadeSelect": "Choose a decade",
                                                            "locale": "en_US",
                                                            "month": "Month",
                                                            "monthBeforeYear": true,
                                                            "monthPlaceholder": "Select month",
                                                            "monthSelect": "Choose a month",
                                                            "nextCentury": "Next century",
                                                            "nextDecade": "Next decade",
                                                            "nextMonth": "Next month (PageDown)",
                                                            "nextYear": "Next year (Control + right)",
                                                            "now": "Now",
                                                            "ok": "Ok",
                                                            "placeholder": "Select date",
                                                            "previousCentury": "Last century",
                                                            "previousDecade": "Last decade",
                                                            "previousMonth": "Previous month (PageUp)",
                                                            "previousYear": "Last year (Control + left)",
                                                            "quarterPlaceholder": "Select quarter",
                                                            "rangeMonthPlaceholder": Array [
                                                              "Start month",
                                                              "End month",
                                                            ],
                                                            "rangePlaceholder": Array [
                                                              "Start date",
                                                              "End date",
                                                            ],
                                                            "rangeWeekPlaceholder": Array [
                                                              "Start week",
                                                              "End week",
                                                            ],
                                                            "rangeYearPlaceholder": Array [
                                                              "Start year",
                                                              "End year",
                                                            ],
                                                            "timeSelect": "select time",
                                                            "today": "Today",
                                                            "weekPlaceholder": "Select week",
                                                            "weekSelect": "Choose a week",
                                                            "year": "Year",
                                                            "yearFormat": "YYYY",
                                                            "yearPlaceholder": "Select year",
                                                            "yearSelect": "Choose a year",
                                                          }
                                                        }
                                                        nextIcon={
                                                          <span
                                                            className="ant-picker-next-icon"
                                                          />
                                                        }
                                                        onChange={[Function]}
                                                        pickerRef={
                                                          Object {
                                                            "current": Object {
                                                              "blur": [Function],
                                                              "focus": [Function],
                                                            },
                                                          }
                                                        }
                                                        placeholder="Select date"
                                                        prefixCls="ant-picker"
                                                        prevIcon={
                                                          <span
                                                            className="ant-picker-prev-icon"
                                                          />
                                                        }
                                                        showToday={true}
                                                        suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                        superNextIcon={
                                                          <span
                                                            className="ant-picker-super-next-icon"
                                                          />
                                                        }
                                                        superPrevIcon={
                                                          <span
                                                            className="ant-picker-super-prev-icon"
                                                          />
                                                        }
                                                        tabIndex={-1}
                                                        transitionName="slide-up"
                                                        value={"2020-12-12T00:00:00.000Z"}
                                                      />
                                                    </div>
                                                  }
                                                  popupAlign={Object {}}
                                                  popupClassName=""
                                                  popupPlacement="bottomLeft"
                                                  popupStyle={Object {}}
                                                  popupTransitionName="slide-up"
                                                  popupVisible={false}
                                                  prefixCls="ant-picker-dropdown"
                                                  showAction={Array []}
                                                >
                                                  <div
                                                    className="ant-picker"
                                                    key="trigger"
                                                    onMouseUp={[Function]}
                                                  >
                                                    <div
                                                      className="ant-picker-input"
                                                    >
                                                      <input
                                                        autoComplete="off"
                                                        id="create-claim_checked_date"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        onMouseDown={[Function]}
                                                        placeholder="Select date"
                                                        readOnly={true}
                                                        size={12}
                                                        title=""
                                                        value=""
                                                      />
                                                      <span
                                                        className="ant-picker-suffix"
                                                      >
                                                        <ForwardRef(CalendarOutlined)>
                                                          <AntdIcon
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "calendar",
                                                                "theme": "outlined",
                                                              }
                                                            }
                                                          >
                                                            <span
                                                              aria-label="calendar"
                                                              className="anticon anticon-calendar"
                                                              role="img"
                                                            >
                                                              <IconReact
                                                                className=""
                                                                icon={
                                                                  Object {
                                                                    "icon": Object {
                                                                      "attrs": Object {
                                                                        "focusable": "false",
                                                                        "viewBox": "64 64 896 896",
                                                                      },
                                                                      "children": Array [
                                                                        Object {
                                                                          "attrs": Object {
                                                                            "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                          },
                                                                          "tag": "path",
                                                                        },
                                                                      ],
                                                                      "tag": "svg",
                                                                    },
                                                                    "name": "calendar",
                                                                    "theme": "outlined",
                                                                  }
                                                                }
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className=""
                                                                  data-icon="calendar"
                                                                  fill="currentColor"
                                                                  focusable="false"
                                                                  height="1em"
                                                                  key="svg-calendar"
                                                                  viewBox="64 64 896 896"
                                                                  width="1em"
                                                                >
                                                                  <path
                                                                    d="M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z"
                                                                    key="svg-calendar-svg-0"
                                                                  />
                                                                </svg>
                                                              </IconReact>
                                                            </span>
                                                          </AntdIcon>
                                                        </ForwardRef(CalendarOutlined)>
                                                      </span>
                                                      <span
                                                        className="ant-picker-clear"
                                                        onMouseDown={[Function]}
                                                        onMouseUp={[Function]}
                                                      >
                                                        <ForwardRef(CloseCircleFilled)>
                                                          <AntdIcon
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "close-circle",
                                                                "theme": "filled",
                                                              }
                                                            }
                                                          >
                                                            <span
                                                              aria-label="close-circle"
                                                              className="anticon anticon-close-circle"
                                                              role="img"
                                                            >
                                                              <IconReact
                                                                className=""
                                                                icon={
                                                                  Object {
                                                                    "icon": Object {
                                                                      "attrs": Object {
                                                                        "focusable": "false",
                                                                        "viewBox": "64 64 896 896",
                                                                      },
                                                                      "children": Array [
                                                                        Object {
                                                                          "attrs": Object {
                                                                            "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                          },
                                                                          "tag": "path",
                                                                        },
                                                                      ],
                                                                      "tag": "svg",
                                                                    },
                                                                    "name": "close-circle",
                                                                    "theme": "filled",
                                                                  }
                                                                }
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className=""
                                                                  data-icon="close-circle"
                                                                  fill="currentColor"
                                                                  focusable="false"
                                                                  height="1em"
                                                                  key="svg-close-circle"
                                                                  viewBox="64 64 896 896"
                                                                  width="1em"
                                                                >
                                                                  <path
                                                                    d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z"
                                                                    key="svg-close-circle-svg-0"
                                                                  />
                                                                </svg>
                                                              </IconReact>
                                                            </span>
                                                          </AntdIcon>
                                                        </ForwardRef(CloseCircleFilled)>
                                                      </span>
                                                    </div>
                                                  </div>
                                                </Trigger>
                                              </PickerTrigger>
                                            </InnerPicker>
                                          </Picker>
                                        </LocaleReceiver>
                                      </Picker>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Claim Sources"
                >
                  <Row
                    className="ant-form-item"
                    key="row"
                  >
                    <div
                      className="ant-row ant-form-item"
                      style={Object {}}
                    >
                      <FormItemLabel
                        label="Claim Sources"
                        prefixCls="ant-form"
                        requiredMark={true}
                      >
                        <Col
                          className="ant-form-item-label"
                          offset={2}
                          span={8}
                        >
                          <div
                            className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                            style={Object {}}
                          >
                            <label
                              className=""
                              title="Claim Sources"
                            >
                              Claim Sources
                            </label>
                          </div>
                        </Col>
                      </FormItemLabel>
                      <FormItemInput
                        errors={Array []}
                        label="Claim Sources"
                        onDomErrorVisibleChange={[Function]}
                        prefixCls="ant-form"
                        status=""
                        validateStatus=""
                      >
                        <Col
                          className="ant-form-item-control"
                          offset={2}
                          span={20}
                        >
                          <div
                            className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                            style={Object {}}
                          >
                            <div
                              className="ant-form-item-control-input"
                            >
                              <div
                                className="ant-form-item-control-input-content"
                              >
                                <FormList
                                  label="Claim sources"
                                  name="claim_sources"
                                >
                                  <List
                                    label="Claim sources"
                                    name="claim_sources"
                                  >
                                    <WrapperField
                                      name={Array []}
                                      shouldUpdate={[Function]}
                                    >
                                      <Field
                                        fieldContext={
                                          Object {
                                            "__INTERNAL__": Object {
                                              "itemRef": [Function],
                                              "name": "create-claim",
                                            },
                                            "getFieldError": [Function],
                                            "getFieldInstance": [Function],
                                            "getFieldValue": [Function],
                                            "getFieldsError": [Function],
                                            "getFieldsValue": [Function],
                                            "getInternalHooks": [Function],
                                            "isFieldTouched": [Function],
                                            "isFieldValidating": [Function],
                                            "isFieldsTouched": [Function],
                                            "isFieldsValidating": [Function],
                                            "prefixName": Array [
                                              "claim_sources",
                                            ],
                                            "resetFields": [Function],
                                            "scrollToField": [Function],
                                            "setFields": [Function],
                                            "setFieldsValue": [Function],
                                            "submit": [Function],
                                            "validateFields": [Function],
                                            "validateTrigger": "onChange",
                                          }
                                        }
                                        key="_"
                                        name={Array []}
                                        shouldUpdate={[Function]}
                                        trigger="onChange"
                                        valuePropName="value"
                                      >
                                        <FormItem>
                                          <Row
                                            className="ant-form-item"
                                            key="row"
                                          >
                                            <div
                                              className="ant-row ant-form-item"
                                              style={Object {}}
                                            >
                                              <FormItemLabel
                                                prefixCls="ant-form"
                                                requiredMark={true}
                                              />
                                              <FormItemInput
                                                errors={Array []}
                                                onDomErrorVisibleChange={[Function]}
                                                prefixCls="ant-form"
                                                status=""
                                                validateStatus=""
                                              >
                                                <Col
                                                  className="ant-form-item-control"
                                                >
                                                  <div
                                                    className="ant-col ant-form-item-control"
                                                    style={Object {}}
                                                  >
                                                    <div
                                                      className="ant-form-item-control-input"
                                                    >
                                                      <div
                                                        className="ant-form-item-control-input-content"
                                                      >
                                                        <Button
                                                          block={true}
                                                          ghost={false}
                                                          htmlType="button"
                                                          icon={<ForwardRef(PlusOutlined) />}
                                                          loading={false}
                                                          onClick={[Function]}
                                                          type="dashed"
                                                        >
                                                          <Wave>
                                                            <button
                                                              className="ant-btn ant-btn-dashed ant-btn-block"
                                                              onClick={[Function]}
                                                              type="button"
                                                            >
                                                              <ForwardRef(PlusOutlined)>
                                                                <AntdIcon
                                                                  icon={
                                                                    Object {
                                                                      "icon": Object {
                                                                        "attrs": Object {
                                                                          "focusable": "false",
                                                                          "viewBox": "64 64 896 896",
                                                                        },
                                                                        "children": Array [
                                                                          Object {
                                                                            "attrs": Object {},
                                                                            "children": Array [
                                                                              Object {
                                                                                "attrs": Object {},
                                                                                "tag": "style",
                                                                              },
                                                                            ],
                                                                            "tag": "defs",
                                                                          },
                                                                          Object {
                                                                            "attrs": Object {
                                                                              "d": "M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z",
                                                                            },
                                                                            "tag": "path",
                                                                          },
                                                                          Object {
                                                                            "attrs": Object {
                                                                              "d": "M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z",
                                                                            },
                                                                            "tag": "path",
                                                                          },
                                                                        ],
                                                                        "tag": "svg",
                                                                      },
                                                                      "name": "plus",
                                                                      "theme": "outlined",
                                                                    }
                                                                  }
                                                                >
                                                                  <span
                                                                    aria-label="plus"
                                                                    className="anticon anticon-plus"
                                                                    role="img"
                                                                  >
                                                                    <IconReact
                                                                      className=""
                                                                      icon={
                                                                        Object {
                                                                          "icon": Object {
                                                                            "attrs": Object {
                                                                              "focusable": "false",
                                                                              "viewBox": "64 64 896 896",
                                                                            },
                                                                            "children": Array [
                                                                              Object {
                                                                                "attrs": Object {},
                                                                                "children": Array [
                                                                                  Object {
                                                                                    "attrs": Object {},
                                                                                    "tag": "style",
                                                                                  },
                                                                                ],
                                                                                "tag": "defs",
                                                                              },
                                                                              Object {
                                                                                "attrs": Object {
                                                                                  "d": "M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z",
                                                                                },
                                                                                "tag": "path",
                                                                              },
                                                                              Object {
                                                                                "attrs": Object {
                                                                                  "d": "M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z",
                                                                                },
                                                                                "tag": "path",
                                                                              },
                                                                            ],
                                                                            "tag": "svg",
                                                                          },
                                                                          "name": "plus",
                                                                          "theme": "outlined",
                                                                        }
                                                                      }
                                                                    >
                                                                      <svg
                                                                        aria-hidden="true"
                                                                        className=""
                                                                        data-icon="plus"
                                                                        fill="currentColor"
                                                                        focusable="false"
                                                                        height="1em"
                                                                        key="svg-plus"
                                                                        viewBox="64 64 896 896"
                                                                        width="1em"
                                                                      >
                                                                        <defs
                                                                          key="svg-plus-svg-0"
                                                                        >
                                                                          <style
                                                                            key="svg-plus-svg-0-defs-0"
                                                                          />
                                                                        </defs>
                                                                        <path
                                                                          d="M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z"
                                                                          key="svg-plus-svg-1"
                                                                        />
                                                                        <path
                                                                          d="M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z"
                                                                          key="svg-plus-svg-2"
                                                                        />
                                                                      </svg>
                                                                    </IconReact>
                                                                  </span>
                                                                </AntdIcon>
                                                              </ForwardRef(PlusOutlined)>
                                                              <span
                                                                key=".0"
                                                              >
                                                                Add Claim sources
                                                              </span>
                                                            </button>
                                                          </Wave>
                                                        </Button>
                                                      </div>
                                                    </div>
                                                    <ErrorList
                                                      errors={Array []}
                                                      onDomErrorVisibleChange={[Function]}
                                                    >
                                                      <CSSMotion
                                                        motionAppear={true}
                                                        motionDeadline={500}
                                                        motionName="show-help"
                                                        onLeaveEnd={[Function]}
                                                        removeOnLeave={true}
                                                        visible={false}
                                                      >
                                                        <DomWrapper />
                                                      </CSSMotion>
                                                    </ErrorList>
                                                  </div>
                                                </Col>
                                              </FormItemInput>
                                            </div>
                                          </Row>
                                        </FormItem>
                                      </Field>
                                    </WrapperField>
                                  </List>
                                </FormList>
                              </div>
                            </div>
                            <ErrorList
                              errors={Array []}
                              onDomErrorVisibleChange={[Function]}
                            >
                              <CSSMotion
                                motionAppear={true}
                                motionDeadline={500}
                                motionName="show-help"
                                onLeaveEnd={[Function]}
                                removeOnLeave={true}
                                visible={false}
                              >
                                <DomWrapper />
                              </CSSMotion>
                            </ErrorList>
                          </div>
                        </Col>
                      </FormItemInput>
                    </div>
                  </Row>
                </FormItem>
                <FormItem
                  label="Review Sources"
                >
                  <Row
                    className="ant-form-item"
                    key="row"
                  >
                    <div
                      className="ant-row ant-form-item"
                      style={Object {}}
                    >
                      <FormItemLabel
                        label="Review Sources"
                        prefixCls="ant-form"
                        requiredMark={true}
                      >
                        <Col
                          className="ant-form-item-label"
                          offset={2}
                          span={8}
                        >
                          <div
                            className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                            style={Object {}}
                          >
                            <label
                              className=""
                              title="Review Sources"
                            >
                              Review Sources
                            </label>
                          </div>
                        </Col>
                      </FormItemLabel>
                      <FormItemInput
                        errors={Array []}
                        label="Review Sources"
                        onDomErrorVisibleChange={[Function]}
                        prefixCls="ant-form"
                        status=""
                        validateStatus=""
                      >
                        <Col
                          className="ant-form-item-control"
                          offset={2}
                          span={20}
                        >
                          <div
                            className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                            style={Object {}}
                          >
                            <div
                              className="ant-form-item-control-input"
                            >
                              <div
                                className="ant-form-item-control-input-content"
                              >
                                <FormList
                                  label="Review sources"
                                  name="review_sources"
                                >
                                  <List
                                    label="Review sources"
                                    name="review_sources"
                                  >
                                    <WrapperField
                                      name={Array []}
                                      shouldUpdate={[Function]}
                                    >
                                      <Field
                                        fieldContext={
                                          Object {
                                            "__INTERNAL__": Object {
                                              "itemRef": [Function],
                                              "name": "create-claim",
                                            },
                                            "getFieldError": [Function],
                                            "getFieldInstance": [Function],
                                            "getFieldValue": [Function],
                                            "getFieldsError": [Function],
                                            "getFieldsValue": [Function],
                                            "getInternalHooks": [Function],
                                            "isFieldTouched": [Function],
                                            "isFieldValidating": [Function],
                                            "isFieldsTouched": [Function],
                                            "isFieldsValidating": [Function],
                                            "prefixName": Array [
                                              "review_sources",
                                            ],
                                            "resetFields": [Function],
                                            "scrollToField": [Function],
                                            "setFields": [Function],
                                            "setFieldsValue": [Function],
                                            "submit": [Function],
                                            "validateFields": [Function],
                                            "validateTrigger": "onChange",
                                          }
                                        }
                                        key="_"
                                        name={Array []}
                                        shouldUpdate={[Function]}
                                        trigger="onChange"
                                        valuePropName="value"
                                      >
                                        <FormItem>
                                          <Row
                                            className="ant-form-item"
                                            key="row"
                                          >
                                            <div
                                              className="ant-row ant-form-item"
                                              style={Object {}}
                                            >
                                              <FormItemLabel
                                                prefixCls="ant-form"
                                                requiredMark={true}
                                              />
                                              <FormItemInput
                                                errors={Array []}
                                                onDomErrorVisibleChange={[Function]}
                                                prefixCls="ant-form"
                                                status=""
                                                validateStatus=""
                                              >
                                                <Col
                                                  className="ant-form-item-control"
                                                >
                                                  <div
                                                    className="ant-col ant-form-item-control"
                                                    style={Object {}}
                                                  >
                                                    <div
                                                      className="ant-form-item-control-input"
                                                    >
                                                      <div
                                                        className="ant-form-item-control-input-content"
                                                      >
                                                        <Button
                                                          block={true}
                                                          ghost={false}
                                                          htmlType="button"
                                                          icon={<ForwardRef(PlusOutlined) />}
                                                          loading={false}
                                                          onClick={[Function]}
                                                          type="dashed"
                                                        >
                                                          <Wave>
                                                            <button
                                                              className="ant-btn ant-btn-dashed ant-btn-block"
                                                              onClick={[Function]}
                                                              type="button"
                                                            >
                                                              <ForwardRef(PlusOutlined)>
                                                                <AntdIcon
                                                                  icon={
                                                                    Object {
                                                                      "icon": Object {
                                                                        "attrs": Object {
                                                                          "focusable": "false",
                                                                          "viewBox": "64 64 896 896",
                                                                        },
                                                                        "children": Array [
                                                                          Object {
                                                                            "attrs": Object {},
                                                                            "children": Array [
                                                                              Object {
                                                                                "attrs": Object {},
                                                                                "tag": "style",
                                                                              },
                                                                            ],
                                                                            "tag": "defs",
                                                                          },
                                                                          Object {
                                                                            "attrs": Object {
                                                                              "d": "M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z",
                                                                            },
                                                                            "tag": "path",
                                                                          },
                                                                          Object {
                                                                            "attrs": Object {
                                                                              "d": "M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z",
                                                                            },
                                                                            "tag": "path",
                                                                          },
                                                                        ],
                                                                        "tag": "svg",
                                                                      },
                                                                      "name": "plus",
                                                                      "theme": "outlined",
                                                                    }
                                                                  }
                                                                >
                                                                  <span
                                                                    aria-label="plus"
                                                                    className="anticon anticon-plus"
                                                                    role="img"
                                                                  >
                                                                    <IconReact
                                                                      className=""
                                                                      icon={
                                                                        Object {
                                                                          "icon": Object {
                                                                            "attrs": Object {
                                                                              "focusable": "false",
                                                                              "viewBox": "64 64 896 896",
                                                                            },
                                                                            "children": Array [
                                                                              Object {
                                                                                "attrs": Object {},
                                                                                "children": Array [
                                                                                  Object {
                                                                                    "attrs": Object {},
                                                                                    "tag": "style",
                                                                                  },
                                                                                ],
                                                                                "tag": "defs",
                                                                              },
                                                                              Object {
                                                                                "attrs": Object {
                                                                                  "d": "M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z",
                                                                                },
                                                                                "tag": "path",
                                                                              },
                                                                              Object {
                                                                                "attrs": Object {
                                                                                  "d": "M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z",
                                                                                },
                                                                                "tag": "path",
                                                                              },
                                                                            ],
                                                                            "tag": "svg",
                                                                          },
                                                                          "name": "plus",
                                                                          "theme": "outlined",
                                                                        }
                                                                      }
                                                                    >
                                                                      <svg
                                                                        aria-hidden="true"
                                                                        className=""
                                                                        data-icon="plus"
                                                                        fill="currentColor"
                                                                        focusable="false"
                                                                        height="1em"
                                                                        key="svg-plus"
                                                                        viewBox="64 64 896 896"
                                                                        width="1em"
                                                                      >
                                                                        <defs
                                                                          key="svg-plus-svg-0"
                                                                        >
                                                                          <style
                                                                            key="svg-plus-svg-0-defs-0"
                                                                          />
                                                                        </defs>
                                                                        <path
                                                                          d="M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z"
                                                                          key="svg-plus-svg-1"
                                                                        />
                                                                        <path
                                                                          d="M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z"
                                                                          key="svg-plus-svg-2"
                                                                        />
                                                                      </svg>
                                                                    </IconReact>
                                                                  </span>
                                                                </AntdIcon>
                                                              </ForwardRef(PlusOutlined)>
                                                              <span
                                                                key=".0"
                                                              >
                                                                Add Review sources
                                                              </span>
                                                            </button>
                                                          </Wave>
                                                        </Button>
                                                      </div>
                                                    </div>
                                                    <ErrorList
                                                      errors={Array []}
                                                      onDomErrorVisibleChange={[Function]}
                                                    >
                                                      <CSSMotion
                                                        motionAppear={true}
                                                        motionDeadline={500}
                                                        motionName="show-help"
                                                        onLeaveEnd={[Function]}
                                                        removeOnLeave={true}
                                                        visible={false}
                                                      >
                                                        <DomWrapper />
                                                      </CSSMotion>
                                                    </ErrorList>
                                                  </div>
                                                </Col>
                                              </FormItemInput>
                                            </div>
                                          </Row>
                                        </FormItem>
                                      </Field>
                                    </WrapperField>
                                  </List>
                                </FormList>
                              </div>
                            </div>
                            <ErrorList
                              errors={Array []}
                              onDomErrorVisibleChange={[Function]}
                            >
                              <CSSMotion
                                motionAppear={true}
                                motionDeadline={500}
                                motionName="show-help"
                                onLeaveEnd={[Function]}
                                removeOnLeave={true}
                                visible={false}
                              >
                                <DomWrapper />
                              </CSSMotion>
                            </ErrorList>
                          </div>
                        </Col>
                      </FormItemInput>
                    </div>
                  </Row>
                </FormItem>
              </div>
              <FormItem>
                <Row
                  className="ant-form-item"
                  key="row"
                >
                  <div
                    className="ant-row ant-form-item"
                    style={Object {}}
                  >
                    <FormItemLabel
                      prefixCls="ant-form"
                      requiredMark={true}
                    />
                    <FormItemInput
                      errors={Array []}
                      onDomErrorVisibleChange={[Function]}
                      prefixCls="ant-form"
                      status=""
                      validateStatus=""
                    >
                      <Col
                        className="ant-form-item-control"
                        offset={2}
                        span={20}
                      >
                        <div
                          className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                          style={Object {}}
                        >
                          <div
                            className="ant-form-item-control-input"
                          >
                            <div
                              className="ant-form-item-control-input-content"
                            >
                              <Button
                                block={false}
                                disabled={true}
                                ghost={false}
                                htmlType="button"
                                loading={false}
                                onClick={[Function]}
                              >
                                <Wave>
                                  <button
                                    className="ant-btn"
                                    disabled={true}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <LoadingIcon
                                      existIcon={false}
                                      loading={false}
                                      prefixCls="ant-btn"
                                    >
                                      <CSSMotion
                                        motionName="ant-btn-loading-icon-motion"
                                        onAppearActive={[Function]}
                                        onAppearStart={[Function]}
                                        onEnterActive={[Function]}
                                        onEnterStart={[Function]}
                                        onLeaveActive={[Function]}
                                        onLeaveStart={[Function]}
                                        removeOnLeave={true}
                                        visible={false}
                                      >
                                        <DomWrapper />
                                      </CSSMotion>
                                    </LoadingIcon>
                                    <span
                                      key=".0"
                                    >
                                      Back
                                    </span>
                                  </button>
                                </Wave>
                              </Button>
                              <Button
                                block={false}
                                ghost={false}
                                htmlType="button"
                                loading={false}
                                onClick={[Function]}
                              >
                                <Wave>
                                  <button
                                    className="ant-btn"
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <LoadingIcon
                                      existIcon={false}
                                      loading={false}
                                      prefixCls="ant-btn"
                                    >
                                      <CSSMotion
                                        motionName="ant-btn-loading-icon-motion"
                                        onAppearActive={[Function]}
                                        onAppearStart={[Function]}
                                        onEnterActive={[Function]}
                                        onEnterStart={[Function]}
                                        onLeaveActive={[Function]}
                                        onLeaveStart={[Function]}
                                        removeOnLeave={true}
                                        visible={false}
                                      >
                                        <DomWrapper />
                                      </CSSMotion>
                                    </LoadingIcon>
                                    <span
                                      key=".0"
                                    >
                                      Next
                                    </span>
                                  </button>
                                </Wave>
                              </Button>
                            </div>
                          </div>
                          <ErrorList
                            errors={Array []}
                            onDomErrorVisibleChange={[Function]}
                          >
                            <CSSMotion
                              motionAppear={true}
                              motionDeadline={500}
                              motionName="show-help"
                              onLeaveEnd={[Function]}
                              removeOnLeave={true}
                              visible={false}
                            >
                              <DomWrapper />
                            </CSSMotion>
                          </ErrorList>
                        </div>
                      </Col>
                    </FormItemInput>
                  </div>
                </Row>
              </FormItem>
            </form>
          </ForwardRef(Form)>
        </SizeContextProvider>
      </ForwardRef(InternalForm)>
    </div>
  </ClaimForm>
</Provider>
`;

exports[`Claims Create Form component snapshot testing should match component in all steps 2`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <ClaimForm
    data={
      Object {
        "checked_date": "2020-12-12T00:00:00.000Z",
        "claim_date": "2020-12-12T00:00:00.000Z",
        "claim_sources": "claim_sources",
        "claimant": 1,
        "description": Object {
          "blocks": Array [
            Object {
              "data": Object {
                "level": 2,
                "text": "Editor.js",
              },
              "type": "header",
            },
            Object {
              "data": Object {
                "text": "Hey. Meet the new Editor. On this page you can see it in action — try to edit this text.",
              },
              "type": "paragraph",
            },
          ],
          "time": 1595747741807,
          "version": "2.18.0",
        },
        "rating": 1,
        "review": "review",
        "review_sources": "review_sources",
        "review_tag_line": "review_tag_line",
        "slug": "slug",
        "title": "title",
      }
    }
  >
    <div>
      <Steps
        current={1}
        onChange={[Function]}
      >
        <Steps
          className=""
          current={1}
          direction="horizontal"
          iconPrefix="ant"
          icons={
            Object {
              "error": <ForwardRef(CloseOutlined)
                className="ant-steps-error-icon"
              />,
              "finish": <ForwardRef(CheckOutlined)
                className="ant-steps-finish-icon"
              />,
            }
          }
          initial={0}
          labelPlacement="horizontal"
          onChange={[Function]}
          prefixCls="ant-steps"
          progressDot={false}
          size=""
          status="process"
          stepIcon={[Function]}
          type="default"
        >
          <div
            className="ant-steps ant-steps-horizontal ant-steps-label-horizontal"
            style={Object {}}
          >
            <Step
              active={false}
              iconPrefix="ant"
              icons={
                Object {
                  "error": <ForwardRef(CloseOutlined)
                    className="ant-steps-error-icon"
                  />,
                  "finish": <ForwardRef(CheckOutlined)
                    className="ant-steps-finish-icon"
                  />,
                }
              }
              key="0"
              onStepClick={[Function]}
              prefixCls="ant-steps"
              progressDot={false}
              status="finish"
              stepIcon={[Function]}
              stepIndex={0}
              stepNumber="1"
              title="Basic"
              wrapperStyle={Object {}}
            >
              <div
                className="ant-steps-item ant-steps-item-finish"
                style={Object {}}
              >
                <div
                  className="ant-steps-item-container"
                  onClick={[Function]}
                  role="button"
                  tabIndex={0}
                >
                  <div
                    className="ant-steps-item-tail"
                  />
                  <div
                    className="ant-steps-item-icon"
                  >
                    <span
                      className="ant-steps-icon"
                    >
                      <ForwardRef(CheckOutlined)
                        className="ant-steps-finish-icon"
                      >
                        <AntdIcon
                          className="ant-steps-finish-icon"
                          icon={
                            Object {
                              "icon": Object {
                                "attrs": Object {
                                  "focusable": "false",
                                  "viewBox": "64 64 896 896",
                                },
                                "children": Array [
                                  Object {
                                    "attrs": Object {
                                      "d": "M912 190h-69.9c-9.8 0-19.1 4.5-25.1 12.2L404.7 724.5 207 474a32 32 0 00-25.1-12.2H112c-6.7 0-10.4 7.7-6.3 12.9l273.9 347c12.8 16.2 37.4 16.2 50.3 0l488.4-618.9c4.1-5.1.4-12.8-6.3-12.8z",
                                    },
                                    "tag": "path",
                                  },
                                ],
                                "tag": "svg",
                              },
                              "name": "check",
                              "theme": "outlined",
                            }
                          }
                        >
                          <span
                            aria-label="check"
                            className="anticon anticon-check ant-steps-finish-icon"
                            role="img"
                          >
                            <IconReact
                              className=""
                              icon={
                                Object {
                                  "icon": Object {
                                    "attrs": Object {
                                      "focusable": "false",
                                      "viewBox": "64 64 896 896",
                                    },
                                    "children": Array [
                                      Object {
                                        "attrs": Object {
                                          "d": "M912 190h-69.9c-9.8 0-19.1 4.5-25.1 12.2L404.7 724.5 207 474a32 32 0 00-25.1-12.2H112c-6.7 0-10.4 7.7-6.3 12.9l273.9 347c12.8 16.2 37.4 16.2 50.3 0l488.4-618.9c4.1-5.1.4-12.8-6.3-12.8z",
                                        },
                                        "tag": "path",
                                      },
                                    ],
                                    "tag": "svg",
                                  },
                                  "name": "check",
                                  "theme": "outlined",
                                }
                              }
                            >
                              <svg
                                aria-hidden="true"
                                className=""
                                data-icon="check"
                                fill="currentColor"
                                focusable="false"
                                height="1em"
                                key="svg-check"
                                viewBox="64 64 896 896"
                                width="1em"
                              >
                                <path
                                  d="M912 190h-69.9c-9.8 0-19.1 4.5-25.1 12.2L404.7 724.5 207 474a32 32 0 00-25.1-12.2H112c-6.7 0-10.4 7.7-6.3 12.9l273.9 347c12.8 16.2 37.4 16.2 50.3 0l488.4-618.9c4.1-5.1.4-12.8-6.3-12.8z"
                                  key="svg-check-svg-0"
                                />
                              </svg>
                            </IconReact>
                          </span>
                        </AntdIcon>
                      </ForwardRef(CheckOutlined)>
                    </span>
                  </div>
                  <div
                    className="ant-steps-item-content"
                  >
                    <div
                      className="ant-steps-item-title"
                    >
                      Basic
                    </div>
                  </div>
                </div>
              </div>
            </Step>
            <Step
              active={true}
              iconPrefix="ant"
              icons={
                Object {
                  "error": <ForwardRef(CloseOutlined)
                    className="ant-steps-error-icon"
                  />,
                  "finish": <ForwardRef(CheckOutlined)
                    className="ant-steps-finish-icon"
                  />,
                }
              }
              key="1"
              onStepClick={[Function]}
              prefixCls="ant-steps"
              progressDot={false}
              status="process"
              stepIcon={[Function]}
              stepIndex={1}
              stepNumber="2"
              title="Sources"
              wrapperStyle={Object {}}
            >
              <div
                className="ant-steps-item ant-steps-item-process ant-steps-item-active"
                style={Object {}}
              >
                <div
                  className="ant-steps-item-container"
                  onClick={[Function]}
                  role="button"
                  tabIndex={0}
                >
                  <div
                    className="ant-steps-item-tail"
                  />
                  <div
                    className="ant-steps-item-icon"
                  >
                    <span
                      className="ant-steps-icon"
                    >
                      2
                    </span>
                  </div>
                  <div
                    className="ant-steps-item-content"
                  >
                    <div
                      className="ant-steps-item-title"
                    >
                      Sources
                    </div>
                  </div>
                </div>
              </div>
            </Step>
          </div>
        </Steps>
      </Steps>
      <ForwardRef(InternalForm)
        form={
          Object {
            "__INTERNAL__": Object {
              "itemRef": [Function],
              "name": "create-claim",
            },
            "getFieldError": [Function],
            "getFieldInstance": [Function],
            "getFieldValue": [Function],
            "getFieldsError": [Function],
            "getFieldsValue": [Function],
            "getInternalHooks": [Function],
            "isFieldTouched": [Function],
            "isFieldValidating": [Function],
            "isFieldsTouched": [Function],
            "isFieldsValidating": [Function],
            "resetFields": [Function],
            "scrollToField": [Function],
            "setFields": [Function],
            "setFieldsValue": [Function],
            "submit": [Function],
            "validateFields": [Function],
          }
        }
        initialValues={
          Object {
            "checked_date": "2020-12-12T00:00:00.000Z",
            "claim_date": "2020-12-12T00:00:00.000Z",
            "claim_sources": "claim_sources",
            "claimant": 1,
            "description": Object {
              "blocks": Array [
                Object {
                  "data": Object {
                    "level": 2,
                    "text": "Editor.js",
                  },
                  "type": "header",
                },
                Object {
                  "data": Object {
                    "text": "Hey. Meet the new Editor. On this page you can see it in action — try to edit this text.",
                  },
                  "type": "paragraph",
                },
              ],
              "time": 1595747741807,
              "version": "2.18.0",
            },
            "rating": 1,
            "review": "review",
            "review_sources": "review_sources",
            "review_tag_line": "review_tag_line",
            "slug": "slug",
            "title": "title",
          }
        }
        labelCol={
          Object {
            "offset": 2,
            "span": 8,
          }
        }
        layout="vertical"
        name="create-claim"
        onFinish={[Function]}
        onFinishFailed={[Function]}
        onValuesChange={[Function]}
        scrollToFirstError={true}
        style={
          Object {
            "paddingTop": "24px",
          }
        }
        wrapperCol={
          Object {
            "offset": 2,
            "span": 20,
          }
        }
      >
        <SizeContextProvider>
          <ForwardRef(Form)
            className="ant-form ant-form-vertical"
            form={
              Object {
                "__INTERNAL__": Object {
                  "itemRef": [Function],
                  "name": "create-claim",
                },
                "getFieldError": [Function],
                "getFieldInstance": [Function],
                "getFieldValue": [Function],
                "getFieldsError": [Function],
                "getFieldsValue": [Function],
                "getInternalHooks": [Function],
                "isFieldTouched": [Function],
                "isFieldValidating": [Function],
                "isFieldsTouched": [Function],
                "isFieldsValidating": [Function],
                "resetFields": [Function],
                "scrollToField": [Function],
                "setFields": [Function],
                "setFieldsValue": [Function],
                "submit": [Function],
                "validateFields": [Function],
              }
            }
            id="create-claim"
            initialValues={
              Object {
                "checked_date": "2020-12-12T00:00:00.000Z",
                "claim_date": "2020-12-12T00:00:00.000Z",
                "claim_sources": "claim_sources",
                "claimant": 1,
                "description": Object {
                  "blocks": Array [
                    Object {
                      "data": Object {
                        "level": 2,
                        "text": "Editor.js",
                      },
                      "type": "header",
                    },
                    Object {
                      "data": Object {
                        "text": "Hey. Meet the new Editor. On this page you can see it in action — try to edit this text.",
                      },
                      "type": "paragraph",
                    },
                  ],
                  "time": 1595747741807,
                  "version": "2.18.0",
                },
                "rating": 1,
                "review": "review",
                "review_sources": "review_sources",
                "review_tag_line": "review_tag_line",
                "slug": "slug",
                "title": "title",
              }
            }
            name="create-claim"
            onFinish={[Function]}
            onFinishFailed={[Function]}
            onValuesChange={[Function]}
            style={
              Object {
                "paddingTop": "24px",
              }
            }
          >
            <form
              className="ant-form ant-form-vertical"
              id="create-claim"
              onSubmit={[Function]}
              style={
                Object {
                  "paddingTop": "24px",
                }
              }
            >
              <div
                style={
                  Object {
                    "display": "none",
                  }
                }
              >
                <FormItem
                  label="Claim"
                  name="claim"
                  rules={
                    Array [
                      Object {
                        "message": "Please input the Claim!",
                        "required": true,
                      },
                      Object {
                        "message": "Claim must be minimum 3 characters.",
                        "min": 3,
                      },
                      Object {
                        "max": 5000,
                        "message": "Claim must be maximum 5000 characters.",
                      },
                    ]
                  }
                >
                  <WrapperField
                    label="Claim"
                    messageVariables={
                      Object {
                        "label": "Claim",
                      }
                    }
                    name="claim"
                    onReset={[Function]}
                    rules={
                      Array [
                        Object {
                          "message": "Please input the Claim!",
                          "required": true,
                        },
                        Object {
                          "message": "Claim must be minimum 3 characters.",
                          "min": 3,
                        },
                        Object {
                          "max": 5000,
                          "message": "Claim must be maximum 5000 characters.",
                        },
                      ]
                    }
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_claim"
                      label="Claim"
                      messageVariables={
                        Object {
                          "label": "Claim",
                        }
                      }
                      name={
                        Array [
                          "claim",
                        ]
                      }
                      onReset={[Function]}
                      rules={
                        Array [
                          Object {
                            "message": "Please input the Claim!",
                            "required": true,
                          },
                          Object {
                            "message": "Claim must be minimum 3 characters.",
                            "min": 3,
                          },
                          Object {
                            "max": 5000,
                            "message": "Claim must be maximum 5000 characters.",
                          },
                        ]
                      }
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_claim"
                            label="Claim"
                            name="claim"
                            prefixCls="ant-form"
                            required={true}
                            requiredMark={true}
                            rules={
                              Array [
                                Object {
                                  "message": "Please input the Claim!",
                                  "required": true,
                                },
                                Object {
                                  "message": "Claim must be minimum 3 characters.",
                                  "min": 3,
                                },
                                Object {
                                  "max": 5000,
                                  "message": "Claim must be maximum 5000 characters.",
                                },
                              ]
                            }
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className="ant-form-item-required"
                                  htmlFor="create-claim_claim"
                                  title="Claim"
                                >
                                  Claim
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Claim"
                            name={
                              Array [
                                "claim",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            rules={
                              Array [
                                Object {
                                  "message": "Please input the Claim!",
                                  "required": true,
                                },
                                Object {
                                  "message": "Claim must be minimum 3 characters.",
                                  "min": 3,
                                },
                                Object {
                                  "max": 5000,
                                  "message": "Claim must be maximum 5000 characters.",
                                },
                              ]
                            }
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={2}
                                    >
                                      <TextArea
                                        id="create-claim_claim"
                                        onChange={[Function]}
                                        placeholder="Enter claim...."
                                        rows={6}
                                      >
                                        <ClearableLabeledInput
                                          bordered={true}
                                          element={
                                            <TextArea
                                              className=""
                                              id="create-claim_claim"
                                              onChange={[Function]}
                                              placeholder="Enter claim...."
                                              prefixCls="ant-input"
                                              rows={6}
                                            />
                                          }
                                          handleReset={[Function]}
                                          id="create-claim_claim"
                                          inputType="text"
                                          onChange={[Function]}
                                          placeholder="Enter claim...."
                                          prefixCls="ant-input"
                                          rows={6}
                                          triggerFocus={[Function]}
                                          value=""
                                        >
                                          <TextArea
                                            className=""
                                            id="create-claim_claim"
                                            onChange={[Function]}
                                            placeholder="Enter claim...."
                                            prefixCls="ant-input"
                                            rows={6}
                                            value=""
                                          >
                                            <ResizableTextArea
                                              className=""
                                              id="create-claim_claim"
                                              onChange={[Function]}
                                              onKeyDown={[Function]}
                                              placeholder="Enter claim...."
                                              prefixCls="ant-input"
                                              rows={6}
                                              value=""
                                            >
                                              <ResizeObserver
                                                disabled={true}
                                                onResize={[Function]}
                                              >
                                                <textarea
                                                  className="ant-input"
                                                  id="create-claim_claim"
                                                  onChange={[Function]}
                                                  onKeyDown={[Function]}
                                                  placeholder="Enter claim...."
                                                  rows={6}
                                                  style={Object {}}
                                                  value=""
                                                />
                                              </ResizeObserver>
                                            </ResizableTextArea>
                                          </TextArea>
                                        </ClearableLabeledInput>
                                      </TextArea>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Slug"
                  name="slug"
                  rules={
                    Array [
                      Object {
                        "message": "Please input the slug!",
                        "required": true,
                      },
                      Object {
                        "message": "Please enter valid slug!",
                        "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                      },
                      Object {
                        "max": 150,
                        "message": "Slug must be maximum 150 characters.",
                      },
                    ]
                  }
                >
                  <WrapperField
                    label="Slug"
                    messageVariables={
                      Object {
                        "label": "Slug",
                      }
                    }
                    name="slug"
                    onReset={[Function]}
                    rules={
                      Array [
                        Object {
                          "message": "Please input the slug!",
                          "required": true,
                        },
                        Object {
                          "message": "Please enter valid slug!",
                          "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                        },
                        Object {
                          "max": 150,
                          "message": "Slug must be maximum 150 characters.",
                        },
                      ]
                    }
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_slug"
                      label="Slug"
                      messageVariables={
                        Object {
                          "label": "Slug",
                        }
                      }
                      name={
                        Array [
                          "slug",
                        ]
                      }
                      onReset={[Function]}
                      rules={
                        Array [
                          Object {
                            "message": "Please input the slug!",
                            "required": true,
                          },
                          Object {
                            "message": "Please enter valid slug!",
                            "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                          },
                          Object {
                            "max": 150,
                            "message": "Slug must be maximum 150 characters.",
                          },
                        ]
                      }
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_slug"
                            label="Slug"
                            name="slug"
                            prefixCls="ant-form"
                            required={true}
                            requiredMark={true}
                            rules={
                              Array [
                                Object {
                                  "message": "Please input the slug!",
                                  "required": true,
                                },
                                Object {
                                  "message": "Please enter valid slug!",
                                  "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                                },
                                Object {
                                  "max": 150,
                                  "message": "Slug must be maximum 150 characters.",
                                },
                              ]
                            }
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className="ant-form-item-required"
                                  htmlFor="create-claim_slug"
                                  title="Slug"
                                >
                                  Slug
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Slug"
                            name={
                              Array [
                                "slug",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            rules={
                              Array [
                                Object {
                                  "message": "Please input the slug!",
                                  "required": true,
                                },
                                Object {
                                  "message": "Please enter valid slug!",
                                  "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                                },
                                Object {
                                  "max": 150,
                                  "message": "Slug must be maximum 150 characters.",
                                },
                              ]
                            }
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={2}
                                      value="slug"
                                    >
                                      <Input
                                        id="create-claim_slug"
                                        onChange={[Function]}
                                        type="text"
                                        value="slug"
                                      >
                                        <ClearableLabeledInput
                                          bordered={true}
                                          element={
                                            <input
                                              className="ant-input"
                                              id="create-claim_slug"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              onKeyDown={[Function]}
                                              type="text"
                                              value="slug"
                                            />
                                          }
                                          focused={false}
                                          handleReset={[Function]}
                                          id="create-claim_slug"
                                          inputType="input"
                                          onChange={[Function]}
                                          prefixCls="ant-input"
                                          triggerFocus={[Function]}
                                          type="text"
                                          value="slug"
                                        >
                                          <input
                                            className="ant-input"
                                            id="create-claim_slug"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            onKeyDown={[Function]}
                                            type="text"
                                            value="slug"
                                          />
                                        </ClearableLabeledInput>
                                      </Input>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Fact"
                  name="fact"
                >
                  <WrapperField
                    label="Fact"
                    messageVariables={
                      Object {
                        "label": "Fact",
                      }
                    }
                    name="fact"
                    onReset={[Function]}
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_fact"
                      label="Fact"
                      messageVariables={
                        Object {
                          "label": "Fact",
                        }
                      }
                      name={
                        Array [
                          "fact",
                        ]
                      }
                      onReset={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_fact"
                            label="Fact"
                            name="fact"
                            prefixCls="ant-form"
                            required={false}
                            requiredMark={true}
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className=""
                                  htmlFor="create-claim_fact"
                                  title="Fact"
                                >
                                  Fact
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Fact"
                            name={
                              Array [
                                "fact",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={2}
                                    >
                                      <TextArea
                                        id="create-claim_fact"
                                        onChange={[Function]}
                                        placeholder="Enter Fact ..."
                                        rows={6}
                                      >
                                        <ClearableLabeledInput
                                          bordered={true}
                                          element={
                                            <TextArea
                                              className=""
                                              id="create-claim_fact"
                                              onChange={[Function]}
                                              placeholder="Enter Fact ..."
                                              prefixCls="ant-input"
                                              rows={6}
                                            />
                                          }
                                          handleReset={[Function]}
                                          id="create-claim_fact"
                                          inputType="text"
                                          onChange={[Function]}
                                          placeholder="Enter Fact ..."
                                          prefixCls="ant-input"
                                          rows={6}
                                          triggerFocus={[Function]}
                                          value=""
                                        >
                                          <TextArea
                                            className=""
                                            id="create-claim_fact"
                                            onChange={[Function]}
                                            placeholder="Enter Fact ..."
                                            prefixCls="ant-input"
                                            rows={6}
                                            value=""
                                          >
                                            <ResizableTextArea
                                              className=""
                                              id="create-claim_fact"
                                              onChange={[Function]}
                                              onKeyDown={[Function]}
                                              placeholder="Enter Fact ..."
                                              prefixCls="ant-input"
                                              rows={6}
                                              value=""
                                            >
                                              <ResizeObserver
                                                disabled={true}
                                                onResize={[Function]}
                                              >
                                                <textarea
                                                  className="ant-input"
                                                  id="create-claim_fact"
                                                  onChange={[Function]}
                                                  onKeyDown={[Function]}
                                                  placeholder="Enter Fact ..."
                                                  rows={6}
                                                  style={Object {}}
                                                  value=""
                                                />
                                              </ResizeObserver>
                                            </ResizableTextArea>
                                          </TextArea>
                                        </ClearableLabeledInput>
                                      </TextArea>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Claimant"
                  name="claimant"
                  rules={
                    Array [
                      Object {
                        "message": "Please add claimant!",
                        "required": true,
                      },
                    ]
                  }
                >
                  <WrapperField
                    label="Claimant"
                    messageVariables={
                      Object {
                        "label": "Claimant",
                      }
                    }
                    name="claimant"
                    onReset={[Function]}
                    rules={
                      Array [
                        Object {
                          "message": "Please add claimant!",
                          "required": true,
                        },
                      ]
                    }
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_claimant"
                      label="Claimant"
                      messageVariables={
                        Object {
                          "label": "Claimant",
                        }
                      }
                      name={
                        Array [
                          "claimant",
                        ]
                      }
                      onReset={[Function]}
                      rules={
                        Array [
                          Object {
                            "message": "Please add claimant!",
                            "required": true,
                          },
                        ]
                      }
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_claimant"
                            label="Claimant"
                            name="claimant"
                            prefixCls="ant-form"
                            required={true}
                            requiredMark={true}
                            rules={
                              Array [
                                Object {
                                  "message": "Please add claimant!",
                                  "required": true,
                                },
                              ]
                            }
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className="ant-form-item-required"
                                  htmlFor="create-claim_claimant"
                                  title="Claimant"
                                >
                                  Claimant
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Claimant"
                            name={
                              Array [
                                "claimant",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            rules={
                              Array [
                                Object {
                                  "message": "Please add claimant!",
                                  "required": true,
                                },
                              ]
                            }
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={2}
                                      value={1}
                                    >
                                      <Selector
                                        action="Claimants"
                                        id="create-claim_claimant"
                                        onChange={[Function]}
                                        value={1}
                                      >
                                        <ForwardRef(InternalSelect)
                                          allowClear={true}
                                          bordered={true}
                                          defaultValue={
                                            Array [
                                              1,
                                            ]
                                          }
                                          filterOption={[Function]}
                                          getPopupContainer={[Function]}
                                          listHeight={128}
                                          loading={false}
                                          notFoundContent={null}
                                          onChange={[Function]}
                                          onPopupScroll={[Function]}
                                          onSearch={[Function]}
                                          placeholder="Select claimants"
                                        >
                                          <Select
                                            allowClear={true}
                                            className=""
                                            clearIcon={<ForwardRef(CloseCircleFilled) />}
                                            defaultValue={
                                              Array [
                                                1,
                                              ]
                                            }
                                            dropdownClassName=""
                                            filterOption={[Function]}
                                            getPopupContainer={[Function]}
                                            inputIcon={[Function]}
                                            listHeight={128}
                                            listItemHeight={24}
                                            loading={false}
                                            menuItemSelectedIcon={null}
                                            notFoundContent={null}
                                            onChange={[Function]}
                                            onPopupScroll={[Function]}
                                            onSearch={[Function]}
                                            placeholder="Select claimants"
                                            prefixCls="ant-select"
                                            removeIcon={<ForwardRef(CloseOutlined) />}
                                            transitionName="slide-up"
                                          >
                                            <ForwardRef(Select)
                                              allowClear={true}
                                              className=""
                                              clearIcon={<ForwardRef(CloseCircleFilled) />}
                                              defaultValue={
                                                Array [
                                                  1,
                                                ]
                                              }
                                              dropdownClassName=""
                                              filterOption={[Function]}
                                              getPopupContainer={[Function]}
                                              inputIcon={[Function]}
                                              listHeight={128}
                                              listItemHeight={24}
                                              loading={false}
                                              menuItemSelectedIcon={null}
                                              notFoundContent={null}
                                              onChange={[Function]}
                                              onPopupScroll={[Function]}
                                              onSearch={[Function]}
                                              placeholder="Select claimants"
                                              prefixCls="ant-select"
                                              removeIcon={<ForwardRef(CloseOutlined) />}
                                              transitionName="slide-up"
                                            >
                                              <div
                                                className="ant-select ant-select-single ant-select-allow-clear ant-select-show-arrow"
                                                onBlur={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                onKeyUp={[Function]}
                                                onMouseDown={[Function]}
                                              >
                                                <SelectTrigger
                                                  containerWidth={null}
                                                  dropdownClassName=""
                                                  empty={true}
                                                  getPopupContainer={[Function]}
                                                  getTriggerDOMNode={[Function]}
                                                  popupElement={
                                                    <ForwardRef(OptionList)
                                                      childrenAsData={true}
                                                      defaultActiveFirstOption={true}
                                                      flattenOptions={Array []}
                                                      height={128}
                                                      id="rc_select_TEST_OR_SSR"
                                                      itemHeight={24}
                                                      menuItemSelectedIcon={null}
                                                      multiple={false}
                                                      notFoundContent={null}
                                                      onActiveValue={[Function]}
                                                      onMouseEnter={[Function]}
                                                      onScroll={[Function]}
                                                      onSelect={[Function]}
                                                      onToggleOpen={[Function]}
                                                      options={Array []}
                                                      prefixCls="ant-select"
                                                      searchValue=""
                                                      values={
                                                        Set {
                                                          1,
                                                        }
                                                      }
                                                      virtual={true}
                                                    />
                                                  }
                                                  prefixCls="ant-select"
                                                  transitionName="slide-up"
                                                  visible={false}
                                                >
                                                  <Trigger
                                                    action={Array []}
                                                    afterPopupVisibleChange={[Function]}
                                                    autoDestroy={false}
                                                    blurDelay={0.15}
                                                    builtinPlacements={
                                                      Object {
                                                        "bottomLeft": Object {
                                                          "offset": Array [
                                                            0,
                                                            4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "tl",
                                                            "bl",
                                                          ],
                                                        },
                                                        "bottomRight": Object {
                                                          "offset": Array [
                                                            0,
                                                            4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "tr",
                                                            "br",
                                                          ],
                                                        },
                                                        "topLeft": Object {
                                                          "offset": Array [
                                                            0,
                                                            -4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "bl",
                                                            "tl",
                                                          ],
                                                        },
                                                        "topRight": Object {
                                                          "offset": Array [
                                                            0,
                                                            -4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "br",
                                                            "tr",
                                                          ],
                                                        },
                                                      }
                                                    }
                                                    defaultPopupVisible={false}
                                                    destroyPopupOnHide={false}
                                                    focusDelay={0}
                                                    getDocument={[Function]}
                                                    getPopupClassNameFromAlign={[Function]}
                                                    getPopupContainer={[Function]}
                                                    getTriggerDOMNode={[Function]}
                                                    hideAction={Array []}
                                                    mask={false}
                                                    maskClosable={true}
                                                    mouseEnterDelay={0}
                                                    mouseLeaveDelay={0.1}
                                                    onPopupAlign={[Function]}
                                                    onPopupVisibleChange={[Function]}
                                                    popup={
                                                      <div>
                                                        <ForwardRef(OptionList)
                                                          childrenAsData={true}
                                                          defaultActiveFirstOption={true}
                                                          flattenOptions={Array []}
                                                          height={128}
                                                          id="rc_select_TEST_OR_SSR"
                                                          itemHeight={24}
                                                          menuItemSelectedIcon={null}
                                                          multiple={false}
                                                          notFoundContent={null}
                                                          onActiveValue={[Function]}
                                                          onMouseEnter={[Function]}
                                                          onScroll={[Function]}
                                                          onSelect={[Function]}
                                                          onToggleOpen={[Function]}
                                                          options={Array []}
                                                          prefixCls="ant-select"
                                                          searchValue=""
                                                          values={
                                                            Set {
                                                              1,
                                                            }
                                                          }
                                                          virtual={true}
                                                        />
                                                      </div>
                                                    }
                                                    popupAlign={Object {}}
                                                    popupClassName="ant-select-dropdown-empty"
                                                    popupPlacement="bottomLeft"
                                                    popupStyle={
                                                      Object {
                                                        "minWidth": null,
                                                        "width": null,
                                                      }
                                                    }
                                                    popupTransitionName="slide-up"
                                                    popupVisible={false}
                                                    prefixCls="ant-select-dropdown"
                                                    showAction={Array []}
                                                  >
                                                    <Selector
                                                      accessibilityIndex={0}
                                                      activeValue={null}
                                                      allowClear={true}
                                                      className=""
                                                      clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                      defaultValue={
                                                        Array [
                                                          1,
                                                        ]
                                                      }
                                                      domRef={
                                                        Object {
                                                          "current": <div
                                                            class="ant-select-selector"
                                                          >
                                                            <span
                                                              class="ant-select-selection-search"
                                                            >
                                                              <input
                                                                aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                aria-autocomplete="list"
                                                                aria-controls="rc_select_TEST_OR_SSR_list"
                                                                aria-haspopup="listbox"
                                                                aria-owns="rc_select_TEST_OR_SSR_list"
                                                                autocomplete="off"
                                                                class="ant-select-selection-search-input"
                                                                id="rc_select_TEST_OR_SSR"
                                                                readonly=""
                                                                role="combobox"
                                                                style="opacity: 0;"
                                                                type="search"
                                                                unselectable="on"
                                                                value=""
                                                              />
                                                            </span>
                                                            <span
                                                              class="ant-select-selection-item"
                                                              title="1"
                                                            >
                                                              1
                                                            </span>
                                                          </div>,
                                                        }
                                                      }
                                                      dropdownClassName=""
                                                      filterOption={[Function]}
                                                      getPopupContainer={[Function]}
                                                      id="rc_select_TEST_OR_SSR"
                                                      inputElement={null}
                                                      inputIcon={[Function]}
                                                      key="trigger"
                                                      listHeight={128}
                                                      listItemHeight={24}
                                                      loading={false}
                                                      menuItemSelectedIcon={null}
                                                      multiple={false}
                                                      notFoundContent={null}
                                                      onChange={[Function]}
                                                      onPopupScroll={[Function]}
                                                      onSearch={[Function]}
                                                      onSearchSubmit={[Function]}
                                                      onSelect={[Function]}
                                                      onToggleOpen={[Function]}
                                                      placeholder="Select claimants"
                                                      prefixCls="ant-select"
                                                      removeIcon={<ForwardRef(CloseOutlined) />}
                                                      searchValue=""
                                                      showSearch={false}
                                                      tokenWithEnter={false}
                                                      transitionName="slide-up"
                                                      values={
                                                        Array [
                                                          Object {
                                                            "disabled": undefined,
                                                            "key": 1,
                                                            "label": 1,
                                                            "value": 1,
                                                          },
                                                        ]
                                                      }
                                                    >
                                                      <div
                                                        className="ant-select-selector"
                                                        onClick={[Function]}
                                                        onMouseDown={[Function]}
                                                      >
                                                        <SingleSelector
                                                          accessibilityIndex={0}
                                                          activeValue={null}
                                                          allowClear={true}
                                                          className=""
                                                          clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                          defaultValue={
                                                            Array [
                                                              1,
                                                            ]
                                                          }
                                                          domRef={
                                                            Object {
                                                              "current": <div
                                                                class="ant-select-selector"
                                                              >
                                                                <span
                                                                  class="ant-select-selection-search"
                                                                >
                                                                  <input
                                                                    aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                    aria-autocomplete="list"
                                                                    aria-controls="rc_select_TEST_OR_SSR_list"
                                                                    aria-haspopup="listbox"
                                                                    aria-owns="rc_select_TEST_OR_SSR_list"
                                                                    autocomplete="off"
                                                                    class="ant-select-selection-search-input"
                                                                    id="rc_select_TEST_OR_SSR"
                                                                    readonly=""
                                                                    role="combobox"
                                                                    style="opacity: 0;"
                                                                    type="search"
                                                                    unselectable="on"
                                                                    value=""
                                                                  />
                                                                </span>
                                                                <span
                                                                  class="ant-select-selection-item"
                                                                  title="1"
                                                                >
                                                                  1
                                                                </span>
                                                              </div>,
                                                            }
                                                          }
                                                          dropdownClassName=""
                                                          filterOption={[Function]}
                                                          getPopupContainer={[Function]}
                                                          id="rc_select_TEST_OR_SSR"
                                                          inputElement={null}
                                                          inputIcon={[Function]}
                                                          inputRef={
                                                            Object {
                                                              "current": <input
                                                                aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                aria-autocomplete="list"
                                                                aria-controls="rc_select_TEST_OR_SSR_list"
                                                                aria-haspopup="listbox"
                                                                aria-owns="rc_select_TEST_OR_SSR_list"
                                                                autocomplete="off"
                                                                class="ant-select-selection-search-input"
                                                                id="rc_select_TEST_OR_SSR"
                                                                readonly=""
                                                                role="combobox"
                                                                style="opacity: 0;"
                                                                type="search"
                                                                unselectable="on"
                                                                value=""
                                                              />,
                                                            }
                                                          }
                                                          listHeight={128}
                                                          listItemHeight={24}
                                                          loading={false}
                                                          menuItemSelectedIcon={null}
                                                          multiple={false}
                                                          notFoundContent={null}
                                                          onChange={[Function]}
                                                          onInputChange={[Function]}
                                                          onInputCompositionEnd={[Function]}
                                                          onInputCompositionStart={[Function]}
                                                          onInputKeyDown={[Function]}
                                                          onInputMouseDown={[Function]}
                                                          onInputPaste={[Function]}
                                                          onPopupScroll={[Function]}
                                                          onSearch={[Function]}
                                                          onSearchSubmit={[Function]}
                                                          onSelect={[Function]}
                                                          onToggleOpen={[Function]}
                                                          placeholder="Select claimants"
                                                          prefixCls="ant-select"
                                                          removeIcon={<ForwardRef(CloseOutlined) />}
                                                          searchValue=""
                                                          showSearch={false}
                                                          tokenWithEnter={false}
                                                          transitionName="slide-up"
                                                          values={
                                                            Array [
                                                              Object {
                                                                "disabled": undefined,
                                                                "key": 1,
                                                                "label": 1,
                                                                "value": 1,
                                                              },
                                                            ]
                                                          }
                                                        >
                                                          <span
                                                            className="ant-select-selection-search"
                                                          >
                                                            <Input
                                                              accessibilityIndex={0}
                                                              attrs={Object {}}
                                                              editable={false}
                                                              id="rc_select_TEST_OR_SSR"
                                                              inputElement={null}
                                                              onChange={[Function]}
                                                              onCompositionEnd={[Function]}
                                                              onCompositionStart={[Function]}
                                                              onKeyDown={[Function]}
                                                              onMouseDown={[Function]}
                                                              onPaste={[Function]}
                                                              prefixCls="ant-select"
                                                              value=""
                                                            >
                                                              <input
                                                                aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                aria-autocomplete="list"
                                                                aria-controls="rc_select_TEST_OR_SSR_list"
                                                                aria-haspopup="listbox"
                                                                aria-owns="rc_select_TEST_OR_SSR_list"
                                                                autoComplete="off"
                                                                className="ant-select-selection-search-input"
                                                                id="rc_select_TEST_OR_SSR"
                                                                onChange={[Function]}
                                                                onCompositionEnd={[Function]}
                                                                onCompositionStart={[Function]}
                                                                onKeyDown={[Function]}
                                                                onMouseDown={[Function]}
                                                                onPaste={[Function]}
                                                                readOnly={true}
                                                                role="combobox"
                                                                style={
                                                                  Object {
                                                                    "opacity": 0,
                                                                  }
                                                                }
                                                                type="search"
                                                                unselectable="on"
                                                                value=""
                                                              />
                                                            </Input>
                                                          </span>
                                                          <span
                                                            className="ant-select-selection-item"
                                                            title="1"
                                                          >
                                                            1
                                                          </span>
                                                        </SingleSelector>
                                                      </div>
                                                    </Selector>
                                                  </Trigger>
                                                </SelectTrigger>
                                                <TransBtn
                                                  className="ant-select-arrow"
                                                  customizeIcon={[Function]}
                                                  customizeIconProps={
                                                    Object {
                                                      "focused": false,
                                                      "loading": false,
                                                      "open": undefined,
                                                      "searchValue": "",
                                                      "showSearch": false,
                                                    }
                                                  }
                                                >
                                                  <span
                                                    aria-hidden={true}
                                                    className="ant-select-arrow"
                                                    onMouseDown={[Function]}
                                                    style={
                                                      Object {
                                                        "WebkitUserSelect": "none",
                                                        "userSelect": "none",
                                                      }
                                                    }
                                                    unselectable="on"
                                                  >
                                                    <ForwardRef(DownOutlined)
                                                      className="ant-select-suffix"
                                                    >
                                                      <AntdIcon
                                                        className="ant-select-suffix"
                                                        icon={
                                                          Object {
                                                            "icon": Object {
                                                              "attrs": Object {
                                                                "focusable": "false",
                                                                "viewBox": "64 64 896 896",
                                                              },
                                                              "children": Array [
                                                                Object {
                                                                  "attrs": Object {
                                                                    "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                                                  },
                                                                  "tag": "path",
                                                                },
                                                              ],
                                                              "tag": "svg",
                                                            },
                                                            "name": "down",
                                                            "theme": "outlined",
                                                          }
                                                        }
                                                      >
                                                        <span
                                                          aria-label="down"
                                                          className="anticon anticon-down ant-select-suffix"
                                                          role="img"
                                                        >
                                                          <IconReact
                                                            className=""
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "down",
                                                                "theme": "outlined",
                                                              }
                                                            }
                                                          >
                                                            <svg
                                                              aria-hidden="true"
                                                              className=""
                                                              data-icon="down"
                                                              fill="currentColor"
                                                              focusable="false"
                                                              height="1em"
                                                              key="svg-down"
                                                              viewBox="64 64 896 896"
                                                              width="1em"
                                                            >
                                                              <path
                                                                d="M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z"
                                                                key="svg-down-svg-0"
                                                              />
                                                            </svg>
                                                          </IconReact>
                                                        </span>
                                                      </AntdIcon>
                                                    </ForwardRef(DownOutlined)>
                                                  </span>
                                                </TransBtn>
                                                <TransBtn
                                                  className="ant-select-clear"
                                                  customizeIcon={<ForwardRef(CloseCircleFilled) />}
                                                  onMouseDown={[Function]}
                                                >
                                                  <span
                                                    aria-hidden={true}
                                                    className="ant-select-clear"
                                                    onMouseDown={[Function]}
                                                    style={
                                                      Object {
                                                        "WebkitUserSelect": "none",
                                                        "userSelect": "none",
                                                      }
                                                    }
                                                    unselectable="on"
                                                  >
                                                    <ForwardRef(CloseCircleFilled)>
                                                      <AntdIcon
                                                        icon={
                                                          Object {
                                                            "icon": Object {
                                                              "attrs": Object {
                                                                "focusable": "false",
                                                                "viewBox": "64 64 896 896",
                                                              },
                                                              "children": Array [
                                                                Object {
                                                                  "attrs": Object {
                                                                    "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                  },
                                                                  "tag": "path",
                                                                },
                                                              ],
                                                              "tag": "svg",
                                                            },
                                                            "name": "close-circle",
                                                            "theme": "filled",
                                                          }
                                                        }
                                                      >
                                                        <span
                                                          aria-label="close-circle"
                                                          className="anticon anticon-close-circle"
                                                          role="img"
                                                        >
                                                          <IconReact
                                                            className=""
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "close-circle",
                                                                "theme": "filled",
                                                              }
                                                            }
                                                          >
                                                            <svg
                                                              aria-hidden="true"
                                                              className=""
                                                              data-icon="close-circle"
                                                              fill="currentColor"
                                                              focusable="false"
                                                              height="1em"
                                                              key="svg-close-circle"
                                                              viewBox="64 64 896 896"
                                                              width="1em"
                                                            >
                                                              <path
                                                                d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z"
                                                                key="svg-close-circle-svg-0"
                                                              />
                                                            </svg>
                                                          </IconReact>
                                                        </span>
                                                      </AntdIcon>
                                                    </ForwardRef(CloseCircleFilled)>
                                                  </span>
                                                </TransBtn>
                                              </div>
                                            </ForwardRef(Select)>
                                          </Select>
                                        </ForwardRef(InternalSelect)>
                                      </Selector>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Rating"
                  name="rating"
                  rules={
                    Array [
                      Object {
                        "message": "Please add rating!",
                        "required": true,
                      },
                    ]
                  }
                >
                  <WrapperField
                    label="Rating"
                    messageVariables={
                      Object {
                        "label": "Rating",
                      }
                    }
                    name="rating"
                    onReset={[Function]}
                    rules={
                      Array [
                        Object {
                          "message": "Please add rating!",
                          "required": true,
                        },
                      ]
                    }
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_rating"
                      label="Rating"
                      messageVariables={
                        Object {
                          "label": "Rating",
                        }
                      }
                      name={
                        Array [
                          "rating",
                        ]
                      }
                      onReset={[Function]}
                      rules={
                        Array [
                          Object {
                            "message": "Please add rating!",
                            "required": true,
                          },
                        ]
                      }
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_rating"
                            label="Rating"
                            name="rating"
                            prefixCls="ant-form"
                            required={true}
                            requiredMark={true}
                            rules={
                              Array [
                                Object {
                                  "message": "Please add rating!",
                                  "required": true,
                                },
                              ]
                            }
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className="ant-form-item-required"
                                  htmlFor="create-claim_rating"
                                  title="Rating"
                                >
                                  Rating
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Rating"
                            name={
                              Array [
                                "rating",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            rules={
                              Array [
                                Object {
                                  "message": "Please add rating!",
                                  "required": true,
                                },
                              ]
                            }
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={2}
                                      value={1}
                                    >
                                      <Selector
                                        action="Ratings"
                                        id="create-claim_rating"
                                        onChange={[Function]}
                                        value={1}
                                      >
                                        <ForwardRef(InternalSelect)
                                          allowClear={true}
                                          bordered={true}
                                          defaultValue={
                                            Array [
                                              1,
                                            ]
                                          }
                                          filterOption={[Function]}
                                          getPopupContainer={[Function]}
                                          listHeight={128}
                                          loading={false}
                                          notFoundContent={null}
                                          onChange={[Function]}
                                          onPopupScroll={[Function]}
                                          onSearch={[Function]}
                                          placeholder="Select ratings"
                                        >
                                          <Select
                                            allowClear={true}
                                            className=""
                                            clearIcon={<ForwardRef(CloseCircleFilled) />}
                                            defaultValue={
                                              Array [
                                                1,
                                              ]
                                            }
                                            dropdownClassName=""
                                            filterOption={[Function]}
                                            getPopupContainer={[Function]}
                                            inputIcon={[Function]}
                                            listHeight={128}
                                            listItemHeight={24}
                                            loading={false}
                                            menuItemSelectedIcon={null}
                                            notFoundContent={null}
                                            onChange={[Function]}
                                            onPopupScroll={[Function]}
                                            onSearch={[Function]}
                                            placeholder="Select ratings"
                                            prefixCls="ant-select"
                                            removeIcon={<ForwardRef(CloseOutlined) />}
                                            transitionName="slide-up"
                                          >
                                            <ForwardRef(Select)
                                              allowClear={true}
                                              className=""
                                              clearIcon={<ForwardRef(CloseCircleFilled) />}
                                              defaultValue={
                                                Array [
                                                  1,
                                                ]
                                              }
                                              dropdownClassName=""
                                              filterOption={[Function]}
                                              getPopupContainer={[Function]}
                                              inputIcon={[Function]}
                                              listHeight={128}
                                              listItemHeight={24}
                                              loading={false}
                                              menuItemSelectedIcon={null}
                                              notFoundContent={null}
                                              onChange={[Function]}
                                              onPopupScroll={[Function]}
                                              onSearch={[Function]}
                                              placeholder="Select ratings"
                                              prefixCls="ant-select"
                                              removeIcon={<ForwardRef(CloseOutlined) />}
                                              transitionName="slide-up"
                                            >
                                              <div
                                                className="ant-select ant-select-single ant-select-allow-clear ant-select-show-arrow"
                                                onBlur={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                onKeyUp={[Function]}
                                                onMouseDown={[Function]}
                                              >
                                                <SelectTrigger
                                                  containerWidth={null}
                                                  dropdownClassName=""
                                                  empty={true}
                                                  getPopupContainer={[Function]}
                                                  getTriggerDOMNode={[Function]}
                                                  popupElement={
                                                    <ForwardRef(OptionList)
                                                      childrenAsData={true}
                                                      defaultActiveFirstOption={true}
                                                      flattenOptions={Array []}
                                                      height={128}
                                                      id="rc_select_TEST_OR_SSR"
                                                      itemHeight={24}
                                                      menuItemSelectedIcon={null}
                                                      multiple={false}
                                                      notFoundContent={null}
                                                      onActiveValue={[Function]}
                                                      onMouseEnter={[Function]}
                                                      onScroll={[Function]}
                                                      onSelect={[Function]}
                                                      onToggleOpen={[Function]}
                                                      options={Array []}
                                                      prefixCls="ant-select"
                                                      searchValue=""
                                                      values={
                                                        Set {
                                                          1,
                                                        }
                                                      }
                                                      virtual={true}
                                                    />
                                                  }
                                                  prefixCls="ant-select"
                                                  transitionName="slide-up"
                                                  visible={false}
                                                >
                                                  <Trigger
                                                    action={Array []}
                                                    afterPopupVisibleChange={[Function]}
                                                    autoDestroy={false}
                                                    blurDelay={0.15}
                                                    builtinPlacements={
                                                      Object {
                                                        "bottomLeft": Object {
                                                          "offset": Array [
                                                            0,
                                                            4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "tl",
                                                            "bl",
                                                          ],
                                                        },
                                                        "bottomRight": Object {
                                                          "offset": Array [
                                                            0,
                                                            4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "tr",
                                                            "br",
                                                          ],
                                                        },
                                                        "topLeft": Object {
                                                          "offset": Array [
                                                            0,
                                                            -4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "bl",
                                                            "tl",
                                                          ],
                                                        },
                                                        "topRight": Object {
                                                          "offset": Array [
                                                            0,
                                                            -4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "br",
                                                            "tr",
                                                          ],
                                                        },
                                                      }
                                                    }
                                                    defaultPopupVisible={false}
                                                    destroyPopupOnHide={false}
                                                    focusDelay={0}
                                                    getDocument={[Function]}
                                                    getPopupClassNameFromAlign={[Function]}
                                                    getPopupContainer={[Function]}
                                                    getTriggerDOMNode={[Function]}
                                                    hideAction={Array []}
                                                    mask={false}
                                                    maskClosable={true}
                                                    mouseEnterDelay={0}
                                                    mouseLeaveDelay={0.1}
                                                    onPopupAlign={[Function]}
                                                    onPopupVisibleChange={[Function]}
                                                    popup={
                                                      <div>
                                                        <ForwardRef(OptionList)
                                                          childrenAsData={true}
                                                          defaultActiveFirstOption={true}
                                                          flattenOptions={Array []}
                                                          height={128}
                                                          id="rc_select_TEST_OR_SSR"
                                                          itemHeight={24}
                                                          menuItemSelectedIcon={null}
                                                          multiple={false}
                                                          notFoundContent={null}
                                                          onActiveValue={[Function]}
                                                          onMouseEnter={[Function]}
                                                          onScroll={[Function]}
                                                          onSelect={[Function]}
                                                          onToggleOpen={[Function]}
                                                          options={Array []}
                                                          prefixCls="ant-select"
                                                          searchValue=""
                                                          values={
                                                            Set {
                                                              1,
                                                            }
                                                          }
                                                          virtual={true}
                                                        />
                                                      </div>
                                                    }
                                                    popupAlign={Object {}}
                                                    popupClassName="ant-select-dropdown-empty"
                                                    popupPlacement="bottomLeft"
                                                    popupStyle={
                                                      Object {
                                                        "minWidth": null,
                                                        "width": null,
                                                      }
                                                    }
                                                    popupTransitionName="slide-up"
                                                    popupVisible={false}
                                                    prefixCls="ant-select-dropdown"
                                                    showAction={Array []}
                                                  >
                                                    <Selector
                                                      accessibilityIndex={0}
                                                      activeValue={null}
                                                      allowClear={true}
                                                      className=""
                                                      clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                      defaultValue={
                                                        Array [
                                                          1,
                                                        ]
                                                      }
                                                      domRef={
                                                        Object {
                                                          "current": <div
                                                            class="ant-select-selector"
                                                          >
                                                            <span
                                                              class="ant-select-selection-search"
                                                            >
                                                              <input
                                                                aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                aria-autocomplete="list"
                                                                aria-controls="rc_select_TEST_OR_SSR_list"
                                                                aria-haspopup="listbox"
                                                                aria-owns="rc_select_TEST_OR_SSR_list"
                                                                autocomplete="off"
                                                                class="ant-select-selection-search-input"
                                                                id="rc_select_TEST_OR_SSR"
                                                                readonly=""
                                                                role="combobox"
                                                                style="opacity: 0;"
                                                                type="search"
                                                                unselectable="on"
                                                                value=""
                                                              />
                                                            </span>
                                                            <span
                                                              class="ant-select-selection-item"
                                                              title="1"
                                                            >
                                                              1
                                                            </span>
                                                          </div>,
                                                        }
                                                      }
                                                      dropdownClassName=""
                                                      filterOption={[Function]}
                                                      getPopupContainer={[Function]}
                                                      id="rc_select_TEST_OR_SSR"
                                                      inputElement={null}
                                                      inputIcon={[Function]}
                                                      key="trigger"
                                                      listHeight={128}
                                                      listItemHeight={24}
                                                      loading={false}
                                                      menuItemSelectedIcon={null}
                                                      multiple={false}
                                                      notFoundContent={null}
                                                      onChange={[Function]}
                                                      onPopupScroll={[Function]}
                                                      onSearch={[Function]}
                                                      onSearchSubmit={[Function]}
                                                      onSelect={[Function]}
                                                      onToggleOpen={[Function]}
                                                      placeholder="Select ratings"
                                                      prefixCls="ant-select"
                                                      removeIcon={<ForwardRef(CloseOutlined) />}
                                                      searchValue=""
                                                      showSearch={false}
                                                      tokenWithEnter={false}
                                                      transitionName="slide-up"
                                                      values={
                                                        Array [
                                                          Object {
                                                            "disabled": undefined,
                                                            "key": 1,
                                                            "label": 1,
                                                            "value": 1,
                                                          },
                                                        ]
                                                      }
                                                    >
                                                      <div
                                                        className="ant-select-selector"
                                                        onClick={[Function]}
                                                        onMouseDown={[Function]}
                                                      >
                                                        <SingleSelector
                                                          accessibilityIndex={0}
                                                          activeValue={null}
                                                          allowClear={true}
                                                          className=""
                                                          clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                          defaultValue={
                                                            Array [
                                                              1,
                                                            ]
                                                          }
                                                          domRef={
                                                            Object {
                                                              "current": <div
                                                                class="ant-select-selector"
                                                              >
                                                                <span
                                                                  class="ant-select-selection-search"
                                                                >
                                                                  <input
                                                                    aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                    aria-autocomplete="list"
                                                                    aria-controls="rc_select_TEST_OR_SSR_list"
                                                                    aria-haspopup="listbox"
                                                                    aria-owns="rc_select_TEST_OR_SSR_list"
                                                                    autocomplete="off"
                                                                    class="ant-select-selection-search-input"
                                                                    id="rc_select_TEST_OR_SSR"
                                                                    readonly=""
                                                                    role="combobox"
                                                                    style="opacity: 0;"
                                                                    type="search"
                                                                    unselectable="on"
                                                                    value=""
                                                                  />
                                                                </span>
                                                                <span
                                                                  class="ant-select-selection-item"
                                                                  title="1"
                                                                >
                                                                  1
                                                                </span>
                                                              </div>,
                                                            }
                                                          }
                                                          dropdownClassName=""
                                                          filterOption={[Function]}
                                                          getPopupContainer={[Function]}
                                                          id="rc_select_TEST_OR_SSR"
                                                          inputElement={null}
                                                          inputIcon={[Function]}
                                                          inputRef={
                                                            Object {
                                                              "current": <input
                                                                aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                aria-autocomplete="list"
                                                                aria-controls="rc_select_TEST_OR_SSR_list"
                                                                aria-haspopup="listbox"
                                                                aria-owns="rc_select_TEST_OR_SSR_list"
                                                                autocomplete="off"
                                                                class="ant-select-selection-search-input"
                                                                id="rc_select_TEST_OR_SSR"
                                                                readonly=""
                                                                role="combobox"
                                                                style="opacity: 0;"
                                                                type="search"
                                                                unselectable="on"
                                                                value=""
                                                              />,
                                                            }
                                                          }
                                                          listHeight={128}
                                                          listItemHeight={24}
                                                          loading={false}
                                                          menuItemSelectedIcon={null}
                                                          multiple={false}
                                                          notFoundContent={null}
                                                          onChange={[Function]}
                                                          onInputChange={[Function]}
                                                          onInputCompositionEnd={[Function]}
                                                          onInputCompositionStart={[Function]}
                                                          onInputKeyDown={[Function]}
                                                          onInputMouseDown={[Function]}
                                                          onInputPaste={[Function]}
                                                          onPopupScroll={[Function]}
                                                          onSearch={[Function]}
                                                          onSearchSubmit={[Function]}
                                                          onSelect={[Function]}
                                                          onToggleOpen={[Function]}
                                                          placeholder="Select ratings"
                                                          prefixCls="ant-select"
                                                          removeIcon={<ForwardRef(CloseOutlined) />}
                                                          searchValue=""
                                                          showSearch={false}
                                                          tokenWithEnter={false}
                                                          transitionName="slide-up"
                                                          values={
                                                            Array [
                                                              Object {
                                                                "disabled": undefined,
                                                                "key": 1,
                                                                "label": 1,
                                                                "value": 1,
                                                              },
                                                            ]
                                                          }
                                                        >
                                                          <span
                                                            className="ant-select-selection-search"
                                                          >
                                                            <Input
                                                              accessibilityIndex={0}
                                                              attrs={Object {}}
                                                              editable={false}
                                                              id="rc_select_TEST_OR_SSR"
                                                              inputElement={null}
                                                              onChange={[Function]}
                                                              onCompositionEnd={[Function]}
                                                              onCompositionStart={[Function]}
                                                              onKeyDown={[Function]}
                                                              onMouseDown={[Function]}
                                                              onPaste={[Function]}
                                                              prefixCls="ant-select"
                                                              value=""
                                                            >
                                                              <input
                                                                aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                aria-autocomplete="list"
                                                                aria-controls="rc_select_TEST_OR_SSR_list"
                                                                aria-haspopup="listbox"
                                                                aria-owns="rc_select_TEST_OR_SSR_list"
                                                                autoComplete="off"
                                                                className="ant-select-selection-search-input"
                                                                id="rc_select_TEST_OR_SSR"
                                                                onChange={[Function]}
                                                                onCompositionEnd={[Function]}
                                                                onCompositionStart={[Function]}
                                                                onKeyDown={[Function]}
                                                                onMouseDown={[Function]}
                                                                onPaste={[Function]}
                                                                readOnly={true}
                                                                role="combobox"
                                                                style={
                                                                  Object {
                                                                    "opacity": 0,
                                                                  }
                                                                }
                                                                type="search"
                                                                unselectable="on"
                                                                value=""
                                                              />
                                                            </Input>
                                                          </span>
                                                          <span
                                                            className="ant-select-selection-item"
                                                            title="1"
                                                          >
                                                            1
                                                          </span>
                                                        </SingleSelector>
                                                      </div>
                                                    </Selector>
                                                  </Trigger>
                                                </SelectTrigger>
                                                <TransBtn
                                                  className="ant-select-arrow"
                                                  customizeIcon={[Function]}
                                                  customizeIconProps={
                                                    Object {
                                                      "focused": false,
                                                      "loading": false,
                                                      "open": undefined,
                                                      "searchValue": "",
                                                      "showSearch": false,
                                                    }
                                                  }
                                                >
                                                  <span
                                                    aria-hidden={true}
                                                    className="ant-select-arrow"
                                                    onMouseDown={[Function]}
                                                    style={
                                                      Object {
                                                        "WebkitUserSelect": "none",
                                                        "userSelect": "none",
                                                      }
                                                    }
                                                    unselectable="on"
                                                  >
                                                    <ForwardRef(DownOutlined)
                                                      className="ant-select-suffix"
                                                    >
                                                      <AntdIcon
                                                        className="ant-select-suffix"
                                                        icon={
                                                          Object {
                                                            "icon": Object {
                                                              "attrs": Object {
                                                                "focusable": "false",
                                                                "viewBox": "64 64 896 896",
                                                              },
                                                              "children": Array [
                                                                Object {
                                                                  "attrs": Object {
                                                                    "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                                                  },
                                                                  "tag": "path",
                                                                },
                                                              ],
                                                              "tag": "svg",
                                                            },
                                                            "name": "down",
                                                            "theme": "outlined",
                                                          }
                                                        }
                                                      >
                                                        <span
                                                          aria-label="down"
                                                          className="anticon anticon-down ant-select-suffix"
                                                          role="img"
                                                        >
                                                          <IconReact
                                                            className=""
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "down",
                                                                "theme": "outlined",
                                                              }
                                                            }
                                                          >
                                                            <svg
                                                              aria-hidden="true"
                                                              className=""
                                                              data-icon="down"
                                                              fill="currentColor"
                                                              focusable="false"
                                                              height="1em"
                                                              key="svg-down"
                                                              viewBox="64 64 896 896"
                                                              width="1em"
                                                            >
                                                              <path
                                                                d="M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z"
                                                                key="svg-down-svg-0"
                                                              />
                                                            </svg>
                                                          </IconReact>
                                                        </span>
                                                      </AntdIcon>
                                                    </ForwardRef(DownOutlined)>
                                                  </span>
                                                </TransBtn>
                                                <TransBtn
                                                  className="ant-select-clear"
                                                  customizeIcon={<ForwardRef(CloseCircleFilled) />}
                                                  onMouseDown={[Function]}
                                                >
                                                  <span
                                                    aria-hidden={true}
                                                    className="ant-select-clear"
                                                    onMouseDown={[Function]}
                                                    style={
                                                      Object {
                                                        "WebkitUserSelect": "none",
                                                        "userSelect": "none",
                                                      }
                                                    }
                                                    unselectable="on"
                                                  >
                                                    <ForwardRef(CloseCircleFilled)>
                                                      <AntdIcon
                                                        icon={
                                                          Object {
                                                            "icon": Object {
                                                              "attrs": Object {
                                                                "focusable": "false",
                                                                "viewBox": "64 64 896 896",
                                                              },
                                                              "children": Array [
                                                                Object {
                                                                  "attrs": Object {
                                                                    "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                  },
                                                                  "tag": "path",
                                                                },
                                                              ],
                                                              "tag": "svg",
                                                            },
                                                            "name": "close-circle",
                                                            "theme": "filled",
                                                          }
                                                        }
                                                      >
                                                        <span
                                                          aria-label="close-circle"
                                                          className="anticon anticon-close-circle"
                                                          role="img"
                                                        >
                                                          <IconReact
                                                            className=""
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "close-circle",
                                                                "theme": "filled",
                                                              }
                                                            }
                                                          >
                                                            <svg
                                                              aria-hidden="true"
                                                              className=""
                                                              data-icon="close-circle"
                                                              fill="currentColor"
                                                              focusable="false"
                                                              height="1em"
                                                              key="svg-close-circle"
                                                              viewBox="64 64 896 896"
                                                              width="1em"
                                                            >
                                                              <path
                                                                d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z"
                                                                key="svg-close-circle-svg-0"
                                                              />
                                                            </svg>
                                                          </IconReact>
                                                        </span>
                                                      </AntdIcon>
                                                    </ForwardRef(CloseCircleFilled)>
                                                  </span>
                                                </TransBtn>
                                              </div>
                                            </ForwardRef(Select)>
                                          </Select>
                                        </ForwardRef(InternalSelect)>
                                      </Selector>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Description"
                  name="description"
                >
                  <WrapperField
                    label="Description"
                    messageVariables={
                      Object {
                        "label": "Description",
                      }
                    }
                    name="description"
                    onReset={[Function]}
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_description"
                      label="Description"
                      messageVariables={
                        Object {
                          "label": "Description",
                        }
                      }
                      name={
                        Array [
                          "description",
                        ]
                      }
                      onReset={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_description"
                            label="Description"
                            name="description"
                            prefixCls="ant-form"
                            required={false}
                            requiredMark={true}
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className=""
                                  htmlFor="create-claim_description"
                                  title="Description"
                                >
                                  Description
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Description"
                            name={
                              Array [
                                "description",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={2}
                                      value={
                                        Object {
                                          "blocks": Array [
                                            Object {
                                              "data": Object {
                                                "level": 2,
                                                "text": "Editor.js",
                                              },
                                              "type": "header",
                                            },
                                            Object {
                                              "data": Object {
                                                "text": "Hey. Meet the new Editor. On this page you can see it in action — try to edit this text.",
                                              },
                                              "type": "paragraph",
                                            },
                                          ],
                                          "time": 1595747741807,
                                          "version": "2.18.0",
                                        }
                                      }
                                    >
                                      <Editor
                                        id="create-claim_description"
                                        onChange={[Function]}
                                        placeholder="Enter Description..."
                                        value={
                                          Object {
                                            "blocks": Array [
                                              Object {
                                                "data": Object {
                                                  "level": 2,
                                                  "text": "Editor.js",
                                                },
                                                "type": "header",
                                              },
                                              Object {
                                                "data": Object {
                                                  "text": "Hey. Meet the new Editor. On this page you can see it in action — try to edit this text.",
                                                },
                                                "type": "paragraph",
                                              },
                                            ],
                                            "time": 1595747741807,
                                            "version": "2.18.0",
                                          }
                                        }
                                      >
                                        <div
                                          style={null}
                                        />
                                      </Editor>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
              </div>
              <div
                style={
                  Object {
                    "display": "block",
                  }
                }
              >
                <FormItem
                  label="Claim Date"
                  name="claim_date"
                >
                  <WrapperField
                    label="Claim Date"
                    messageVariables={
                      Object {
                        "label": "Claim Date",
                      }
                    }
                    name="claim_date"
                    onReset={[Function]}
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_claim_date"
                      label="Claim Date"
                      messageVariables={
                        Object {
                          "label": "Claim Date",
                        }
                      }
                      name={
                        Array [
                          "claim_date",
                        ]
                      }
                      onReset={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_claim_date"
                            label="Claim Date"
                            name="claim_date"
                            prefixCls="ant-form"
                            required={false}
                            requiredMark={true}
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className=""
                                  htmlFor="create-claim_claim_date"
                                  title="Claim Date"
                                >
                                  Claim Date
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Claim Date"
                            name={
                              Array [
                                "claim_date",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={2}
                                      value={"2020-12-12T00:00:00.000Z"}
                                    >
                                      <Picker
                                        id="create-claim_claim_date"
                                        onChange={[Function]}
                                        value={"2020-12-12T00:00:00.000Z"}
                                      >
                                        <LocaleReceiver
                                          componentName="DatePicker"
                                          defaultLocale={[Function]}
                                        >
                                          <Picker
                                            allowClear={true}
                                            className=""
                                            clearIcon={<ForwardRef(CloseCircleFilled) />}
                                            components={
                                              Object {
                                                "button": [Function],
                                                "rangeItem": [Function],
                                              }
                                            }
                                            generateConfig={
                                              Object {
                                                "addDate": [Function],
                                                "addMonth": [Function],
                                                "addYear": [Function],
                                                "getDate": [Function],
                                                "getHour": [Function],
                                                "getMinute": [Function],
                                                "getMonth": [Function],
                                                "getNow": [Function],
                                                "getSecond": [Function],
                                                "getWeekDay": [Function],
                                                "getYear": [Function],
                                                "isAfter": [Function],
                                                "isValidate": [Function],
                                                "locale": Object {
                                                  "format": [Function],
                                                  "getShortMonths": [Function],
                                                  "getShortWeekDays": [Function],
                                                  "getWeek": [Function],
                                                  "getWeekFirstDay": [Function],
                                                  "parse": [Function],
                                                },
                                                "setDate": [Function],
                                                "setHour": [Function],
                                                "setMinute": [Function],
                                                "setMonth": [Function],
                                                "setSecond": [Function],
                                                "setYear": [Function],
                                              }
                                            }
                                            id="create-claim_claim_date"
                                            locale={
                                              Object {
                                                "backToToday": "Back to today",
                                                "clear": "Clear",
                                                "dateFormat": "M/D/YYYY",
                                                "dateSelect": "select date",
                                                "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                "dayFormat": "D",
                                                "decadeSelect": "Choose a decade",
                                                "locale": "en_US",
                                                "month": "Month",
                                                "monthBeforeYear": true,
                                                "monthPlaceholder": "Select month",
                                                "monthSelect": "Choose a month",
                                                "nextCentury": "Next century",
                                                "nextDecade": "Next decade",
                                                "nextMonth": "Next month (PageDown)",
                                                "nextYear": "Next year (Control + right)",
                                                "now": "Now",
                                                "ok": "Ok",
                                                "placeholder": "Select date",
                                                "previousCentury": "Last century",
                                                "previousDecade": "Last decade",
                                                "previousMonth": "Previous month (PageUp)",
                                                "previousYear": "Last year (Control + left)",
                                                "quarterPlaceholder": "Select quarter",
                                                "rangeMonthPlaceholder": Array [
                                                  "Start month",
                                                  "End month",
                                                ],
                                                "rangePlaceholder": Array [
                                                  "Start date",
                                                  "End date",
                                                ],
                                                "rangeWeekPlaceholder": Array [
                                                  "Start week",
                                                  "End week",
                                                ],
                                                "rangeYearPlaceholder": Array [
                                                  "Start year",
                                                  "End year",
                                                ],
                                                "timeSelect": "select time",
                                                "today": "Today",
                                                "weekPlaceholder": "Select week",
                                                "weekSelect": "Choose a week",
                                                "year": "Year",
                                                "yearFormat": "YYYY",
                                                "yearPlaceholder": "Select year",
                                                "yearSelect": "Choose a year",
                                              }
                                            }
                                            nextIcon={
                                              <span
                                                className="ant-picker-next-icon"
                                              />
                                            }
                                            onChange={[Function]}
                                            placeholder="Select date"
                                            prefixCls="ant-picker"
                                            prevIcon={
                                              <span
                                                className="ant-picker-prev-icon"
                                              />
                                            }
                                            showToday={true}
                                            suffixIcon={<ForwardRef(CalendarOutlined) />}
                                            superNextIcon={
                                              <span
                                                className="ant-picker-super-next-icon"
                                              />
                                            }
                                            superPrevIcon={
                                              <span
                                                className="ant-picker-super-prev-icon"
                                              />
                                            }
                                            transitionName="slide-up"
                                            value={"2020-12-12T00:00:00.000Z"}
                                          >
                                            <InnerPicker
                                              allowClear={true}
                                              className=""
                                              clearIcon={<ForwardRef(CloseCircleFilled) />}
                                              components={
                                                Object {
                                                  "button": [Function],
                                                  "rangeItem": [Function],
                                                }
                                              }
                                              generateConfig={
                                                Object {
                                                  "addDate": [Function],
                                                  "addMonth": [Function],
                                                  "addYear": [Function],
                                                  "getDate": [Function],
                                                  "getHour": [Function],
                                                  "getMinute": [Function],
                                                  "getMonth": [Function],
                                                  "getNow": [Function],
                                                  "getSecond": [Function],
                                                  "getWeekDay": [Function],
                                                  "getYear": [Function],
                                                  "isAfter": [Function],
                                                  "isValidate": [Function],
                                                  "locale": Object {
                                                    "format": [Function],
                                                    "getShortMonths": [Function],
                                                    "getShortWeekDays": [Function],
                                                    "getWeek": [Function],
                                                    "getWeekFirstDay": [Function],
                                                    "parse": [Function],
                                                  },
                                                  "setDate": [Function],
                                                  "setHour": [Function],
                                                  "setMinute": [Function],
                                                  "setMonth": [Function],
                                                  "setSecond": [Function],
                                                  "setYear": [Function],
                                                }
                                              }
                                              id="create-claim_claim_date"
                                              locale={
                                                Object {
                                                  "backToToday": "Back to today",
                                                  "clear": "Clear",
                                                  "dateFormat": "M/D/YYYY",
                                                  "dateSelect": "select date",
                                                  "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                  "dayFormat": "D",
                                                  "decadeSelect": "Choose a decade",
                                                  "locale": "en_US",
                                                  "month": "Month",
                                                  "monthBeforeYear": true,
                                                  "monthPlaceholder": "Select month",
                                                  "monthSelect": "Choose a month",
                                                  "nextCentury": "Next century",
                                                  "nextDecade": "Next decade",
                                                  "nextMonth": "Next month (PageDown)",
                                                  "nextYear": "Next year (Control + right)",
                                                  "now": "Now",
                                                  "ok": "Ok",
                                                  "placeholder": "Select date",
                                                  "previousCentury": "Last century",
                                                  "previousDecade": "Last decade",
                                                  "previousMonth": "Previous month (PageUp)",
                                                  "previousYear": "Last year (Control + left)",
                                                  "quarterPlaceholder": "Select quarter",
                                                  "rangeMonthPlaceholder": Array [
                                                    "Start month",
                                                    "End month",
                                                  ],
                                                  "rangePlaceholder": Array [
                                                    "Start date",
                                                    "End date",
                                                  ],
                                                  "rangeWeekPlaceholder": Array [
                                                    "Start week",
                                                    "End week",
                                                  ],
                                                  "rangeYearPlaceholder": Array [
                                                    "Start year",
                                                    "End year",
                                                  ],
                                                  "timeSelect": "select time",
                                                  "today": "Today",
                                                  "weekPlaceholder": "Select week",
                                                  "weekSelect": "Choose a week",
                                                  "year": "Year",
                                                  "yearFormat": "YYYY",
                                                  "yearPlaceholder": "Select year",
                                                  "yearSelect": "Choose a year",
                                                }
                                              }
                                              nextIcon={
                                                <span
                                                  className="ant-picker-next-icon"
                                                />
                                              }
                                              onChange={[Function]}
                                              pickerRef={
                                                Object {
                                                  "current": Object {
                                                    "blur": [Function],
                                                    "focus": [Function],
                                                  },
                                                }
                                              }
                                              placeholder="Select date"
                                              prefixCls="ant-picker"
                                              prevIcon={
                                                <span
                                                  className="ant-picker-prev-icon"
                                                />
                                              }
                                              showToday={true}
                                              suffixIcon={<ForwardRef(CalendarOutlined) />}
                                              superNextIcon={
                                                <span
                                                  className="ant-picker-super-next-icon"
                                                />
                                              }
                                              superPrevIcon={
                                                <span
                                                  className="ant-picker-super-prev-icon"
                                                />
                                              }
                                              transitionName="slide-up"
                                              value={"2020-12-12T00:00:00.000Z"}
                                            >
                                              <PickerTrigger
                                                popupElement={
                                                  <div
                                                    className="ant-picker-panel-container"
                                                    onMouseDown={[Function]}
                                                  >
                                                    <PickerPanel
                                                      allowClear={true}
                                                      className="ant-picker-panel-focused"
                                                      clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                      components={
                                                        Object {
                                                          "button": [Function],
                                                          "rangeItem": [Function],
                                                        }
                                                      }
                                                      generateConfig={
                                                        Object {
                                                          "addDate": [Function],
                                                          "addMonth": [Function],
                                                          "addYear": [Function],
                                                          "getDate": [Function],
                                                          "getHour": [Function],
                                                          "getMinute": [Function],
                                                          "getMonth": [Function],
                                                          "getNow": [Function],
                                                          "getSecond": [Function],
                                                          "getWeekDay": [Function],
                                                          "getYear": [Function],
                                                          "isAfter": [Function],
                                                          "isValidate": [Function],
                                                          "locale": Object {
                                                            "format": [Function],
                                                            "getShortMonths": [Function],
                                                            "getShortWeekDays": [Function],
                                                            "getWeek": [Function],
                                                            "getWeekFirstDay": [Function],
                                                            "parse": [Function],
                                                          },
                                                          "setDate": [Function],
                                                          "setHour": [Function],
                                                          "setMinute": [Function],
                                                          "setMonth": [Function],
                                                          "setSecond": [Function],
                                                          "setYear": [Function],
                                                        }
                                                      }
                                                      id="create-claim_claim_date"
                                                      locale={
                                                        Object {
                                                          "backToToday": "Back to today",
                                                          "clear": "Clear",
                                                          "dateFormat": "M/D/YYYY",
                                                          "dateSelect": "select date",
                                                          "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                          "dayFormat": "D",
                                                          "decadeSelect": "Choose a decade",
                                                          "locale": "en_US",
                                                          "month": "Month",
                                                          "monthBeforeYear": true,
                                                          "monthPlaceholder": "Select month",
                                                          "monthSelect": "Choose a month",
                                                          "nextCentury": "Next century",
                                                          "nextDecade": "Next decade",
                                                          "nextMonth": "Next month (PageDown)",
                                                          "nextYear": "Next year (Control + right)",
                                                          "now": "Now",
                                                          "ok": "Ok",
                                                          "placeholder": "Select date",
                                                          "previousCentury": "Last century",
                                                          "previousDecade": "Last decade",
                                                          "previousMonth": "Previous month (PageUp)",
                                                          "previousYear": "Last year (Control + left)",
                                                          "quarterPlaceholder": "Select quarter",
                                                          "rangeMonthPlaceholder": Array [
                                                            "Start month",
                                                            "End month",
                                                          ],
                                                          "rangePlaceholder": Array [
                                                            "Start date",
                                                            "End date",
                                                          ],
                                                          "rangeWeekPlaceholder": Array [
                                                            "Start week",
                                                            "End week",
                                                          ],
                                                          "rangeYearPlaceholder": Array [
                                                            "Start year",
                                                            "End year",
                                                          ],
                                                          "timeSelect": "select time",
                                                          "today": "Today",
                                                          "weekPlaceholder": "Select week",
                                                          "weekSelect": "Choose a week",
                                                          "year": "Year",
                                                          "yearFormat": "YYYY",
                                                          "yearPlaceholder": "Select year",
                                                          "yearSelect": "Choose a year",
                                                        }
                                                      }
                                                      nextIcon={
                                                        <span
                                                          className="ant-picker-next-icon"
                                                        />
                                                      }
                                                      onChange={[Function]}
                                                      pickerRef={
                                                        Object {
                                                          "current": Object {
                                                            "blur": [Function],
                                                            "focus": [Function],
                                                          },
                                                        }
                                                      }
                                                      placeholder="Select date"
                                                      prefixCls="ant-picker"
                                                      prevIcon={
                                                        <span
                                                          className="ant-picker-prev-icon"
                                                        />
                                                      }
                                                      showToday={true}
                                                      suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                      superNextIcon={
                                                        <span
                                                          className="ant-picker-super-next-icon"
                                                        />
                                                      }
                                                      superPrevIcon={
                                                        <span
                                                          className="ant-picker-super-prev-icon"
                                                        />
                                                      }
                                                      tabIndex={-1}
                                                      transitionName="slide-up"
                                                      value={"2020-12-12T00:00:00.000Z"}
                                                    />
                                                  </div>
                                                }
                                                popupPlacement="bottomLeft"
                                                prefixCls="ant-picker"
                                                transitionName="slide-up"
                                                visible={false}
                                              >
                                                <Trigger
                                                  action={Array []}
                                                  afterPopupVisibleChange={[Function]}
                                                  autoDestroy={false}
                                                  blurDelay={0.15}
                                                  builtinPlacements={
                                                    Object {
                                                      "bottomLeft": Object {
                                                        "offset": Array [
                                                          0,
                                                          4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 1,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "tl",
                                                          "bl",
                                                        ],
                                                      },
                                                      "bottomRight": Object {
                                                        "offset": Array [
                                                          0,
                                                          4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 1,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "tr",
                                                          "br",
                                                        ],
                                                      },
                                                      "topLeft": Object {
                                                        "offset": Array [
                                                          0,
                                                          -4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 0,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "bl",
                                                          "tl",
                                                        ],
                                                      },
                                                      "topRight": Object {
                                                        "offset": Array [
                                                          0,
                                                          -4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 0,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "br",
                                                          "tr",
                                                        ],
                                                      },
                                                    }
                                                  }
                                                  defaultPopupVisible={false}
                                                  destroyPopupOnHide={false}
                                                  focusDelay={0}
                                                  getDocument={[Function]}
                                                  getPopupClassNameFromAlign={[Function]}
                                                  hideAction={Array []}
                                                  mask={false}
                                                  maskClosable={true}
                                                  mouseEnterDelay={0}
                                                  mouseLeaveDelay={0.1}
                                                  onPopupAlign={[Function]}
                                                  onPopupVisibleChange={[Function]}
                                                  popup={
                                                    <div
                                                      className="ant-picker-panel-container"
                                                      onMouseDown={[Function]}
                                                    >
                                                      <PickerPanel
                                                        allowClear={true}
                                                        className="ant-picker-panel-focused"
                                                        clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                        components={
                                                          Object {
                                                            "button": [Function],
                                                            "rangeItem": [Function],
                                                          }
                                                        }
                                                        generateConfig={
                                                          Object {
                                                            "addDate": [Function],
                                                            "addMonth": [Function],
                                                            "addYear": [Function],
                                                            "getDate": [Function],
                                                            "getHour": [Function],
                                                            "getMinute": [Function],
                                                            "getMonth": [Function],
                                                            "getNow": [Function],
                                                            "getSecond": [Function],
                                                            "getWeekDay": [Function],
                                                            "getYear": [Function],
                                                            "isAfter": [Function],
                                                            "isValidate": [Function],
                                                            "locale": Object {
                                                              "format": [Function],
                                                              "getShortMonths": [Function],
                                                              "getShortWeekDays": [Function],
                                                              "getWeek": [Function],
                                                              "getWeekFirstDay": [Function],
                                                              "parse": [Function],
                                                            },
                                                            "setDate": [Function],
                                                            "setHour": [Function],
                                                            "setMinute": [Function],
                                                            "setMonth": [Function],
                                                            "setSecond": [Function],
                                                            "setYear": [Function],
                                                          }
                                                        }
                                                        id="create-claim_claim_date"
                                                        locale={
                                                          Object {
                                                            "backToToday": "Back to today",
                                                            "clear": "Clear",
                                                            "dateFormat": "M/D/YYYY",
                                                            "dateSelect": "select date",
                                                            "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                            "dayFormat": "D",
                                                            "decadeSelect": "Choose a decade",
                                                            "locale": "en_US",
                                                            "month": "Month",
                                                            "monthBeforeYear": true,
                                                            "monthPlaceholder": "Select month",
                                                            "monthSelect": "Choose a month",
                                                            "nextCentury": "Next century",
                                                            "nextDecade": "Next decade",
                                                            "nextMonth": "Next month (PageDown)",
                                                            "nextYear": "Next year (Control + right)",
                                                            "now": "Now",
                                                            "ok": "Ok",
                                                            "placeholder": "Select date",
                                                            "previousCentury": "Last century",
                                                            "previousDecade": "Last decade",
                                                            "previousMonth": "Previous month (PageUp)",
                                                            "previousYear": "Last year (Control + left)",
                                                            "quarterPlaceholder": "Select quarter",
                                                            "rangeMonthPlaceholder": Array [
                                                              "Start month",
                                                              "End month",
                                                            ],
                                                            "rangePlaceholder": Array [
                                                              "Start date",
                                                              "End date",
                                                            ],
                                                            "rangeWeekPlaceholder": Array [
                                                              "Start week",
                                                              "End week",
                                                            ],
                                                            "rangeYearPlaceholder": Array [
                                                              "Start year",
                                                              "End year",
                                                            ],
                                                            "timeSelect": "select time",
                                                            "today": "Today",
                                                            "weekPlaceholder": "Select week",
                                                            "weekSelect": "Choose a week",
                                                            "year": "Year",
                                                            "yearFormat": "YYYY",
                                                            "yearPlaceholder": "Select year",
                                                            "yearSelect": "Choose a year",
                                                          }
                                                        }
                                                        nextIcon={
                                                          <span
                                                            className="ant-picker-next-icon"
                                                          />
                                                        }
                                                        onChange={[Function]}
                                                        pickerRef={
                                                          Object {
                                                            "current": Object {
                                                              "blur": [Function],
                                                              "focus": [Function],
                                                            },
                                                          }
                                                        }
                                                        placeholder="Select date"
                                                        prefixCls="ant-picker"
                                                        prevIcon={
                                                          <span
                                                            className="ant-picker-prev-icon"
                                                          />
                                                        }
                                                        showToday={true}
                                                        suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                        superNextIcon={
                                                          <span
                                                            className="ant-picker-super-next-icon"
                                                          />
                                                        }
                                                        superPrevIcon={
                                                          <span
                                                            className="ant-picker-super-prev-icon"
                                                          />
                                                        }
                                                        tabIndex={-1}
                                                        transitionName="slide-up"
                                                        value={"2020-12-12T00:00:00.000Z"}
                                                      />
                                                    </div>
                                                  }
                                                  popupAlign={Object {}}
                                                  popupClassName=""
                                                  popupPlacement="bottomLeft"
                                                  popupStyle={Object {}}
                                                  popupTransitionName="slide-up"
                                                  popupVisible={false}
                                                  prefixCls="ant-picker-dropdown"
                                                  showAction={Array []}
                                                >
                                                  <div
                                                    className="ant-picker"
                                                    key="trigger"
                                                    onMouseUp={[Function]}
                                                  >
                                                    <div
                                                      className="ant-picker-input"
                                                    >
                                                      <input
                                                        autoComplete="off"
                                                        id="create-claim_claim_date"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        onMouseDown={[Function]}
                                                        placeholder="Select date"
                                                        readOnly={true}
                                                        size={12}
                                                        title="2020-12-12"
                                                        value="2020-12-12"
                                                      />
                                                      <span
                                                        className="ant-picker-suffix"
                                                      >
                                                        <ForwardRef(CalendarOutlined)>
                                                          <AntdIcon
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "calendar",
                                                                "theme": "outlined",
                                                              }
                                                            }
                                                          >
                                                            <span
                                                              aria-label="calendar"
                                                              className="anticon anticon-calendar"
                                                              role="img"
                                                            >
                                                              <IconReact
                                                                className=""
                                                                icon={
                                                                  Object {
                                                                    "icon": Object {
                                                                      "attrs": Object {
                                                                        "focusable": "false",
                                                                        "viewBox": "64 64 896 896",
                                                                      },
                                                                      "children": Array [
                                                                        Object {
                                                                          "attrs": Object {
                                                                            "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                          },
                                                                          "tag": "path",
                                                                        },
                                                                      ],
                                                                      "tag": "svg",
                                                                    },
                                                                    "name": "calendar",
                                                                    "theme": "outlined",
                                                                  }
                                                                }
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className=""
                                                                  data-icon="calendar"
                                                                  fill="currentColor"
                                                                  focusable="false"
                                                                  height="1em"
                                                                  key="svg-calendar"
                                                                  viewBox="64 64 896 896"
                                                                  width="1em"
                                                                >
                                                                  <path
                                                                    d="M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z"
                                                                    key="svg-calendar-svg-0"
                                                                  />
                                                                </svg>
                                                              </IconReact>
                                                            </span>
                                                          </AntdIcon>
                                                        </ForwardRef(CalendarOutlined)>
                                                      </span>
                                                      <span
                                                        className="ant-picker-clear"
                                                        onMouseDown={[Function]}
                                                        onMouseUp={[Function]}
                                                      >
                                                        <ForwardRef(CloseCircleFilled)>
                                                          <AntdIcon
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "close-circle",
                                                                "theme": "filled",
                                                              }
                                                            }
                                                          >
                                                            <span
                                                              aria-label="close-circle"
                                                              className="anticon anticon-close-circle"
                                                              role="img"
                                                            >
                                                              <IconReact
                                                                className=""
                                                                icon={
                                                                  Object {
                                                                    "icon": Object {
                                                                      "attrs": Object {
                                                                        "focusable": "false",
                                                                        "viewBox": "64 64 896 896",
                                                                      },
                                                                      "children": Array [
                                                                        Object {
                                                                          "attrs": Object {
                                                                            "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                          },
                                                                          "tag": "path",
                                                                        },
                                                                      ],
                                                                      "tag": "svg",
                                                                    },
                                                                    "name": "close-circle",
                                                                    "theme": "filled",
                                                                  }
                                                                }
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className=""
                                                                  data-icon="close-circle"
                                                                  fill="currentColor"
                                                                  focusable="false"
                                                                  height="1em"
                                                                  key="svg-close-circle"
                                                                  viewBox="64 64 896 896"
                                                                  width="1em"
                                                                >
                                                                  <path
                                                                    d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z"
                                                                    key="svg-close-circle-svg-0"
                                                                  />
                                                                </svg>
                                                              </IconReact>
                                                            </span>
                                                          </AntdIcon>
                                                        </ForwardRef(CloseCircleFilled)>
                                                      </span>
                                                    </div>
                                                  </div>
                                                </Trigger>
                                              </PickerTrigger>
                                            </InnerPicker>
                                          </Picker>
                                        </LocaleReceiver>
                                      </Picker>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Checked Date"
                  name="checked_date"
                >
                  <WrapperField
                    label="Checked Date"
                    messageVariables={
                      Object {
                        "label": "Checked Date",
                      }
                    }
                    name="checked_date"
                    onReset={[Function]}
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_checked_date"
                      label="Checked Date"
                      messageVariables={
                        Object {
                          "label": "Checked Date",
                        }
                      }
                      name={
                        Array [
                          "checked_date",
                        ]
                      }
                      onReset={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_checked_date"
                            label="Checked Date"
                            name="checked_date"
                            prefixCls="ant-form"
                            required={false}
                            requiredMark={true}
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className=""
                                  htmlFor="create-claim_checked_date"
                                  title="Checked Date"
                                >
                                  Checked Date
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Checked Date"
                            name={
                              Array [
                                "checked_date",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={2}
                                      value={"2020-12-12T00:00:00.000Z"}
                                    >
                                      <Picker
                                        id="create-claim_checked_date"
                                        onChange={[Function]}
                                        value={"2020-12-12T00:00:00.000Z"}
                                      >
                                        <LocaleReceiver
                                          componentName="DatePicker"
                                          defaultLocale={[Function]}
                                        >
                                          <Picker
                                            allowClear={true}
                                            className=""
                                            clearIcon={<ForwardRef(CloseCircleFilled) />}
                                            components={
                                              Object {
                                                "button": [Function],
                                                "rangeItem": [Function],
                                              }
                                            }
                                            generateConfig={
                                              Object {
                                                "addDate": [Function],
                                                "addMonth": [Function],
                                                "addYear": [Function],
                                                "getDate": [Function],
                                                "getHour": [Function],
                                                "getMinute": [Function],
                                                "getMonth": [Function],
                                                "getNow": [Function],
                                                "getSecond": [Function],
                                                "getWeekDay": [Function],
                                                "getYear": [Function],
                                                "isAfter": [Function],
                                                "isValidate": [Function],
                                                "locale": Object {
                                                  "format": [Function],
                                                  "getShortMonths": [Function],
                                                  "getShortWeekDays": [Function],
                                                  "getWeek": [Function],
                                                  "getWeekFirstDay": [Function],
                                                  "parse": [Function],
                                                },
                                                "setDate": [Function],
                                                "setHour": [Function],
                                                "setMinute": [Function],
                                                "setMonth": [Function],
                                                "setSecond": [Function],
                                                "setYear": [Function],
                                              }
                                            }
                                            id="create-claim_checked_date"
                                            locale={
                                              Object {
                                                "backToToday": "Back to today",
                                                "clear": "Clear",
                                                "dateFormat": "M/D/YYYY",
                                                "dateSelect": "select date",
                                                "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                "dayFormat": "D",
                                                "decadeSelect": "Choose a decade",
                                                "locale": "en_US",
                                                "month": "Month",
                                                "monthBeforeYear": true,
                                                "monthPlaceholder": "Select month",
                                                "monthSelect": "Choose a month",
                                                "nextCentury": "Next century",
                                                "nextDecade": "Next decade",
                                                "nextMonth": "Next month (PageDown)",
                                                "nextYear": "Next year (Control + right)",
                                                "now": "Now",
                                                "ok": "Ok",
                                                "placeholder": "Select date",
                                                "previousCentury": "Last century",
                                                "previousDecade": "Last decade",
                                                "previousMonth": "Previous month (PageUp)",
                                                "previousYear": "Last year (Control + left)",
                                                "quarterPlaceholder": "Select quarter",
                                                "rangeMonthPlaceholder": Array [
                                                  "Start month",
                                                  "End month",
                                                ],
                                                "rangePlaceholder": Array [
                                                  "Start date",
                                                  "End date",
                                                ],
                                                "rangeWeekPlaceholder": Array [
                                                  "Start week",
                                                  "End week",
                                                ],
                                                "rangeYearPlaceholder": Array [
                                                  "Start year",
                                                  "End year",
                                                ],
                                                "timeSelect": "select time",
                                                "today": "Today",
                                                "weekPlaceholder": "Select week",
                                                "weekSelect": "Choose a week",
                                                "year": "Year",
                                                "yearFormat": "YYYY",
                                                "yearPlaceholder": "Select year",
                                                "yearSelect": "Choose a year",
                                              }
                                            }
                                            nextIcon={
                                              <span
                                                className="ant-picker-next-icon"
                                              />
                                            }
                                            onChange={[Function]}
                                            placeholder="Select date"
                                            prefixCls="ant-picker"
                                            prevIcon={
                                              <span
                                                className="ant-picker-prev-icon"
                                              />
                                            }
                                            showToday={true}
                                            suffixIcon={<ForwardRef(CalendarOutlined) />}
                                            superNextIcon={
                                              <span
                                                className="ant-picker-super-next-icon"
                                              />
                                            }
                                            superPrevIcon={
                                              <span
                                                className="ant-picker-super-prev-icon"
                                              />
                                            }
                                            transitionName="slide-up"
                                            value={"2020-12-12T00:00:00.000Z"}
                                          >
                                            <InnerPicker
                                              allowClear={true}
                                              className=""
                                              clearIcon={<ForwardRef(CloseCircleFilled) />}
                                              components={
                                                Object {
                                                  "button": [Function],
                                                  "rangeItem": [Function],
                                                }
                                              }
                                              generateConfig={
                                                Object {
                                                  "addDate": [Function],
                                                  "addMonth": [Function],
                                                  "addYear": [Function],
                                                  "getDate": [Function],
                                                  "getHour": [Function],
                                                  "getMinute": [Function],
                                                  "getMonth": [Function],
                                                  "getNow": [Function],
                                                  "getSecond": [Function],
                                                  "getWeekDay": [Function],
                                                  "getYear": [Function],
                                                  "isAfter": [Function],
                                                  "isValidate": [Function],
                                                  "locale": Object {
                                                    "format": [Function],
                                                    "getShortMonths": [Function],
                                                    "getShortWeekDays": [Function],
                                                    "getWeek": [Function],
                                                    "getWeekFirstDay": [Function],
                                                    "parse": [Function],
                                                  },
                                                  "setDate": [Function],
                                                  "setHour": [Function],
                                                  "setMinute": [Function],
                                                  "setMonth": [Function],
                                                  "setSecond": [Function],
                                                  "setYear": [Function],
                                                }
                                              }
                                              id="create-claim_checked_date"
                                              locale={
                                                Object {
                                                  "backToToday": "Back to today",
                                                  "clear": "Clear",
                                                  "dateFormat": "M/D/YYYY",
                                                  "dateSelect": "select date",
                                                  "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                  "dayFormat": "D",
                                                  "decadeSelect": "Choose a decade",
                                                  "locale": "en_US",
                                                  "month": "Month",
                                                  "monthBeforeYear": true,
                                                  "monthPlaceholder": "Select month",
                                                  "monthSelect": "Choose a month",
                                                  "nextCentury": "Next century",
                                                  "nextDecade": "Next decade",
                                                  "nextMonth": "Next month (PageDown)",
                                                  "nextYear": "Next year (Control + right)",
                                                  "now": "Now",
                                                  "ok": "Ok",
                                                  "placeholder": "Select date",
                                                  "previousCentury": "Last century",
                                                  "previousDecade": "Last decade",
                                                  "previousMonth": "Previous month (PageUp)",
                                                  "previousYear": "Last year (Control + left)",
                                                  "quarterPlaceholder": "Select quarter",
                                                  "rangeMonthPlaceholder": Array [
                                                    "Start month",
                                                    "End month",
                                                  ],
                                                  "rangePlaceholder": Array [
                                                    "Start date",
                                                    "End date",
                                                  ],
                                                  "rangeWeekPlaceholder": Array [
                                                    "Start week",
                                                    "End week",
                                                  ],
                                                  "rangeYearPlaceholder": Array [
                                                    "Start year",
                                                    "End year",
                                                  ],
                                                  "timeSelect": "select time",
                                                  "today": "Today",
                                                  "weekPlaceholder": "Select week",
                                                  "weekSelect": "Choose a week",
                                                  "year": "Year",
                                                  "yearFormat": "YYYY",
                                                  "yearPlaceholder": "Select year",
                                                  "yearSelect": "Choose a year",
                                                }
                                              }
                                              nextIcon={
                                                <span
                                                  className="ant-picker-next-icon"
                                                />
                                              }
                                              onChange={[Function]}
                                              pickerRef={
                                                Object {
                                                  "current": Object {
                                                    "blur": [Function],
                                                    "focus": [Function],
                                                  },
                                                }
                                              }
                                              placeholder="Select date"
                                              prefixCls="ant-picker"
                                              prevIcon={
                                                <span
                                                  className="ant-picker-prev-icon"
                                                />
                                              }
                                              showToday={true}
                                              suffixIcon={<ForwardRef(CalendarOutlined) />}
                                              superNextIcon={
                                                <span
                                                  className="ant-picker-super-next-icon"
                                                />
                                              }
                                              superPrevIcon={
                                                <span
                                                  className="ant-picker-super-prev-icon"
                                                />
                                              }
                                              transitionName="slide-up"
                                              value={"2020-12-12T00:00:00.000Z"}
                                            >
                                              <PickerTrigger
                                                popupElement={
                                                  <div
                                                    className="ant-picker-panel-container"
                                                    onMouseDown={[Function]}
                                                  >
                                                    <PickerPanel
                                                      allowClear={true}
                                                      className="ant-picker-panel-focused"
                                                      clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                      components={
                                                        Object {
                                                          "button": [Function],
                                                          "rangeItem": [Function],
                                                        }
                                                      }
                                                      generateConfig={
                                                        Object {
                                                          "addDate": [Function],
                                                          "addMonth": [Function],
                                                          "addYear": [Function],
                                                          "getDate": [Function],
                                                          "getHour": [Function],
                                                          "getMinute": [Function],
                                                          "getMonth": [Function],
                                                          "getNow": [Function],
                                                          "getSecond": [Function],
                                                          "getWeekDay": [Function],
                                                          "getYear": [Function],
                                                          "isAfter": [Function],
                                                          "isValidate": [Function],
                                                          "locale": Object {
                                                            "format": [Function],
                                                            "getShortMonths": [Function],
                                                            "getShortWeekDays": [Function],
                                                            "getWeek": [Function],
                                                            "getWeekFirstDay": [Function],
                                                            "parse": [Function],
                                                          },
                                                          "setDate": [Function],
                                                          "setHour": [Function],
                                                          "setMinute": [Function],
                                                          "setMonth": [Function],
                                                          "setSecond": [Function],
                                                          "setYear": [Function],
                                                        }
                                                      }
                                                      id="create-claim_checked_date"
                                                      locale={
                                                        Object {
                                                          "backToToday": "Back to today",
                                                          "clear": "Clear",
                                                          "dateFormat": "M/D/YYYY",
                                                          "dateSelect": "select date",
                                                          "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                          "dayFormat": "D",
                                                          "decadeSelect": "Choose a decade",
                                                          "locale": "en_US",
                                                          "month": "Month",
                                                          "monthBeforeYear": true,
                                                          "monthPlaceholder": "Select month",
                                                          "monthSelect": "Choose a month",
                                                          "nextCentury": "Next century",
                                                          "nextDecade": "Next decade",
                                                          "nextMonth": "Next month (PageDown)",
                                                          "nextYear": "Next year (Control + right)",
                                                          "now": "Now",
                                                          "ok": "Ok",
                                                          "placeholder": "Select date",
                                                          "previousCentury": "Last century",
                                                          "previousDecade": "Last decade",
                                                          "previousMonth": "Previous month (PageUp)",
                                                          "previousYear": "Last year (Control + left)",
                                                          "quarterPlaceholder": "Select quarter",
                                                          "rangeMonthPlaceholder": Array [
                                                            "Start month",
                                                            "End month",
                                                          ],
                                                          "rangePlaceholder": Array [
                                                            "Start date",
                                                            "End date",
                                                          ],
                                                          "rangeWeekPlaceholder": Array [
                                                            "Start week",
                                                            "End week",
                                                          ],
                                                          "rangeYearPlaceholder": Array [
                                                            "Start year",
                                                            "End year",
                                                          ],
                                                          "timeSelect": "select time",
                                                          "today": "Today",
                                                          "weekPlaceholder": "Select week",
                                                          "weekSelect": "Choose a week",
                                                          "year": "Year",
                                                          "yearFormat": "YYYY",
                                                          "yearPlaceholder": "Select year",
                                                          "yearSelect": "Choose a year",
                                                        }
                                                      }
                                                      nextIcon={
                                                        <span
                                                          className="ant-picker-next-icon"
                                                        />
                                                      }
                                                      onChange={[Function]}
                                                      pickerRef={
                                                        Object {
                                                          "current": Object {
                                                            "blur": [Function],
                                                            "focus": [Function],
                                                          },
                                                        }
                                                      }
                                                      placeholder="Select date"
                                                      prefixCls="ant-picker"
                                                      prevIcon={
                                                        <span
                                                          className="ant-picker-prev-icon"
                                                        />
                                                      }
                                                      showToday={true}
                                                      suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                      superNextIcon={
                                                        <span
                                                          className="ant-picker-super-next-icon"
                                                        />
                                                      }
                                                      superPrevIcon={
                                                        <span
                                                          className="ant-picker-super-prev-icon"
                                                        />
                                                      }
                                                      tabIndex={-1}
                                                      transitionName="slide-up"
                                                      value={"2020-12-12T00:00:00.000Z"}
                                                    />
                                                  </div>
                                                }
                                                popupPlacement="bottomLeft"
                                                prefixCls="ant-picker"
                                                transitionName="slide-up"
                                                visible={false}
                                              >
                                                <Trigger
                                                  action={Array []}
                                                  afterPopupVisibleChange={[Function]}
                                                  autoDestroy={false}
                                                  blurDelay={0.15}
                                                  builtinPlacements={
                                                    Object {
                                                      "bottomLeft": Object {
                                                        "offset": Array [
                                                          0,
                                                          4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 1,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "tl",
                                                          "bl",
                                                        ],
                                                      },
                                                      "bottomRight": Object {
                                                        "offset": Array [
                                                          0,
                                                          4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 1,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "tr",
                                                          "br",
                                                        ],
                                                      },
                                                      "topLeft": Object {
                                                        "offset": Array [
                                                          0,
                                                          -4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 0,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "bl",
                                                          "tl",
                                                        ],
                                                      },
                                                      "topRight": Object {
                                                        "offset": Array [
                                                          0,
                                                          -4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 0,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "br",
                                                          "tr",
                                                        ],
                                                      },
                                                    }
                                                  }
                                                  defaultPopupVisible={false}
                                                  destroyPopupOnHide={false}
                                                  focusDelay={0}
                                                  getDocument={[Function]}
                                                  getPopupClassNameFromAlign={[Function]}
                                                  hideAction={Array []}
                                                  mask={false}
                                                  maskClosable={true}
                                                  mouseEnterDelay={0}
                                                  mouseLeaveDelay={0.1}
                                                  onPopupAlign={[Function]}
                                                  onPopupVisibleChange={[Function]}
                                                  popup={
                                                    <div
                                                      className="ant-picker-panel-container"
                                                      onMouseDown={[Function]}
                                                    >
                                                      <PickerPanel
                                                        allowClear={true}
                                                        className="ant-picker-panel-focused"
                                                        clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                        components={
                                                          Object {
                                                            "button": [Function],
                                                            "rangeItem": [Function],
                                                          }
                                                        }
                                                        generateConfig={
                                                          Object {
                                                            "addDate": [Function],
                                                            "addMonth": [Function],
                                                            "addYear": [Function],
                                                            "getDate": [Function],
                                                            "getHour": [Function],
                                                            "getMinute": [Function],
                                                            "getMonth": [Function],
                                                            "getNow": [Function],
                                                            "getSecond": [Function],
                                                            "getWeekDay": [Function],
                                                            "getYear": [Function],
                                                            "isAfter": [Function],
                                                            "isValidate": [Function],
                                                            "locale": Object {
                                                              "format": [Function],
                                                              "getShortMonths": [Function],
                                                              "getShortWeekDays": [Function],
                                                              "getWeek": [Function],
                                                              "getWeekFirstDay": [Function],
                                                              "parse": [Function],
                                                            },
                                                            "setDate": [Function],
                                                            "setHour": [Function],
                                                            "setMinute": [Function],
                                                            "setMonth": [Function],
                                                            "setSecond": [Function],
                                                            "setYear": [Function],
                                                          }
                                                        }
                                                        id="create-claim_checked_date"
                                                        locale={
                                                          Object {
                                                            "backToToday": "Back to today",
                                                            "clear": "Clear",
                                                            "dateFormat": "M/D/YYYY",
                                                            "dateSelect": "select date",
                                                            "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                            "dayFormat": "D",
                                                            "decadeSelect": "Choose a decade",
                                                            "locale": "en_US",
                                                            "month": "Month",
                                                            "monthBeforeYear": true,
                                                            "monthPlaceholder": "Select month",
                                                            "monthSelect": "Choose a month",
                                                            "nextCentury": "Next century",
                                                            "nextDecade": "Next decade",
                                                            "nextMonth": "Next month (PageDown)",
                                                            "nextYear": "Next year (Control + right)",
                                                            "now": "Now",
                                                            "ok": "Ok",
                                                            "placeholder": "Select date",
                                                            "previousCentury": "Last century",
                                                            "previousDecade": "Last decade",
                                                            "previousMonth": "Previous month (PageUp)",
                                                            "previousYear": "Last year (Control + left)",
                                                            "quarterPlaceholder": "Select quarter",
                                                            "rangeMonthPlaceholder": Array [
                                                              "Start month",
                                                              "End month",
                                                            ],
                                                            "rangePlaceholder": Array [
                                                              "Start date",
                                                              "End date",
                                                            ],
                                                            "rangeWeekPlaceholder": Array [
                                                              "Start week",
                                                              "End week",
                                                            ],
                                                            "rangeYearPlaceholder": Array [
                                                              "Start year",
                                                              "End year",
                                                            ],
                                                            "timeSelect": "select time",
                                                            "today": "Today",
                                                            "weekPlaceholder": "Select week",
                                                            "weekSelect": "Choose a week",
                                                            "year": "Year",
                                                            "yearFormat": "YYYY",
                                                            "yearPlaceholder": "Select year",
                                                            "yearSelect": "Choose a year",
                                                          }
                                                        }
                                                        nextIcon={
                                                          <span
                                                            className="ant-picker-next-icon"
                                                          />
                                                        }
                                                        onChange={[Function]}
                                                        pickerRef={
                                                          Object {
                                                            "current": Object {
                                                              "blur": [Function],
                                                              "focus": [Function],
                                                            },
                                                          }
                                                        }
                                                        placeholder="Select date"
                                                        prefixCls="ant-picker"
                                                        prevIcon={
                                                          <span
                                                            className="ant-picker-prev-icon"
                                                          />
                                                        }
                                                        showToday={true}
                                                        suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                        superNextIcon={
                                                          <span
                                                            className="ant-picker-super-next-icon"
                                                          />
                                                        }
                                                        superPrevIcon={
                                                          <span
                                                            className="ant-picker-super-prev-icon"
                                                          />
                                                        }
                                                        tabIndex={-1}
                                                        transitionName="slide-up"
                                                        value={"2020-12-12T00:00:00.000Z"}
                                                      />
                                                    </div>
                                                  }
                                                  popupAlign={Object {}}
                                                  popupClassName=""
                                                  popupPlacement="bottomLeft"
                                                  popupStyle={Object {}}
                                                  popupTransitionName="slide-up"
                                                  popupVisible={false}
                                                  prefixCls="ant-picker-dropdown"
                                                  showAction={Array []}
                                                >
                                                  <div
                                                    className="ant-picker"
                                                    key="trigger"
                                                    onMouseUp={[Function]}
                                                  >
                                                    <div
                                                      className="ant-picker-input"
                                                    >
                                                      <input
                                                        autoComplete="off"
                                                        id="create-claim_checked_date"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        onMouseDown={[Function]}
                                                        placeholder="Select date"
                                                        readOnly={true}
                                                        size={12}
                                                        title="2020-12-12"
                                                        value="2020-12-12"
                                                      />
                                                      <span
                                                        className="ant-picker-suffix"
                                                      >
                                                        <ForwardRef(CalendarOutlined)>
                                                          <AntdIcon
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "calendar",
                                                                "theme": "outlined",
                                                              }
                                                            }
                                                          >
                                                            <span
                                                              aria-label="calendar"
                                                              className="anticon anticon-calendar"
                                                              role="img"
                                                            >
                                                              <IconReact
                                                                className=""
                                                                icon={
                                                                  Object {
                                                                    "icon": Object {
                                                                      "attrs": Object {
                                                                        "focusable": "false",
                                                                        "viewBox": "64 64 896 896",
                                                                      },
                                                                      "children": Array [
                                                                        Object {
                                                                          "attrs": Object {
                                                                            "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                          },
                                                                          "tag": "path",
                                                                        },
                                                                      ],
                                                                      "tag": "svg",
                                                                    },
                                                                    "name": "calendar",
                                                                    "theme": "outlined",
                                                                  }
                                                                }
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className=""
                                                                  data-icon="calendar"
                                                                  fill="currentColor"
                                                                  focusable="false"
                                                                  height="1em"
                                                                  key="svg-calendar"
                                                                  viewBox="64 64 896 896"
                                                                  width="1em"
                                                                >
                                                                  <path
                                                                    d="M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z"
                                                                    key="svg-calendar-svg-0"
                                                                  />
                                                                </svg>
                                                              </IconReact>
                                                            </span>
                                                          </AntdIcon>
                                                        </ForwardRef(CalendarOutlined)>
                                                      </span>
                                                      <span
                                                        className="ant-picker-clear"
                                                        onMouseDown={[Function]}
                                                        onMouseUp={[Function]}
                                                      >
                                                        <ForwardRef(CloseCircleFilled)>
                                                          <AntdIcon
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "close-circle",
                                                                "theme": "filled",
                                                              }
                                                            }
                                                          >
                                                            <span
                                                              aria-label="close-circle"
                                                              className="anticon anticon-close-circle"
                                                              role="img"
                                                            >
                                                              <IconReact
                                                                className=""
                                                                icon={
                                                                  Object {
                                                                    "icon": Object {
                                                                      "attrs": Object {
                                                                        "focusable": "false",
                                                                        "viewBox": "64 64 896 896",
                                                                      },
                                                                      "children": Array [
                                                                        Object {
                                                                          "attrs": Object {
                                                                            "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                          },
                                                                          "tag": "path",
                                                                        },
                                                                      ],
                                                                      "tag": "svg",
                                                                    },
                                                                    "name": "close-circle",
                                                                    "theme": "filled",
                                                                  }
                                                                }
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className=""
                                                                  data-icon="close-circle"
                                                                  fill="currentColor"
                                                                  focusable="false"
                                                                  height="1em"
                                                                  key="svg-close-circle"
                                                                  viewBox="64 64 896 896"
                                                                  width="1em"
                                                                >
                                                                  <path
                                                                    d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z"
                                                                    key="svg-close-circle-svg-0"
                                                                  />
                                                                </svg>
                                                              </IconReact>
                                                            </span>
                                                          </AntdIcon>
                                                        </ForwardRef(CloseCircleFilled)>
                                                      </span>
                                                    </div>
                                                  </div>
                                                </Trigger>
                                              </PickerTrigger>
                                            </InnerPicker>
                                          </Picker>
                                        </LocaleReceiver>
                                      </Picker>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Claim Sources"
                >
                  <Row
                    className="ant-form-item"
                    key="row"
                  >
                    <div
                      className="ant-row ant-form-item"
                      style={Object {}}
                    >
                      <FormItemLabel
                        label="Claim Sources"
                        prefixCls="ant-form"
                        requiredMark={true}
                      >
                        <Col
                          className="ant-form-item-label"
                          offset={2}
                          span={8}
                        >
                          <div
                            className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                            style={Object {}}
                          >
                            <label
                              className=""
                              title="Claim Sources"
                            >
                              Claim Sources
                            </label>
                          </div>
                        </Col>
                      </FormItemLabel>
                      <FormItemInput
                        errors={Array []}
                        label="Claim Sources"
                        onDomErrorVisibleChange={[Function]}
                        prefixCls="ant-form"
                        status=""
                        validateStatus=""
                      >
                        <Col
                          className="ant-form-item-control"
                          offset={2}
                          span={20}
                        >
                          <div
                            className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                            style={Object {}}
                          >
                            <div
                              className="ant-form-item-control-input"
                            >
                              <div
                                className="ant-form-item-control-input-content"
                              >
                                <FormList
                                  label="Claim sources"
                                  name="claim_sources"
                                >
                                  <List
                                    label="Claim sources"
                                    name="claim_sources"
                                  >
                                    <WrapperField
                                      name={Array []}
                                      shouldUpdate={[Function]}
                                    >
                                      <Field
                                        fieldContext={
                                          Object {
                                            "__INTERNAL__": Object {
                                              "itemRef": [Function],
                                              "name": "create-claim",
                                            },
                                            "getFieldError": [Function],
                                            "getFieldInstance": [Function],
                                            "getFieldValue": [Function],
                                            "getFieldsError": [Function],
                                            "getFieldsValue": [Function],
                                            "getInternalHooks": [Function],
                                            "isFieldTouched": [Function],
                                            "isFieldValidating": [Function],
                                            "isFieldsTouched": [Function],
                                            "isFieldsValidating": [Function],
                                            "prefixName": Array [
                                              "claim_sources",
                                            ],
                                            "resetFields": [Function],
                                            "scrollToField": [Function],
                                            "setFields": [Function],
                                            "setFieldsValue": [Function],
                                            "submit": [Function],
                                            "validateFields": [Function],
                                            "validateTrigger": "onChange",
                                          }
                                        }
                                        key="_"
                                        name={Array []}
                                        shouldUpdate={[Function]}
                                        trigger="onChange"
                                        valuePropName="value"
                                      >
                                        <FormItem>
                                          <Row
                                            className="ant-form-item"
                                            key="row"
                                          >
                                            <div
                                              className="ant-row ant-form-item"
                                              style={Object {}}
                                            >
                                              <FormItemLabel
                                                prefixCls="ant-form"
                                                requiredMark={true}
                                              />
                                              <FormItemInput
                                                errors={Array []}
                                                onDomErrorVisibleChange={[Function]}
                                                prefixCls="ant-form"
                                                status=""
                                                validateStatus=""
                                              >
                                                <Col
                                                  className="ant-form-item-control"
                                                >
                                                  <div
                                                    className="ant-col ant-form-item-control"
                                                    style={Object {}}
                                                  >
                                                    <div
                                                      className="ant-form-item-control-input"
                                                    >
                                                      <div
                                                        className="ant-form-item-control-input-content"
                                                      >
                                                        <Button
                                                          block={true}
                                                          ghost={false}
                                                          htmlType="button"
                                                          icon={<ForwardRef(PlusOutlined) />}
                                                          loading={false}
                                                          onClick={[Function]}
                                                          type="dashed"
                                                        >
                                                          <Wave>
                                                            <button
                                                              className="ant-btn ant-btn-dashed ant-btn-block"
                                                              onClick={[Function]}
                                                              type="button"
                                                            >
                                                              <ForwardRef(PlusOutlined)>
                                                                <AntdIcon
                                                                  icon={
                                                                    Object {
                                                                      "icon": Object {
                                                                        "attrs": Object {
                                                                          "focusable": "false",
                                                                          "viewBox": "64 64 896 896",
                                                                        },
                                                                        "children": Array [
                                                                          Object {
                                                                            "attrs": Object {},
                                                                            "children": Array [
                                                                              Object {
                                                                                "attrs": Object {},
                                                                                "tag": "style",
                                                                              },
                                                                            ],
                                                                            "tag": "defs",
                                                                          },
                                                                          Object {
                                                                            "attrs": Object {
                                                                              "d": "M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z",
                                                                            },
                                                                            "tag": "path",
                                                                          },
                                                                          Object {
                                                                            "attrs": Object {
                                                                              "d": "M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z",
                                                                            },
                                                                            "tag": "path",
                                                                          },
                                                                        ],
                                                                        "tag": "svg",
                                                                      },
                                                                      "name": "plus",
                                                                      "theme": "outlined",
                                                                    }
                                                                  }
                                                                >
                                                                  <span
                                                                    aria-label="plus"
                                                                    className="anticon anticon-plus"
                                                                    role="img"
                                                                  >
                                                                    <IconReact
                                                                      className=""
                                                                      icon={
                                                                        Object {
                                                                          "icon": Object {
                                                                            "attrs": Object {
                                                                              "focusable": "false",
                                                                              "viewBox": "64 64 896 896",
                                                                            },
                                                                            "children": Array [
                                                                              Object {
                                                                                "attrs": Object {},
                                                                                "children": Array [
                                                                                  Object {
                                                                                    "attrs": Object {},
                                                                                    "tag": "style",
                                                                                  },
                                                                                ],
                                                                                "tag": "defs",
                                                                              },
                                                                              Object {
                                                                                "attrs": Object {
                                                                                  "d": "M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z",
                                                                                },
                                                                                "tag": "path",
                                                                              },
                                                                              Object {
                                                                                "attrs": Object {
                                                                                  "d": "M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z",
                                                                                },
                                                                                "tag": "path",
                                                                              },
                                                                            ],
                                                                            "tag": "svg",
                                                                          },
                                                                          "name": "plus",
                                                                          "theme": "outlined",
                                                                        }
                                                                      }
                                                                    >
                                                                      <svg
                                                                        aria-hidden="true"
                                                                        className=""
                                                                        data-icon="plus"
                                                                        fill="currentColor"
                                                                        focusable="false"
                                                                        height="1em"
                                                                        key="svg-plus"
                                                                        viewBox="64 64 896 896"
                                                                        width="1em"
                                                                      >
                                                                        <defs
                                                                          key="svg-plus-svg-0"
                                                                        >
                                                                          <style
                                                                            key="svg-plus-svg-0-defs-0"
                                                                          />
                                                                        </defs>
                                                                        <path
                                                                          d="M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z"
                                                                          key="svg-plus-svg-1"
                                                                        />
                                                                        <path
                                                                          d="M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z"
                                                                          key="svg-plus-svg-2"
                                                                        />
                                                                      </svg>
                                                                    </IconReact>
                                                                  </span>
                                                                </AntdIcon>
                                                              </ForwardRef(PlusOutlined)>
                                                              <span
                                                                key=".0"
                                                              >
                                                                Add Claim sources
                                                              </span>
                                                            </button>
                                                          </Wave>
                                                        </Button>
                                                      </div>
                                                    </div>
                                                    <ErrorList
                                                      errors={Array []}
                                                      onDomErrorVisibleChange={[Function]}
                                                    >
                                                      <CSSMotion
                                                        motionAppear={true}
                                                        motionDeadline={500}
                                                        motionName="show-help"
                                                        onLeaveEnd={[Function]}
                                                        removeOnLeave={true}
                                                        visible={false}
                                                      >
                                                        <DomWrapper />
                                                      </CSSMotion>
                                                    </ErrorList>
                                                  </div>
                                                </Col>
                                              </FormItemInput>
                                            </div>
                                          </Row>
                                        </FormItem>
                                      </Field>
                                    </WrapperField>
                                  </List>
                                </FormList>
                              </div>
                            </div>
                            <ErrorList
                              errors={Array []}
                              onDomErrorVisibleChange={[Function]}
                            >
                              <CSSMotion
                                motionAppear={true}
                                motionDeadline={500}
                                motionName="show-help"
                                onLeaveEnd={[Function]}
                                removeOnLeave={true}
                                visible={false}
                              >
                                <DomWrapper />
                              </CSSMotion>
                            </ErrorList>
                          </div>
                        </Col>
                      </FormItemInput>
                    </div>
                  </Row>
                </FormItem>
                <FormItem
                  label="Review Sources"
                >
                  <Row
                    className="ant-form-item"
                    key="row"
                  >
                    <div
                      className="ant-row ant-form-item"
                      style={Object {}}
                    >
                      <FormItemLabel
                        label="Review Sources"
                        prefixCls="ant-form"
                        requiredMark={true}
                      >
                        <Col
                          className="ant-form-item-label"
                          offset={2}
                          span={8}
                        >
                          <div
                            className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                            style={Object {}}
                          >
                            <label
                              className=""
                              title="Review Sources"
                            >
                              Review Sources
                            </label>
                          </div>
                        </Col>
                      </FormItemLabel>
                      <FormItemInput
                        errors={Array []}
                        label="Review Sources"
                        onDomErrorVisibleChange={[Function]}
                        prefixCls="ant-form"
                        status=""
                        validateStatus=""
                      >
                        <Col
                          className="ant-form-item-control"
                          offset={2}
                          span={20}
                        >
                          <div
                            className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                            style={Object {}}
                          >
                            <div
                              className="ant-form-item-control-input"
                            >
                              <div
                                className="ant-form-item-control-input-content"
                              >
                                <FormList
                                  label="Review sources"
                                  name="review_sources"
                                >
                                  <List
                                    label="Review sources"
                                    name="review_sources"
                                  >
                                    <WrapperField
                                      name={Array []}
                                      shouldUpdate={[Function]}
                                    >
                                      <Field
                                        fieldContext={
                                          Object {
                                            "__INTERNAL__": Object {
                                              "itemRef": [Function],
                                              "name": "create-claim",
                                            },
                                            "getFieldError": [Function],
                                            "getFieldInstance": [Function],
                                            "getFieldValue": [Function],
                                            "getFieldsError": [Function],
                                            "getFieldsValue": [Function],
                                            "getInternalHooks": [Function],
                                            "isFieldTouched": [Function],
                                            "isFieldValidating": [Function],
                                            "isFieldsTouched": [Function],
                                            "isFieldsValidating": [Function],
                                            "prefixName": Array [
                                              "review_sources",
                                            ],
                                            "resetFields": [Function],
                                            "scrollToField": [Function],
                                            "setFields": [Function],
                                            "setFieldsValue": [Function],
                                            "submit": [Function],
                                            "validateFields": [Function],
                                            "validateTrigger": "onChange",
                                          }
                                        }
                                        key="_"
                                        name={Array []}
                                        shouldUpdate={[Function]}
                                        trigger="onChange"
                                        valuePropName="value"
                                      >
                                        <FormItem>
                                          <Row
                                            className="ant-form-item"
                                            key="row"
                                          >
                                            <div
                                              className="ant-row ant-form-item"
                                              style={Object {}}
                                            >
                                              <FormItemLabel
                                                prefixCls="ant-form"
                                                requiredMark={true}
                                              />
                                              <FormItemInput
                                                errors={Array []}
                                                onDomErrorVisibleChange={[Function]}
                                                prefixCls="ant-form"
                                                status=""
                                                validateStatus=""
                                              >
                                                <Col
                                                  className="ant-form-item-control"
                                                >
                                                  <div
                                                    className="ant-col ant-form-item-control"
                                                    style={Object {}}
                                                  >
                                                    <div
                                                      className="ant-form-item-control-input"
                                                    >
                                                      <div
                                                        className="ant-form-item-control-input-content"
                                                      >
                                                        <Button
                                                          block={true}
                                                          ghost={false}
                                                          htmlType="button"
                                                          icon={<ForwardRef(PlusOutlined) />}
                                                          loading={false}
                                                          onClick={[Function]}
                                                          type="dashed"
                                                        >
                                                          <Wave>
                                                            <button
                                                              className="ant-btn ant-btn-dashed ant-btn-block"
                                                              onClick={[Function]}
                                                              type="button"
                                                            >
                                                              <ForwardRef(PlusOutlined)>
                                                                <AntdIcon
                                                                  icon={
                                                                    Object {
                                                                      "icon": Object {
                                                                        "attrs": Object {
                                                                          "focusable": "false",
                                                                          "viewBox": "64 64 896 896",
                                                                        },
                                                                        "children": Array [
                                                                          Object {
                                                                            "attrs": Object {},
                                                                            "children": Array [
                                                                              Object {
                                                                                "attrs": Object {},
                                                                                "tag": "style",
                                                                              },
                                                                            ],
                                                                            "tag": "defs",
                                                                          },
                                                                          Object {
                                                                            "attrs": Object {
                                                                              "d": "M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z",
                                                                            },
                                                                            "tag": "path",
                                                                          },
                                                                          Object {
                                                                            "attrs": Object {
                                                                              "d": "M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z",
                                                                            },
                                                                            "tag": "path",
                                                                          },
                                                                        ],
                                                                        "tag": "svg",
                                                                      },
                                                                      "name": "plus",
                                                                      "theme": "outlined",
                                                                    }
                                                                  }
                                                                >
                                                                  <span
                                                                    aria-label="plus"
                                                                    className="anticon anticon-plus"
                                                                    role="img"
                                                                  >
                                                                    <IconReact
                                                                      className=""
                                                                      icon={
                                                                        Object {
                                                                          "icon": Object {
                                                                            "attrs": Object {
                                                                              "focusable": "false",
                                                                              "viewBox": "64 64 896 896",
                                                                            },
                                                                            "children": Array [
                                                                              Object {
                                                                                "attrs": Object {},
                                                                                "children": Array [
                                                                                  Object {
                                                                                    "attrs": Object {},
                                                                                    "tag": "style",
                                                                                  },
                                                                                ],
                                                                                "tag": "defs",
                                                                              },
                                                                              Object {
                                                                                "attrs": Object {
                                                                                  "d": "M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z",
                                                                                },
                                                                                "tag": "path",
                                                                              },
                                                                              Object {
                                                                                "attrs": Object {
                                                                                  "d": "M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z",
                                                                                },
                                                                                "tag": "path",
                                                                              },
                                                                            ],
                                                                            "tag": "svg",
                                                                          },
                                                                          "name": "plus",
                                                                          "theme": "outlined",
                                                                        }
                                                                      }
                                                                    >
                                                                      <svg
                                                                        aria-hidden="true"
                                                                        className=""
                                                                        data-icon="plus"
                                                                        fill="currentColor"
                                                                        focusable="false"
                                                                        height="1em"
                                                                        key="svg-plus"
                                                                        viewBox="64 64 896 896"
                                                                        width="1em"
                                                                      >
                                                                        <defs
                                                                          key="svg-plus-svg-0"
                                                                        >
                                                                          <style
                                                                            key="svg-plus-svg-0-defs-0"
                                                                          />
                                                                        </defs>
                                                                        <path
                                                                          d="M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z"
                                                                          key="svg-plus-svg-1"
                                                                        />
                                                                        <path
                                                                          d="M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z"
                                                                          key="svg-plus-svg-2"
                                                                        />
                                                                      </svg>
                                                                    </IconReact>
                                                                  </span>
                                                                </AntdIcon>
                                                              </ForwardRef(PlusOutlined)>
                                                              <span
                                                                key=".0"
                                                              >
                                                                Add Review sources
                                                              </span>
                                                            </button>
                                                          </Wave>
                                                        </Button>
                                                      </div>
                                                    </div>
                                                    <ErrorList
                                                      errors={Array []}
                                                      onDomErrorVisibleChange={[Function]}
                                                    >
                                                      <CSSMotion
                                                        motionAppear={true}
                                                        motionDeadline={500}
                                                        motionName="show-help"
                                                        onLeaveEnd={[Function]}
                                                        removeOnLeave={true}
                                                        visible={false}
                                                      >
                                                        <DomWrapper />
                                                      </CSSMotion>
                                                    </ErrorList>
                                                  </div>
                                                </Col>
                                              </FormItemInput>
                                            </div>
                                          </Row>
                                        </FormItem>
                                      </Field>
                                    </WrapperField>
                                  </List>
                                </FormList>
                              </div>
                            </div>
                            <ErrorList
                              errors={Array []}
                              onDomErrorVisibleChange={[Function]}
                            >
                              <CSSMotion
                                motionAppear={true}
                                motionDeadline={500}
                                motionName="show-help"
                                onLeaveEnd={[Function]}
                                removeOnLeave={true}
                                visible={false}
                              >
                                <DomWrapper />
                              </CSSMotion>
                            </ErrorList>
                          </div>
                        </Col>
                      </FormItemInput>
                    </div>
                  </Row>
                </FormItem>
              </div>
              <FormItem>
                <Row
                  className="ant-form-item"
                  key="row"
                >
                  <div
                    className="ant-row ant-form-item"
                    style={Object {}}
                  >
                    <FormItemLabel
                      prefixCls="ant-form"
                      requiredMark={true}
                    />
                    <FormItemInput
                      errors={Array []}
                      onDomErrorVisibleChange={[Function]}
                      prefixCls="ant-form"
                      status=""
                      validateStatus=""
                    >
                      <Col
                        className="ant-form-item-control"
                        offset={2}
                        span={20}
                      >
                        <div
                          className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                          style={Object {}}
                        >
                          <div
                            className="ant-form-item-control-input"
                          >
                            <div
                              className="ant-form-item-control-input-content"
                            >
                              <Button
                                block={false}
                                disabled={false}
                                ghost={false}
                                htmlType="button"
                                loading={false}
                                onClick={[Function]}
                              >
                                <Wave>
                                  <button
                                    className="ant-btn"
                                    disabled={false}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <LoadingIcon
                                      existIcon={false}
                                      loading={false}
                                      prefixCls="ant-btn"
                                    >
                                      <CSSMotion
                                        motionName="ant-btn-loading-icon-motion"
                                        onAppearActive={[Function]}
                                        onAppearStart={[Function]}
                                        onEnterActive={[Function]}
                                        onEnterStart={[Function]}
                                        onLeaveActive={[Function]}
                                        onLeaveStart={[Function]}
                                        removeOnLeave={true}
                                        visible={false}
                                      >
                                        <DomWrapper />
                                      </CSSMotion>
                                    </LoadingIcon>
                                    <span
                                      key=".0"
                                    >
                                      Back
                                    </span>
                                  </button>
                                </Wave>
                              </Button>
                              <Button
                                block={false}
                                disabled={true}
                                ghost={false}
                                htmlType="submit"
                                loading={false}
                                type="primary"
                              >
                                <Wave>
                                  <button
                                    className="ant-btn ant-btn-primary"
                                    disabled={true}
                                    onClick={[Function]}
                                    type="submit"
                                  >
                                    <LoadingIcon
                                      existIcon={false}
                                      loading={false}
                                      prefixCls="ant-btn"
                                    >
                                      <CSSMotion
                                        motionName="ant-btn-loading-icon-motion"
                                        onAppearActive={[Function]}
                                        onAppearStart={[Function]}
                                        onEnterActive={[Function]}
                                        onEnterStart={[Function]}
                                        onLeaveActive={[Function]}
                                        onLeaveStart={[Function]}
                                        removeOnLeave={true}
                                        visible={false}
                                      >
                                        <DomWrapper />
                                      </CSSMotion>
                                    </LoadingIcon>
                                    <span
                                      key=".0"
                                    >
                                      Submit
                                    </span>
                                  </button>
                                </Wave>
                              </Button>
                            </div>
                          </div>
                          <ErrorList
                            errors={Array []}
                            onDomErrorVisibleChange={[Function]}
                          >
                            <CSSMotion
                              motionAppear={true}
                              motionDeadline={500}
                              motionName="show-help"
                              onLeaveEnd={[Function]}
                              removeOnLeave={true}
                              visible={false}
                            >
                              <DomWrapper />
                            </CSSMotion>
                          </ErrorList>
                        </div>
                      </Col>
                    </FormItemInput>
                  </div>
                </Row>
              </FormItem>
            </form>
          </ForwardRef(Form)>
        </SizeContextProvider>
      </ForwardRef(InternalForm)>
    </div>
  </ClaimForm>
</Provider>
`;

exports[`Claims Create Form component snapshot testing should match component with data 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <ClaimForm
    data={
      Object {
        "checked_date": "2020-12-12T00:00:00.000Z",
        "claim_date": "2020-12-12T00:00:00.000Z",
        "claim_sources": "claim_sources",
        "claimant": 1,
        "description": Object {
          "blocks": Array [
            Object {
              "data": Object {
                "level": 2,
                "text": "Editor.js",
              },
              "type": "header",
            },
            Object {
              "data": Object {
                "text": "Hey. Meet the new Editor. On this page you can see it in action — try to edit this text.",
              },
              "type": "paragraph",
            },
          ],
          "time": 1595747741807,
          "version": "2.18.0",
        },
        "rating": 1,
        "review": "review",
        "review_sources": "review_sources",
        "review_tag_line": "review_tag_line",
        "slug": "slug",
        "title": "title",
      }
    }
    onCreate={[MockFunction]}
  >
    <div>
      <Steps
        current={0}
        onChange={[Function]}
      >
        <Steps
          className=""
          current={0}
          direction="horizontal"
          iconPrefix="ant"
          icons={
            Object {
              "error": <ForwardRef(CloseOutlined)
                className="ant-steps-error-icon"
              />,
              "finish": <ForwardRef(CheckOutlined)
                className="ant-steps-finish-icon"
              />,
            }
          }
          initial={0}
          labelPlacement="horizontal"
          onChange={[Function]}
          prefixCls="ant-steps"
          progressDot={false}
          size=""
          status="process"
          stepIcon={[Function]}
          type="default"
        >
          <div
            className="ant-steps ant-steps-horizontal ant-steps-label-horizontal"
            style={Object {}}
          >
            <Step
              active={true}
              iconPrefix="ant"
              icons={
                Object {
                  "error": <ForwardRef(CloseOutlined)
                    className="ant-steps-error-icon"
                  />,
                  "finish": <ForwardRef(CheckOutlined)
                    className="ant-steps-finish-icon"
                  />,
                }
              }
              key="0"
              onStepClick={[Function]}
              prefixCls="ant-steps"
              progressDot={false}
              status="process"
              stepIcon={[Function]}
              stepIndex={0}
              stepNumber="1"
              title="Basic"
              wrapperStyle={Object {}}
            >
              <div
                className="ant-steps-item ant-steps-item-process ant-steps-item-active"
                style={Object {}}
              >
                <div
                  className="ant-steps-item-container"
                  onClick={[Function]}
                  role="button"
                  tabIndex={0}
                >
                  <div
                    className="ant-steps-item-tail"
                  />
                  <div
                    className="ant-steps-item-icon"
                  >
                    <span
                      className="ant-steps-icon"
                    >
                      1
                    </span>
                  </div>
                  <div
                    className="ant-steps-item-content"
                  >
                    <div
                      className="ant-steps-item-title"
                    >
                      Basic
                    </div>
                  </div>
                </div>
              </div>
            </Step>
            <Step
              active={false}
              iconPrefix="ant"
              icons={
                Object {
                  "error": <ForwardRef(CloseOutlined)
                    className="ant-steps-error-icon"
                  />,
                  "finish": <ForwardRef(CheckOutlined)
                    className="ant-steps-finish-icon"
                  />,
                }
              }
              key="1"
              onStepClick={[Function]}
              prefixCls="ant-steps"
              progressDot={false}
              status="wait"
              stepIcon={[Function]}
              stepIndex={1}
              stepNumber="2"
              title="Sources"
              wrapperStyle={Object {}}
            >
              <div
                className="ant-steps-item ant-steps-item-wait"
                style={Object {}}
              >
                <div
                  className="ant-steps-item-container"
                  onClick={[Function]}
                  role="button"
                  tabIndex={0}
                >
                  <div
                    className="ant-steps-item-tail"
                  />
                  <div
                    className="ant-steps-item-icon"
                  >
                    <span
                      className="ant-steps-icon"
                    >
                      2
                    </span>
                  </div>
                  <div
                    className="ant-steps-item-content"
                  >
                    <div
                      className="ant-steps-item-title"
                    >
                      Sources
                    </div>
                  </div>
                </div>
              </div>
            </Step>
          </div>
        </Steps>
      </Steps>
      <ForwardRef(InternalForm)
        form={
          Object {
            "__INTERNAL__": Object {
              "itemRef": [Function],
              "name": "create-claim",
            },
            "getFieldError": [Function],
            "getFieldInstance": [Function],
            "getFieldValue": [Function],
            "getFieldsError": [Function],
            "getFieldsValue": [Function],
            "getInternalHooks": [Function],
            "isFieldTouched": [Function],
            "isFieldValidating": [Function],
            "isFieldsTouched": [Function],
            "isFieldsValidating": [Function],
            "resetFields": [Function],
            "scrollToField": [Function],
            "setFields": [Function],
            "setFieldsValue": [Function],
            "submit": [Function],
            "validateFields": [Function],
          }
        }
        initialValues={
          Object {
            "checked_date": "2020-12-12T00:00:00.000Z",
            "claim_date": "2020-12-12T00:00:00.000Z",
            "claim_sources": "claim_sources",
            "claimant": 1,
            "description": Object {
              "blocks": Array [
                Object {
                  "data": Object {
                    "level": 2,
                    "text": "Editor.js",
                  },
                  "type": "header",
                },
                Object {
                  "data": Object {
                    "text": "Hey. Meet the new Editor. On this page you can see it in action — try to edit this text.",
                  },
                  "type": "paragraph",
                },
              ],
              "time": 1595747741807,
              "version": "2.18.0",
            },
            "rating": 1,
            "review": "review",
            "review_sources": "review_sources",
            "review_tag_line": "review_tag_line",
            "slug": "slug",
            "title": "title",
          }
        }
        labelCol={
          Object {
            "offset": 2,
            "span": 8,
          }
        }
        layout="vertical"
        name="create-claim"
        onFinish={[Function]}
        onFinishFailed={[Function]}
        onValuesChange={[Function]}
        scrollToFirstError={true}
        style={
          Object {
            "paddingTop": "24px",
          }
        }
        wrapperCol={
          Object {
            "offset": 2,
            "span": 20,
          }
        }
      >
        <SizeContextProvider>
          <ForwardRef(Form)
            className="ant-form ant-form-vertical"
            form={
              Object {
                "__INTERNAL__": Object {
                  "itemRef": [Function],
                  "name": "create-claim",
                },
                "getFieldError": [Function],
                "getFieldInstance": [Function],
                "getFieldValue": [Function],
                "getFieldsError": [Function],
                "getFieldsValue": [Function],
                "getInternalHooks": [Function],
                "isFieldTouched": [Function],
                "isFieldValidating": [Function],
                "isFieldsTouched": [Function],
                "isFieldsValidating": [Function],
                "resetFields": [Function],
                "scrollToField": [Function],
                "setFields": [Function],
                "setFieldsValue": [Function],
                "submit": [Function],
                "validateFields": [Function],
              }
            }
            id="create-claim"
            initialValues={
              Object {
                "checked_date": "2020-12-12T00:00:00.000Z",
                "claim_date": "2020-12-12T00:00:00.000Z",
                "claim_sources": "claim_sources",
                "claimant": 1,
                "description": Object {
                  "blocks": Array [
                    Object {
                      "data": Object {
                        "level": 2,
                        "text": "Editor.js",
                      },
                      "type": "header",
                    },
                    Object {
                      "data": Object {
                        "text": "Hey. Meet the new Editor. On this page you can see it in action — try to edit this text.",
                      },
                      "type": "paragraph",
                    },
                  ],
                  "time": 1595747741807,
                  "version": "2.18.0",
                },
                "rating": 1,
                "review": "review",
                "review_sources": "review_sources",
                "review_tag_line": "review_tag_line",
                "slug": "slug",
                "title": "title",
              }
            }
            name="create-claim"
            onFinish={[Function]}
            onFinishFailed={[Function]}
            onValuesChange={[Function]}
            style={
              Object {
                "paddingTop": "24px",
              }
            }
          >
            <form
              className="ant-form ant-form-vertical"
              id="create-claim"
              onSubmit={[Function]}
              style={
                Object {
                  "paddingTop": "24px",
                }
              }
            >
              <div
                style={
                  Object {
                    "display": "block",
                  }
                }
              >
                <FormItem
                  label="Claim"
                  name="claim"
                  rules={
                    Array [
                      Object {
                        "message": "Please input the Claim!",
                        "required": true,
                      },
                      Object {
                        "message": "Claim must be minimum 3 characters.",
                        "min": 3,
                      },
                      Object {
                        "max": 5000,
                        "message": "Claim must be maximum 5000 characters.",
                      },
                    ]
                  }
                >
                  <WrapperField
                    label="Claim"
                    messageVariables={
                      Object {
                        "label": "Claim",
                      }
                    }
                    name="claim"
                    onReset={[Function]}
                    rules={
                      Array [
                        Object {
                          "message": "Please input the Claim!",
                          "required": true,
                        },
                        Object {
                          "message": "Claim must be minimum 3 characters.",
                          "min": 3,
                        },
                        Object {
                          "max": 5000,
                          "message": "Claim must be maximum 5000 characters.",
                        },
                      ]
                    }
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_claim"
                      label="Claim"
                      messageVariables={
                        Object {
                          "label": "Claim",
                        }
                      }
                      name={
                        Array [
                          "claim",
                        ]
                      }
                      onReset={[Function]}
                      rules={
                        Array [
                          Object {
                            "message": "Please input the Claim!",
                            "required": true,
                          },
                          Object {
                            "message": "Claim must be minimum 3 characters.",
                            "min": 3,
                          },
                          Object {
                            "max": 5000,
                            "message": "Claim must be maximum 5000 characters.",
                          },
                        ]
                      }
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_claim"
                            label="Claim"
                            name="claim"
                            prefixCls="ant-form"
                            required={true}
                            requiredMark={true}
                            rules={
                              Array [
                                Object {
                                  "message": "Please input the Claim!",
                                  "required": true,
                                },
                                Object {
                                  "message": "Claim must be minimum 3 characters.",
                                  "min": 3,
                                },
                                Object {
                                  "max": 5000,
                                  "message": "Claim must be maximum 5000 characters.",
                                },
                              ]
                            }
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className="ant-form-item-required"
                                  htmlFor="create-claim_claim"
                                  title="Claim"
                                >
                                  Claim
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Claim"
                            name={
                              Array [
                                "claim",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            rules={
                              Array [
                                Object {
                                  "message": "Please input the Claim!",
                                  "required": true,
                                },
                                Object {
                                  "message": "Claim must be minimum 3 characters.",
                                  "min": 3,
                                },
                                Object {
                                  "max": 5000,
                                  "message": "Claim must be maximum 5000 characters.",
                                },
                              ]
                            }
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={1}
                                    >
                                      <TextArea
                                        id="create-claim_claim"
                                        onChange={[Function]}
                                        placeholder="Enter claim...."
                                        rows={6}
                                      >
                                        <ClearableLabeledInput
                                          bordered={true}
                                          element={
                                            <TextArea
                                              className=""
                                              id="create-claim_claim"
                                              onChange={[Function]}
                                              placeholder="Enter claim...."
                                              prefixCls="ant-input"
                                              rows={6}
                                            />
                                          }
                                          handleReset={[Function]}
                                          id="create-claim_claim"
                                          inputType="text"
                                          onChange={[Function]}
                                          placeholder="Enter claim...."
                                          prefixCls="ant-input"
                                          rows={6}
                                          triggerFocus={[Function]}
                                          value=""
                                        >
                                          <TextArea
                                            className=""
                                            id="create-claim_claim"
                                            onChange={[Function]}
                                            placeholder="Enter claim...."
                                            prefixCls="ant-input"
                                            rows={6}
                                            value=""
                                          >
                                            <ResizableTextArea
                                              className=""
                                              id="create-claim_claim"
                                              onChange={[Function]}
                                              onKeyDown={[Function]}
                                              placeholder="Enter claim...."
                                              prefixCls="ant-input"
                                              rows={6}
                                              value=""
                                            >
                                              <ResizeObserver
                                                disabled={true}
                                                onResize={[Function]}
                                              >
                                                <textarea
                                                  className="ant-input"
                                                  id="create-claim_claim"
                                                  onChange={[Function]}
                                                  onKeyDown={[Function]}
                                                  placeholder="Enter claim...."
                                                  rows={6}
                                                  style={Object {}}
                                                  value=""
                                                />
                                              </ResizeObserver>
                                            </ResizableTextArea>
                                          </TextArea>
                                        </ClearableLabeledInput>
                                      </TextArea>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Slug"
                  name="slug"
                  rules={
                    Array [
                      Object {
                        "message": "Please input the slug!",
                        "required": true,
                      },
                      Object {
                        "message": "Please enter valid slug!",
                        "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                      },
                      Object {
                        "max": 150,
                        "message": "Slug must be maximum 150 characters.",
                      },
                    ]
                  }
                >
                  <WrapperField
                    label="Slug"
                    messageVariables={
                      Object {
                        "label": "Slug",
                      }
                    }
                    name="slug"
                    onReset={[Function]}
                    rules={
                      Array [
                        Object {
                          "message": "Please input the slug!",
                          "required": true,
                        },
                        Object {
                          "message": "Please enter valid slug!",
                          "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                        },
                        Object {
                          "max": 150,
                          "message": "Slug must be maximum 150 characters.",
                        },
                      ]
                    }
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_slug"
                      label="Slug"
                      messageVariables={
                        Object {
                          "label": "Slug",
                        }
                      }
                      name={
                        Array [
                          "slug",
                        ]
                      }
                      onReset={[Function]}
                      rules={
                        Array [
                          Object {
                            "message": "Please input the slug!",
                            "required": true,
                          },
                          Object {
                            "message": "Please enter valid slug!",
                            "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                          },
                          Object {
                            "max": 150,
                            "message": "Slug must be maximum 150 characters.",
                          },
                        ]
                      }
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_slug"
                            label="Slug"
                            name="slug"
                            prefixCls="ant-form"
                            required={true}
                            requiredMark={true}
                            rules={
                              Array [
                                Object {
                                  "message": "Please input the slug!",
                                  "required": true,
                                },
                                Object {
                                  "message": "Please enter valid slug!",
                                  "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                                },
                                Object {
                                  "max": 150,
                                  "message": "Slug must be maximum 150 characters.",
                                },
                              ]
                            }
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className="ant-form-item-required"
                                  htmlFor="create-claim_slug"
                                  title="Slug"
                                >
                                  Slug
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Slug"
                            name={
                              Array [
                                "slug",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            rules={
                              Array [
                                Object {
                                  "message": "Please input the slug!",
                                  "required": true,
                                },
                                Object {
                                  "message": "Please enter valid slug!",
                                  "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                                },
                                Object {
                                  "max": 150,
                                  "message": "Slug must be maximum 150 characters.",
                                },
                              ]
                            }
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={1}
                                      value="slug"
                                    >
                                      <Input
                                        id="create-claim_slug"
                                        onChange={[Function]}
                                        type="text"
                                        value="slug"
                                      >
                                        <ClearableLabeledInput
                                          bordered={true}
                                          element={
                                            <input
                                              className="ant-input"
                                              id="create-claim_slug"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              onKeyDown={[Function]}
                                              type="text"
                                              value="slug"
                                            />
                                          }
                                          focused={false}
                                          handleReset={[Function]}
                                          id="create-claim_slug"
                                          inputType="input"
                                          onChange={[Function]}
                                          prefixCls="ant-input"
                                          triggerFocus={[Function]}
                                          type="text"
                                          value="slug"
                                        >
                                          <input
                                            className="ant-input"
                                            id="create-claim_slug"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            onKeyDown={[Function]}
                                            type="text"
                                            value="slug"
                                          />
                                        </ClearableLabeledInput>
                                      </Input>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Fact"
                  name="fact"
                >
                  <WrapperField
                    label="Fact"
                    messageVariables={
                      Object {
                        "label": "Fact",
                      }
                    }
                    name="fact"
                    onReset={[Function]}
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_fact"
                      label="Fact"
                      messageVariables={
                        Object {
                          "label": "Fact",
                        }
                      }
                      name={
                        Array [
                          "fact",
                        ]
                      }
                      onReset={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_fact"
                            label="Fact"
                            name="fact"
                            prefixCls="ant-form"
                            required={false}
                            requiredMark={true}
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className=""
                                  htmlFor="create-claim_fact"
                                  title="Fact"
                                >
                                  Fact
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Fact"
                            name={
                              Array [
                                "fact",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={1}
                                    >
                                      <TextArea
                                        id="create-claim_fact"
                                        onChange={[Function]}
                                        placeholder="Enter Fact ..."
                                        rows={6}
                                      >
                                        <ClearableLabeledInput
                                          bordered={true}
                                          element={
                                            <TextArea
                                              className=""
                                              id="create-claim_fact"
                                              onChange={[Function]}
                                              placeholder="Enter Fact ..."
                                              prefixCls="ant-input"
                                              rows={6}
                                            />
                                          }
                                          handleReset={[Function]}
                                          id="create-claim_fact"
                                          inputType="text"
                                          onChange={[Function]}
                                          placeholder="Enter Fact ..."
                                          prefixCls="ant-input"
                                          rows={6}
                                          triggerFocus={[Function]}
                                          value=""
                                        >
                                          <TextArea
                                            className=""
                                            id="create-claim_fact"
                                            onChange={[Function]}
                                            placeholder="Enter Fact ..."
                                            prefixCls="ant-input"
                                            rows={6}
                                            value=""
                                          >
                                            <ResizableTextArea
                                              className=""
                                              id="create-claim_fact"
                                              onChange={[Function]}
                                              onKeyDown={[Function]}
                                              placeholder="Enter Fact ..."
                                              prefixCls="ant-input"
                                              rows={6}
                                              value=""
                                            >
                                              <ResizeObserver
                                                disabled={true}
                                                onResize={[Function]}
                                              >
                                                <textarea
                                                  className="ant-input"
                                                  id="create-claim_fact"
                                                  onChange={[Function]}
                                                  onKeyDown={[Function]}
                                                  placeholder="Enter Fact ..."
                                                  rows={6}
                                                  style={Object {}}
                                                  value=""
                                                />
                                              </ResizeObserver>
                                            </ResizableTextArea>
                                          </TextArea>
                                        </ClearableLabeledInput>
                                      </TextArea>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Claimant"
                  name="claimant"
                  rules={
                    Array [
                      Object {
                        "message": "Please add claimant!",
                        "required": true,
                      },
                    ]
                  }
                >
                  <WrapperField
                    label="Claimant"
                    messageVariables={
                      Object {
                        "label": "Claimant",
                      }
                    }
                    name="claimant"
                    onReset={[Function]}
                    rules={
                      Array [
                        Object {
                          "message": "Please add claimant!",
                          "required": true,
                        },
                      ]
                    }
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_claimant"
                      label="Claimant"
                      messageVariables={
                        Object {
                          "label": "Claimant",
                        }
                      }
                      name={
                        Array [
                          "claimant",
                        ]
                      }
                      onReset={[Function]}
                      rules={
                        Array [
                          Object {
                            "message": "Please add claimant!",
                            "required": true,
                          },
                        ]
                      }
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_claimant"
                            label="Claimant"
                            name="claimant"
                            prefixCls="ant-form"
                            required={true}
                            requiredMark={true}
                            rules={
                              Array [
                                Object {
                                  "message": "Please add claimant!",
                                  "required": true,
                                },
                              ]
                            }
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className="ant-form-item-required"
                                  htmlFor="create-claim_claimant"
                                  title="Claimant"
                                >
                                  Claimant
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Claimant"
                            name={
                              Array [
                                "claimant",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            rules={
                              Array [
                                Object {
                                  "message": "Please add claimant!",
                                  "required": true,
                                },
                              ]
                            }
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={1}
                                      value={1}
                                    >
                                      <Selector
                                        action="Claimants"
                                        id="create-claim_claimant"
                                        onChange={[Function]}
                                        value={1}
                                      >
                                        <ForwardRef(InternalSelect)
                                          allowClear={true}
                                          bordered={true}
                                          defaultValue={
                                            Array [
                                              1,
                                            ]
                                          }
                                          filterOption={[Function]}
                                          getPopupContainer={[Function]}
                                          listHeight={128}
                                          loading={false}
                                          notFoundContent={null}
                                          onChange={[Function]}
                                          onPopupScroll={[Function]}
                                          onSearch={[Function]}
                                          placeholder="Select claimants"
                                        >
                                          <Select
                                            allowClear={true}
                                            className=""
                                            clearIcon={<ForwardRef(CloseCircleFilled) />}
                                            defaultValue={
                                              Array [
                                                1,
                                              ]
                                            }
                                            dropdownClassName=""
                                            filterOption={[Function]}
                                            getPopupContainer={[Function]}
                                            inputIcon={[Function]}
                                            listHeight={128}
                                            listItemHeight={24}
                                            loading={false}
                                            menuItemSelectedIcon={null}
                                            notFoundContent={null}
                                            onChange={[Function]}
                                            onPopupScroll={[Function]}
                                            onSearch={[Function]}
                                            placeholder="Select claimants"
                                            prefixCls="ant-select"
                                            removeIcon={<ForwardRef(CloseOutlined) />}
                                            transitionName="slide-up"
                                          >
                                            <ForwardRef(Select)
                                              allowClear={true}
                                              className=""
                                              clearIcon={<ForwardRef(CloseCircleFilled) />}
                                              defaultValue={
                                                Array [
                                                  1,
                                                ]
                                              }
                                              dropdownClassName=""
                                              filterOption={[Function]}
                                              getPopupContainer={[Function]}
                                              inputIcon={[Function]}
                                              listHeight={128}
                                              listItemHeight={24}
                                              loading={false}
                                              menuItemSelectedIcon={null}
                                              notFoundContent={null}
                                              onChange={[Function]}
                                              onPopupScroll={[Function]}
                                              onSearch={[Function]}
                                              placeholder="Select claimants"
                                              prefixCls="ant-select"
                                              removeIcon={<ForwardRef(CloseOutlined) />}
                                              transitionName="slide-up"
                                            >
                                              <div
                                                className="ant-select ant-select-single ant-select-allow-clear ant-select-show-arrow"
                                                onBlur={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                onKeyUp={[Function]}
                                                onMouseDown={[Function]}
                                              >
                                                <SelectTrigger
                                                  containerWidth={null}
                                                  dropdownClassName=""
                                                  empty={true}
                                                  getPopupContainer={[Function]}
                                                  getTriggerDOMNode={[Function]}
                                                  popupElement={
                                                    <ForwardRef(OptionList)
                                                      childrenAsData={true}
                                                      defaultActiveFirstOption={true}
                                                      flattenOptions={Array []}
                                                      height={128}
                                                      itemHeight={24}
                                                      menuItemSelectedIcon={null}
                                                      multiple={false}
                                                      notFoundContent={null}
                                                      onActiveValue={[Function]}
                                                      onMouseEnter={[Function]}
                                                      onScroll={[Function]}
                                                      onSelect={[Function]}
                                                      onToggleOpen={[Function]}
                                                      options={Array []}
                                                      prefixCls="ant-select"
                                                      searchValue=""
                                                      values={
                                                        Set {
                                                          1,
                                                        }
                                                      }
                                                      virtual={true}
                                                    />
                                                  }
                                                  prefixCls="ant-select"
                                                  transitionName="slide-up"
                                                  visible={false}
                                                >
                                                  <Trigger
                                                    action={Array []}
                                                    afterPopupVisibleChange={[Function]}
                                                    autoDestroy={false}
                                                    blurDelay={0.15}
                                                    builtinPlacements={
                                                      Object {
                                                        "bottomLeft": Object {
                                                          "offset": Array [
                                                            0,
                                                            4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "tl",
                                                            "bl",
                                                          ],
                                                        },
                                                        "bottomRight": Object {
                                                          "offset": Array [
                                                            0,
                                                            4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "tr",
                                                            "br",
                                                          ],
                                                        },
                                                        "topLeft": Object {
                                                          "offset": Array [
                                                            0,
                                                            -4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "bl",
                                                            "tl",
                                                          ],
                                                        },
                                                        "topRight": Object {
                                                          "offset": Array [
                                                            0,
                                                            -4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "br",
                                                            "tr",
                                                          ],
                                                        },
                                                      }
                                                    }
                                                    defaultPopupVisible={false}
                                                    destroyPopupOnHide={false}
                                                    focusDelay={0}
                                                    getDocument={[Function]}
                                                    getPopupClassNameFromAlign={[Function]}
                                                    getPopupContainer={[Function]}
                                                    getTriggerDOMNode={[Function]}
                                                    hideAction={Array []}
                                                    mask={false}
                                                    maskClosable={true}
                                                    mouseEnterDelay={0}
                                                    mouseLeaveDelay={0.1}
                                                    onPopupAlign={[Function]}
                                                    onPopupVisibleChange={[Function]}
                                                    popup={
                                                      <div>
                                                        <ForwardRef(OptionList)
                                                          childrenAsData={true}
                                                          defaultActiveFirstOption={true}
                                                          flattenOptions={Array []}
                                                          height={128}
                                                          itemHeight={24}
                                                          menuItemSelectedIcon={null}
                                                          multiple={false}
                                                          notFoundContent={null}
                                                          onActiveValue={[Function]}
                                                          onMouseEnter={[Function]}
                                                          onScroll={[Function]}
                                                          onSelect={[Function]}
                                                          onToggleOpen={[Function]}
                                                          options={Array []}
                                                          prefixCls="ant-select"
                                                          searchValue=""
                                                          values={
                                                            Set {
                                                              1,
                                                            }
                                                          }
                                                          virtual={true}
                                                        />
                                                      </div>
                                                    }
                                                    popupAlign={Object {}}
                                                    popupClassName="ant-select-dropdown-empty"
                                                    popupPlacement="bottomLeft"
                                                    popupStyle={
                                                      Object {
                                                        "minWidth": null,
                                                        "width": null,
                                                      }
                                                    }
                                                    popupTransitionName="slide-up"
                                                    popupVisible={false}
                                                    prefixCls="ant-select-dropdown"
                                                    showAction={Array []}
                                                  >
                                                    <Selector
                                                      accessibilityIndex={0}
                                                      activeValue={null}
                                                      allowClear={true}
                                                      className=""
                                                      clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                      defaultValue={
                                                        Array [
                                                          1,
                                                        ]
                                                      }
                                                      domRef={
                                                        Object {
                                                          "current": <div
                                                            class="ant-select-selector"
                                                          >
                                                            <span
                                                              class="ant-select-selection-search"
                                                            >
                                                              <input
                                                                aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                aria-autocomplete="list"
                                                                aria-controls="rc_select_TEST_OR_SSR_list"
                                                                aria-haspopup="listbox"
                                                                aria-owns="rc_select_TEST_OR_SSR_list"
                                                                autocomplete="off"
                                                                class="ant-select-selection-search-input"
                                                                id="rc_select_TEST_OR_SSR"
                                                                readonly=""
                                                                role="combobox"
                                                                style="opacity: 0;"
                                                                type="search"
                                                                unselectable="on"
                                                                value=""
                                                              />
                                                            </span>
                                                            <span
                                                              class="ant-select-selection-item"
                                                              title="1"
                                                            >
                                                              1
                                                            </span>
                                                          </div>,
                                                        }
                                                      }
                                                      dropdownClassName=""
                                                      filterOption={[Function]}
                                                      getPopupContainer={[Function]}
                                                      inputElement={null}
                                                      inputIcon={[Function]}
                                                      key="trigger"
                                                      listHeight={128}
                                                      listItemHeight={24}
                                                      loading={false}
                                                      menuItemSelectedIcon={null}
                                                      multiple={false}
                                                      notFoundContent={null}
                                                      onChange={[Function]}
                                                      onPopupScroll={[Function]}
                                                      onSearch={[Function]}
                                                      onSearchSubmit={[Function]}
                                                      onSelect={[Function]}
                                                      onToggleOpen={[Function]}
                                                      placeholder="Select claimants"
                                                      prefixCls="ant-select"
                                                      removeIcon={<ForwardRef(CloseOutlined) />}
                                                      searchValue=""
                                                      showSearch={false}
                                                      tokenWithEnter={false}
                                                      transitionName="slide-up"
                                                      values={
                                                        Array [
                                                          Object {
                                                            "disabled": undefined,
                                                            "key": 1,
                                                            "label": 1,
                                                            "value": 1,
                                                          },
                                                        ]
                                                      }
                                                    >
                                                      <div
                                                        className="ant-select-selector"
                                                        onClick={[Function]}
                                                        onMouseDown={[Function]}
                                                      >
                                                        <SingleSelector
                                                          accessibilityIndex={0}
                                                          activeValue={null}
                                                          allowClear={true}
                                                          className=""
                                                          clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                          defaultValue={
                                                            Array [
                                                              1,
                                                            ]
                                                          }
                                                          domRef={
                                                            Object {
                                                              "current": <div
                                                                class="ant-select-selector"
                                                              >
                                                                <span
                                                                  class="ant-select-selection-search"
                                                                >
                                                                  <input
                                                                    aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                    aria-autocomplete="list"
                                                                    aria-controls="rc_select_TEST_OR_SSR_list"
                                                                    aria-haspopup="listbox"
                                                                    aria-owns="rc_select_TEST_OR_SSR_list"
                                                                    autocomplete="off"
                                                                    class="ant-select-selection-search-input"
                                                                    id="rc_select_TEST_OR_SSR"
                                                                    readonly=""
                                                                    role="combobox"
                                                                    style="opacity: 0;"
                                                                    type="search"
                                                                    unselectable="on"
                                                                    value=""
                                                                  />
                                                                </span>
                                                                <span
                                                                  class="ant-select-selection-item"
                                                                  title="1"
                                                                >
                                                                  1
                                                                </span>
                                                              </div>,
                                                            }
                                                          }
                                                          dropdownClassName=""
                                                          filterOption={[Function]}
                                                          getPopupContainer={[Function]}
                                                          inputElement={null}
                                                          inputIcon={[Function]}
                                                          inputRef={
                                                            Object {
                                                              "current": <input
                                                                aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                aria-autocomplete="list"
                                                                aria-controls="rc_select_TEST_OR_SSR_list"
                                                                aria-haspopup="listbox"
                                                                aria-owns="rc_select_TEST_OR_SSR_list"
                                                                autocomplete="off"
                                                                class="ant-select-selection-search-input"
                                                                id="rc_select_TEST_OR_SSR"
                                                                readonly=""
                                                                role="combobox"
                                                                style="opacity: 0;"
                                                                type="search"
                                                                unselectable="on"
                                                                value=""
                                                              />,
                                                            }
                                                          }
                                                          listHeight={128}
                                                          listItemHeight={24}
                                                          loading={false}
                                                          menuItemSelectedIcon={null}
                                                          multiple={false}
                                                          notFoundContent={null}
                                                          onChange={[Function]}
                                                          onInputChange={[Function]}
                                                          onInputCompositionEnd={[Function]}
                                                          onInputCompositionStart={[Function]}
                                                          onInputKeyDown={[Function]}
                                                          onInputMouseDown={[Function]}
                                                          onInputPaste={[Function]}
                                                          onPopupScroll={[Function]}
                                                          onSearch={[Function]}
                                                          onSearchSubmit={[Function]}
                                                          onSelect={[Function]}
                                                          onToggleOpen={[Function]}
                                                          placeholder="Select claimants"
                                                          prefixCls="ant-select"
                                                          removeIcon={<ForwardRef(CloseOutlined) />}
                                                          searchValue=""
                                                          showSearch={false}
                                                          tokenWithEnter={false}
                                                          transitionName="slide-up"
                                                          values={
                                                            Array [
                                                              Object {
                                                                "disabled": undefined,
                                                                "key": 1,
                                                                "label": 1,
                                                                "value": 1,
                                                              },
                                                            ]
                                                          }
                                                        >
                                                          <span
                                                            className="ant-select-selection-search"
                                                          >
                                                            <Input
                                                              accessibilityIndex={0}
                                                              attrs={Object {}}
                                                              editable={false}
                                                              inputElement={null}
                                                              onChange={[Function]}
                                                              onCompositionEnd={[Function]}
                                                              onCompositionStart={[Function]}
                                                              onKeyDown={[Function]}
                                                              onMouseDown={[Function]}
                                                              onPaste={[Function]}
                                                              prefixCls="ant-select"
                                                              value=""
                                                            >
                                                              <input
                                                                aria-activedescendant="undefined_list_0"
                                                                aria-autocomplete="list"
                                                                aria-controls="undefined_list"
                                                                aria-haspopup="listbox"
                                                                aria-owns="undefined_list"
                                                                autoComplete="off"
                                                                className="ant-select-selection-search-input"
                                                                onChange={[Function]}
                                                                onCompositionEnd={[Function]}
                                                                onCompositionStart={[Function]}
                                                                onKeyDown={[Function]}
                                                                onMouseDown={[Function]}
                                                                onPaste={[Function]}
                                                                readOnly={true}
                                                                role="combobox"
                                                                style={
                                                                  Object {
                                                                    "opacity": 0,
                                                                  }
                                                                }
                                                                type="search"
                                                                unselectable="on"
                                                                value=""
                                                              />
                                                            </Input>
                                                          </span>
                                                          <span
                                                            className="ant-select-selection-item"
                                                            title="1"
                                                          >
                                                            1
                                                          </span>
                                                        </SingleSelector>
                                                      </div>
                                                    </Selector>
                                                  </Trigger>
                                                </SelectTrigger>
                                                <TransBtn
                                                  className="ant-select-arrow"
                                                  customizeIcon={[Function]}
                                                  customizeIconProps={
                                                    Object {
                                                      "focused": false,
                                                      "loading": false,
                                                      "open": undefined,
                                                      "searchValue": "",
                                                      "showSearch": false,
                                                    }
                                                  }
                                                >
                                                  <span
                                                    aria-hidden={true}
                                                    className="ant-select-arrow"
                                                    onMouseDown={[Function]}
                                                    style={
                                                      Object {
                                                        "WebkitUserSelect": "none",
                                                        "userSelect": "none",
                                                      }
                                                    }
                                                    unselectable="on"
                                                  >
                                                    <ForwardRef(DownOutlined)
                                                      className="ant-select-suffix"
                                                    >
                                                      <AntdIcon
                                                        className="ant-select-suffix"
                                                        icon={
                                                          Object {
                                                            "icon": Object {
                                                              "attrs": Object {
                                                                "focusable": "false",
                                                                "viewBox": "64 64 896 896",
                                                              },
                                                              "children": Array [
                                                                Object {
                                                                  "attrs": Object {
                                                                    "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                                                  },
                                                                  "tag": "path",
                                                                },
                                                              ],
                                                              "tag": "svg",
                                                            },
                                                            "name": "down",
                                                            "theme": "outlined",
                                                          }
                                                        }
                                                      >
                                                        <span
                                                          aria-label="down"
                                                          className="anticon anticon-down ant-select-suffix"
                                                          role="img"
                                                        >
                                                          <IconReact
                                                            className=""
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "down",
                                                                "theme": "outlined",
                                                              }
                                                            }
                                                          >
                                                            <svg
                                                              aria-hidden="true"
                                                              className=""
                                                              data-icon="down"
                                                              fill="currentColor"
                                                              focusable="false"
                                                              height="1em"
                                                              key="svg-down"
                                                              viewBox="64 64 896 896"
                                                              width="1em"
                                                            >
                                                              <path
                                                                d="M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z"
                                                                key="svg-down-svg-0"
                                                              />
                                                            </svg>
                                                          </IconReact>
                                                        </span>
                                                      </AntdIcon>
                                                    </ForwardRef(DownOutlined)>
                                                  </span>
                                                </TransBtn>
                                                <TransBtn
                                                  className="ant-select-clear"
                                                  customizeIcon={<ForwardRef(CloseCircleFilled) />}
                                                  onMouseDown={[Function]}
                                                >
                                                  <span
                                                    aria-hidden={true}
                                                    className="ant-select-clear"
                                                    onMouseDown={[Function]}
                                                    style={
                                                      Object {
                                                        "WebkitUserSelect": "none",
                                                        "userSelect": "none",
                                                      }
                                                    }
                                                    unselectable="on"
                                                  >
                                                    <ForwardRef(CloseCircleFilled)>
                                                      <AntdIcon
                                                        icon={
                                                          Object {
                                                            "icon": Object {
                                                              "attrs": Object {
                                                                "focusable": "false",
                                                                "viewBox": "64 64 896 896",
                                                              },
                                                              "children": Array [
                                                                Object {
                                                                  "attrs": Object {
                                                                    "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                  },
                                                                  "tag": "path",
                                                                },
                                                              ],
                                                              "tag": "svg",
                                                            },
                                                            "name": "close-circle",
                                                            "theme": "filled",
                                                          }
                                                        }
                                                      >
                                                        <span
                                                          aria-label="close-circle"
                                                          className="anticon anticon-close-circle"
                                                          role="img"
                                                        >
                                                          <IconReact
                                                            className=""
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "close-circle",
                                                                "theme": "filled",
                                                              }
                                                            }
                                                          >
                                                            <svg
                                                              aria-hidden="true"
                                                              className=""
                                                              data-icon="close-circle"
                                                              fill="currentColor"
                                                              focusable="false"
                                                              height="1em"
                                                              key="svg-close-circle"
                                                              viewBox="64 64 896 896"
                                                              width="1em"
                                                            >
                                                              <path
                                                                d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z"
                                                                key="svg-close-circle-svg-0"
                                                              />
                                                            </svg>
                                                          </IconReact>
                                                        </span>
                                                      </AntdIcon>
                                                    </ForwardRef(CloseCircleFilled)>
                                                  </span>
                                                </TransBtn>
                                              </div>
                                            </ForwardRef(Select)>
                                          </Select>
                                        </ForwardRef(InternalSelect)>
                                      </Selector>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Rating"
                  name="rating"
                  rules={
                    Array [
                      Object {
                        "message": "Please add rating!",
                        "required": true,
                      },
                    ]
                  }
                >
                  <WrapperField
                    label="Rating"
                    messageVariables={
                      Object {
                        "label": "Rating",
                      }
                    }
                    name="rating"
                    onReset={[Function]}
                    rules={
                      Array [
                        Object {
                          "message": "Please add rating!",
                          "required": true,
                        },
                      ]
                    }
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_rating"
                      label="Rating"
                      messageVariables={
                        Object {
                          "label": "Rating",
                        }
                      }
                      name={
                        Array [
                          "rating",
                        ]
                      }
                      onReset={[Function]}
                      rules={
                        Array [
                          Object {
                            "message": "Please add rating!",
                            "required": true,
                          },
                        ]
                      }
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_rating"
                            label="Rating"
                            name="rating"
                            prefixCls="ant-form"
                            required={true}
                            requiredMark={true}
                            rules={
                              Array [
                                Object {
                                  "message": "Please add rating!",
                                  "required": true,
                                },
                              ]
                            }
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className="ant-form-item-required"
                                  htmlFor="create-claim_rating"
                                  title="Rating"
                                >
                                  Rating
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Rating"
                            name={
                              Array [
                                "rating",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            rules={
                              Array [
                                Object {
                                  "message": "Please add rating!",
                                  "required": true,
                                },
                              ]
                            }
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={1}
                                      value={1}
                                    >
                                      <Selector
                                        action="Ratings"
                                        id="create-claim_rating"
                                        onChange={[Function]}
                                        value={1}
                                      >
                                        <ForwardRef(InternalSelect)
                                          allowClear={true}
                                          bordered={true}
                                          defaultValue={
                                            Array [
                                              1,
                                            ]
                                          }
                                          filterOption={[Function]}
                                          getPopupContainer={[Function]}
                                          listHeight={128}
                                          loading={false}
                                          notFoundContent={null}
                                          onChange={[Function]}
                                          onPopupScroll={[Function]}
                                          onSearch={[Function]}
                                          placeholder="Select ratings"
                                        >
                                          <Select
                                            allowClear={true}
                                            className=""
                                            clearIcon={<ForwardRef(CloseCircleFilled) />}
                                            defaultValue={
                                              Array [
                                                1,
                                              ]
                                            }
                                            dropdownClassName=""
                                            filterOption={[Function]}
                                            getPopupContainer={[Function]}
                                            inputIcon={[Function]}
                                            listHeight={128}
                                            listItemHeight={24}
                                            loading={false}
                                            menuItemSelectedIcon={null}
                                            notFoundContent={null}
                                            onChange={[Function]}
                                            onPopupScroll={[Function]}
                                            onSearch={[Function]}
                                            placeholder="Select ratings"
                                            prefixCls="ant-select"
                                            removeIcon={<ForwardRef(CloseOutlined) />}
                                            transitionName="slide-up"
                                          >
                                            <ForwardRef(Select)
                                              allowClear={true}
                                              className=""
                                              clearIcon={<ForwardRef(CloseCircleFilled) />}
                                              defaultValue={
                                                Array [
                                                  1,
                                                ]
                                              }
                                              dropdownClassName=""
                                              filterOption={[Function]}
                                              getPopupContainer={[Function]}
                                              inputIcon={[Function]}
                                              listHeight={128}
                                              listItemHeight={24}
                                              loading={false}
                                              menuItemSelectedIcon={null}
                                              notFoundContent={null}
                                              onChange={[Function]}
                                              onPopupScroll={[Function]}
                                              onSearch={[Function]}
                                              placeholder="Select ratings"
                                              prefixCls="ant-select"
                                              removeIcon={<ForwardRef(CloseOutlined) />}
                                              transitionName="slide-up"
                                            >
                                              <div
                                                className="ant-select ant-select-single ant-select-allow-clear ant-select-show-arrow"
                                                onBlur={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                onKeyUp={[Function]}
                                                onMouseDown={[Function]}
                                              >
                                                <SelectTrigger
                                                  containerWidth={null}
                                                  dropdownClassName=""
                                                  empty={true}
                                                  getPopupContainer={[Function]}
                                                  getTriggerDOMNode={[Function]}
                                                  popupElement={
                                                    <ForwardRef(OptionList)
                                                      childrenAsData={true}
                                                      defaultActiveFirstOption={true}
                                                      flattenOptions={Array []}
                                                      height={128}
                                                      itemHeight={24}
                                                      menuItemSelectedIcon={null}
                                                      multiple={false}
                                                      notFoundContent={null}
                                                      onActiveValue={[Function]}
                                                      onMouseEnter={[Function]}
                                                      onScroll={[Function]}
                                                      onSelect={[Function]}
                                                      onToggleOpen={[Function]}
                                                      options={Array []}
                                                      prefixCls="ant-select"
                                                      searchValue=""
                                                      values={
                                                        Set {
                                                          1,
                                                        }
                                                      }
                                                      virtual={true}
                                                    />
                                                  }
                                                  prefixCls="ant-select"
                                                  transitionName="slide-up"
                                                  visible={false}
                                                >
                                                  <Trigger
                                                    action={Array []}
                                                    afterPopupVisibleChange={[Function]}
                                                    autoDestroy={false}
                                                    blurDelay={0.15}
                                                    builtinPlacements={
                                                      Object {
                                                        "bottomLeft": Object {
                                                          "offset": Array [
                                                            0,
                                                            4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "tl",
                                                            "bl",
                                                          ],
                                                        },
                                                        "bottomRight": Object {
                                                          "offset": Array [
                                                            0,
                                                            4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "tr",
                                                            "br",
                                                          ],
                                                        },
                                                        "topLeft": Object {
                                                          "offset": Array [
                                                            0,
                                                            -4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "bl",
                                                            "tl",
                                                          ],
                                                        },
                                                        "topRight": Object {
                                                          "offset": Array [
                                                            0,
                                                            -4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "br",
                                                            "tr",
                                                          ],
                                                        },
                                                      }
                                                    }
                                                    defaultPopupVisible={false}
                                                    destroyPopupOnHide={false}
                                                    focusDelay={0}
                                                    getDocument={[Function]}
                                                    getPopupClassNameFromAlign={[Function]}
                                                    getPopupContainer={[Function]}
                                                    getTriggerDOMNode={[Function]}
                                                    hideAction={Array []}
                                                    mask={false}
                                                    maskClosable={true}
                                                    mouseEnterDelay={0}
                                                    mouseLeaveDelay={0.1}
                                                    onPopupAlign={[Function]}
                                                    onPopupVisibleChange={[Function]}
                                                    popup={
                                                      <div>
                                                        <ForwardRef(OptionList)
                                                          childrenAsData={true}
                                                          defaultActiveFirstOption={true}
                                                          flattenOptions={Array []}
                                                          height={128}
                                                          itemHeight={24}
                                                          menuItemSelectedIcon={null}
                                                          multiple={false}
                                                          notFoundContent={null}
                                                          onActiveValue={[Function]}
                                                          onMouseEnter={[Function]}
                                                          onScroll={[Function]}
                                                          onSelect={[Function]}
                                                          onToggleOpen={[Function]}
                                                          options={Array []}
                                                          prefixCls="ant-select"
                                                          searchValue=""
                                                          values={
                                                            Set {
                                                              1,
                                                            }
                                                          }
                                                          virtual={true}
                                                        />
                                                      </div>
                                                    }
                                                    popupAlign={Object {}}
                                                    popupClassName="ant-select-dropdown-empty"
                                                    popupPlacement="bottomLeft"
                                                    popupStyle={
                                                      Object {
                                                        "minWidth": null,
                                                        "width": null,
                                                      }
                                                    }
                                                    popupTransitionName="slide-up"
                                                    popupVisible={false}
                                                    prefixCls="ant-select-dropdown"
                                                    showAction={Array []}
                                                  >
                                                    <Selector
                                                      accessibilityIndex={0}
                                                      activeValue={null}
                                                      allowClear={true}
                                                      className=""
                                                      clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                      defaultValue={
                                                        Array [
                                                          1,
                                                        ]
                                                      }
                                                      domRef={
                                                        Object {
                                                          "current": <div
                                                            class="ant-select-selector"
                                                          >
                                                            <span
                                                              class="ant-select-selection-search"
                                                            >
                                                              <input
                                                                aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                aria-autocomplete="list"
                                                                aria-controls="rc_select_TEST_OR_SSR_list"
                                                                aria-haspopup="listbox"
                                                                aria-owns="rc_select_TEST_OR_SSR_list"
                                                                autocomplete="off"
                                                                class="ant-select-selection-search-input"
                                                                id="rc_select_TEST_OR_SSR"
                                                                readonly=""
                                                                role="combobox"
                                                                style="opacity: 0;"
                                                                type="search"
                                                                unselectable="on"
                                                                value=""
                                                              />
                                                            </span>
                                                            <span
                                                              class="ant-select-selection-item"
                                                              title="1"
                                                            >
                                                              1
                                                            </span>
                                                          </div>,
                                                        }
                                                      }
                                                      dropdownClassName=""
                                                      filterOption={[Function]}
                                                      getPopupContainer={[Function]}
                                                      inputElement={null}
                                                      inputIcon={[Function]}
                                                      key="trigger"
                                                      listHeight={128}
                                                      listItemHeight={24}
                                                      loading={false}
                                                      menuItemSelectedIcon={null}
                                                      multiple={false}
                                                      notFoundContent={null}
                                                      onChange={[Function]}
                                                      onPopupScroll={[Function]}
                                                      onSearch={[Function]}
                                                      onSearchSubmit={[Function]}
                                                      onSelect={[Function]}
                                                      onToggleOpen={[Function]}
                                                      placeholder="Select ratings"
                                                      prefixCls="ant-select"
                                                      removeIcon={<ForwardRef(CloseOutlined) />}
                                                      searchValue=""
                                                      showSearch={false}
                                                      tokenWithEnter={false}
                                                      transitionName="slide-up"
                                                      values={
                                                        Array [
                                                          Object {
                                                            "disabled": undefined,
                                                            "key": 1,
                                                            "label": 1,
                                                            "value": 1,
                                                          },
                                                        ]
                                                      }
                                                    >
                                                      <div
                                                        className="ant-select-selector"
                                                        onClick={[Function]}
                                                        onMouseDown={[Function]}
                                                      >
                                                        <SingleSelector
                                                          accessibilityIndex={0}
                                                          activeValue={null}
                                                          allowClear={true}
                                                          className=""
                                                          clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                          defaultValue={
                                                            Array [
                                                              1,
                                                            ]
                                                          }
                                                          domRef={
                                                            Object {
                                                              "current": <div
                                                                class="ant-select-selector"
                                                              >
                                                                <span
                                                                  class="ant-select-selection-search"
                                                                >
                                                                  <input
                                                                    aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                    aria-autocomplete="list"
                                                                    aria-controls="rc_select_TEST_OR_SSR_list"
                                                                    aria-haspopup="listbox"
                                                                    aria-owns="rc_select_TEST_OR_SSR_list"
                                                                    autocomplete="off"
                                                                    class="ant-select-selection-search-input"
                                                                    id="rc_select_TEST_OR_SSR"
                                                                    readonly=""
                                                                    role="combobox"
                                                                    style="opacity: 0;"
                                                                    type="search"
                                                                    unselectable="on"
                                                                    value=""
                                                                  />
                                                                </span>
                                                                <span
                                                                  class="ant-select-selection-item"
                                                                  title="1"
                                                                >
                                                                  1
                                                                </span>
                                                              </div>,
                                                            }
                                                          }
                                                          dropdownClassName=""
                                                          filterOption={[Function]}
                                                          getPopupContainer={[Function]}
                                                          inputElement={null}
                                                          inputIcon={[Function]}
                                                          inputRef={
                                                            Object {
                                                              "current": <input
                                                                aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                aria-autocomplete="list"
                                                                aria-controls="rc_select_TEST_OR_SSR_list"
                                                                aria-haspopup="listbox"
                                                                aria-owns="rc_select_TEST_OR_SSR_list"
                                                                autocomplete="off"
                                                                class="ant-select-selection-search-input"
                                                                id="rc_select_TEST_OR_SSR"
                                                                readonly=""
                                                                role="combobox"
                                                                style="opacity: 0;"
                                                                type="search"
                                                                unselectable="on"
                                                                value=""
                                                              />,
                                                            }
                                                          }
                                                          listHeight={128}
                                                          listItemHeight={24}
                                                          loading={false}
                                                          menuItemSelectedIcon={null}
                                                          multiple={false}
                                                          notFoundContent={null}
                                                          onChange={[Function]}
                                                          onInputChange={[Function]}
                                                          onInputCompositionEnd={[Function]}
                                                          onInputCompositionStart={[Function]}
                                                          onInputKeyDown={[Function]}
                                                          onInputMouseDown={[Function]}
                                                          onInputPaste={[Function]}
                                                          onPopupScroll={[Function]}
                                                          onSearch={[Function]}
                                                          onSearchSubmit={[Function]}
                                                          onSelect={[Function]}
                                                          onToggleOpen={[Function]}
                                                          placeholder="Select ratings"
                                                          prefixCls="ant-select"
                                                          removeIcon={<ForwardRef(CloseOutlined) />}
                                                          searchValue=""
                                                          showSearch={false}
                                                          tokenWithEnter={false}
                                                          transitionName="slide-up"
                                                          values={
                                                            Array [
                                                              Object {
                                                                "disabled": undefined,
                                                                "key": 1,
                                                                "label": 1,
                                                                "value": 1,
                                                              },
                                                            ]
                                                          }
                                                        >
                                                          <span
                                                            className="ant-select-selection-search"
                                                          >
                                                            <Input
                                                              accessibilityIndex={0}
                                                              attrs={Object {}}
                                                              editable={false}
                                                              inputElement={null}
                                                              onChange={[Function]}
                                                              onCompositionEnd={[Function]}
                                                              onCompositionStart={[Function]}
                                                              onKeyDown={[Function]}
                                                              onMouseDown={[Function]}
                                                              onPaste={[Function]}
                                                              prefixCls="ant-select"
                                                              value=""
                                                            >
                                                              <input
                                                                aria-activedescendant="undefined_list_0"
                                                                aria-autocomplete="list"
                                                                aria-controls="undefined_list"
                                                                aria-haspopup="listbox"
                                                                aria-owns="undefined_list"
                                                                autoComplete="off"
                                                                className="ant-select-selection-search-input"
                                                                onChange={[Function]}
                                                                onCompositionEnd={[Function]}
                                                                onCompositionStart={[Function]}
                                                                onKeyDown={[Function]}
                                                                onMouseDown={[Function]}
                                                                onPaste={[Function]}
                                                                readOnly={true}
                                                                role="combobox"
                                                                style={
                                                                  Object {
                                                                    "opacity": 0,
                                                                  }
                                                                }
                                                                type="search"
                                                                unselectable="on"
                                                                value=""
                                                              />
                                                            </Input>
                                                          </span>
                                                          <span
                                                            className="ant-select-selection-item"
                                                            title="1"
                                                          >
                                                            1
                                                          </span>
                                                        </SingleSelector>
                                                      </div>
                                                    </Selector>
                                                  </Trigger>
                                                </SelectTrigger>
                                                <TransBtn
                                                  className="ant-select-arrow"
                                                  customizeIcon={[Function]}
                                                  customizeIconProps={
                                                    Object {
                                                      "focused": false,
                                                      "loading": false,
                                                      "open": undefined,
                                                      "searchValue": "",
                                                      "showSearch": false,
                                                    }
                                                  }
                                                >
                                                  <span
                                                    aria-hidden={true}
                                                    className="ant-select-arrow"
                                                    onMouseDown={[Function]}
                                                    style={
                                                      Object {
                                                        "WebkitUserSelect": "none",
                                                        "userSelect": "none",
                                                      }
                                                    }
                                                    unselectable="on"
                                                  >
                                                    <ForwardRef(DownOutlined)
                                                      className="ant-select-suffix"
                                                    >
                                                      <AntdIcon
                                                        className="ant-select-suffix"
                                                        icon={
                                                          Object {
                                                            "icon": Object {
                                                              "attrs": Object {
                                                                "focusable": "false",
                                                                "viewBox": "64 64 896 896",
                                                              },
                                                              "children": Array [
                                                                Object {
                                                                  "attrs": Object {
                                                                    "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                                                  },
                                                                  "tag": "path",
                                                                },
                                                              ],
                                                              "tag": "svg",
                                                            },
                                                            "name": "down",
                                                            "theme": "outlined",
                                                          }
                                                        }
                                                      >
                                                        <span
                                                          aria-label="down"
                                                          className="anticon anticon-down ant-select-suffix"
                                                          role="img"
                                                        >
                                                          <IconReact
                                                            className=""
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "down",
                                                                "theme": "outlined",
                                                              }
                                                            }
                                                          >
                                                            <svg
                                                              aria-hidden="true"
                                                              className=""
                                                              data-icon="down"
                                                              fill="currentColor"
                                                              focusable="false"
                                                              height="1em"
                                                              key="svg-down"
                                                              viewBox="64 64 896 896"
                                                              width="1em"
                                                            >
                                                              <path
                                                                d="M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z"
                                                                key="svg-down-svg-0"
                                                              />
                                                            </svg>
                                                          </IconReact>
                                                        </span>
                                                      </AntdIcon>
                                                    </ForwardRef(DownOutlined)>
                                                  </span>
                                                </TransBtn>
                                                <TransBtn
                                                  className="ant-select-clear"
                                                  customizeIcon={<ForwardRef(CloseCircleFilled) />}
                                                  onMouseDown={[Function]}
                                                >
                                                  <span
                                                    aria-hidden={true}
                                                    className="ant-select-clear"
                                                    onMouseDown={[Function]}
                                                    style={
                                                      Object {
                                                        "WebkitUserSelect": "none",
                                                        "userSelect": "none",
                                                      }
                                                    }
                                                    unselectable="on"
                                                  >
                                                    <ForwardRef(CloseCircleFilled)>
                                                      <AntdIcon
                                                        icon={
                                                          Object {
                                                            "icon": Object {
                                                              "attrs": Object {
                                                                "focusable": "false",
                                                                "viewBox": "64 64 896 896",
                                                              },
                                                              "children": Array [
                                                                Object {
                                                                  "attrs": Object {
                                                                    "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                  },
                                                                  "tag": "path",
                                                                },
                                                              ],
                                                              "tag": "svg",
                                                            },
                                                            "name": "close-circle",
                                                            "theme": "filled",
                                                          }
                                                        }
                                                      >
                                                        <span
                                                          aria-label="close-circle"
                                                          className="anticon anticon-close-circle"
                                                          role="img"
                                                        >
                                                          <IconReact
                                                            className=""
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "close-circle",
                                                                "theme": "filled",
                                                              }
                                                            }
                                                          >
                                                            <svg
                                                              aria-hidden="true"
                                                              className=""
                                                              data-icon="close-circle"
                                                              fill="currentColor"
                                                              focusable="false"
                                                              height="1em"
                                                              key="svg-close-circle"
                                                              viewBox="64 64 896 896"
                                                              width="1em"
                                                            >
                                                              <path
                                                                d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z"
                                                                key="svg-close-circle-svg-0"
                                                              />
                                                            </svg>
                                                          </IconReact>
                                                        </span>
                                                      </AntdIcon>
                                                    </ForwardRef(CloseCircleFilled)>
                                                  </span>
                                                </TransBtn>
                                              </div>
                                            </ForwardRef(Select)>
                                          </Select>
                                        </ForwardRef(InternalSelect)>
                                      </Selector>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Description"
                  name="description"
                >
                  <WrapperField
                    label="Description"
                    messageVariables={
                      Object {
                        "label": "Description",
                      }
                    }
                    name="description"
                    onReset={[Function]}
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_description"
                      label="Description"
                      messageVariables={
                        Object {
                          "label": "Description",
                        }
                      }
                      name={
                        Array [
                          "description",
                        ]
                      }
                      onReset={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_description"
                            label="Description"
                            name="description"
                            prefixCls="ant-form"
                            required={false}
                            requiredMark={true}
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className=""
                                  htmlFor="create-claim_description"
                                  title="Description"
                                >
                                  Description
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Description"
                            name={
                              Array [
                                "description",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={1}
                                      value={
                                        Object {
                                          "blocks": Array [
                                            Object {
                                              "data": Object {
                                                "level": 2,
                                                "text": "Editor.js",
                                              },
                                              "type": "header",
                                            },
                                            Object {
                                              "data": Object {
                                                "text": "Hey. Meet the new Editor. On this page you can see it in action — try to edit this text.",
                                              },
                                              "type": "paragraph",
                                            },
                                          ],
                                          "time": 1595747741807,
                                          "version": "2.18.0",
                                        }
                                      }
                                    >
                                      <Editor
                                        id="create-claim_description"
                                        onChange={[Function]}
                                        placeholder="Enter Description..."
                                        value={
                                          Object {
                                            "blocks": Array [
                                              Object {
                                                "data": Object {
                                                  "level": 2,
                                                  "text": "Editor.js",
                                                },
                                                "type": "header",
                                              },
                                              Object {
                                                "data": Object {
                                                  "text": "Hey. Meet the new Editor. On this page you can see it in action — try to edit this text.",
                                                },
                                                "type": "paragraph",
                                              },
                                            ],
                                            "time": 1595747741807,
                                            "version": "2.18.0",
                                          }
                                        }
                                      >
                                        <div
                                          style={null}
                                        />
                                      </Editor>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
              </div>
              <div
                style={
                  Object {
                    "display": "none",
                  }
                }
              >
                <FormItem
                  label="Claim Date"
                  name="claim_date"
                >
                  <WrapperField
                    label="Claim Date"
                    messageVariables={
                      Object {
                        "label": "Claim Date",
                      }
                    }
                    name="claim_date"
                    onReset={[Function]}
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_claim_date"
                      label="Claim Date"
                      messageVariables={
                        Object {
                          "label": "Claim Date",
                        }
                      }
                      name={
                        Array [
                          "claim_date",
                        ]
                      }
                      onReset={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_claim_date"
                            label="Claim Date"
                            name="claim_date"
                            prefixCls="ant-form"
                            required={false}
                            requiredMark={true}
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className=""
                                  htmlFor="create-claim_claim_date"
                                  title="Claim Date"
                                >
                                  Claim Date
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Claim Date"
                            name={
                              Array [
                                "claim_date",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={1}
                                      value={"2020-12-12T00:00:00.000Z"}
                                    >
                                      <Picker
                                        id="create-claim_claim_date"
                                        onChange={[Function]}
                                        value={"2020-12-12T00:00:00.000Z"}
                                      >
                                        <LocaleReceiver
                                          componentName="DatePicker"
                                          defaultLocale={[Function]}
                                        >
                                          <Picker
                                            allowClear={true}
                                            className=""
                                            clearIcon={<ForwardRef(CloseCircleFilled) />}
                                            components={
                                              Object {
                                                "button": [Function],
                                                "rangeItem": [Function],
                                              }
                                            }
                                            generateConfig={
                                              Object {
                                                "addDate": [Function],
                                                "addMonth": [Function],
                                                "addYear": [Function],
                                                "getDate": [Function],
                                                "getHour": [Function],
                                                "getMinute": [Function],
                                                "getMonth": [Function],
                                                "getNow": [Function],
                                                "getSecond": [Function],
                                                "getWeekDay": [Function],
                                                "getYear": [Function],
                                                "isAfter": [Function],
                                                "isValidate": [Function],
                                                "locale": Object {
                                                  "format": [Function],
                                                  "getShortMonths": [Function],
                                                  "getShortWeekDays": [Function],
                                                  "getWeek": [Function],
                                                  "getWeekFirstDay": [Function],
                                                  "parse": [Function],
                                                },
                                                "setDate": [Function],
                                                "setHour": [Function],
                                                "setMinute": [Function],
                                                "setMonth": [Function],
                                                "setSecond": [Function],
                                                "setYear": [Function],
                                              }
                                            }
                                            id="create-claim_claim_date"
                                            locale={
                                              Object {
                                                "backToToday": "Back to today",
                                                "clear": "Clear",
                                                "dateFormat": "M/D/YYYY",
                                                "dateSelect": "select date",
                                                "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                "dayFormat": "D",
                                                "decadeSelect": "Choose a decade",
                                                "locale": "en_US",
                                                "month": "Month",
                                                "monthBeforeYear": true,
                                                "monthPlaceholder": "Select month",
                                                "monthSelect": "Choose a month",
                                                "nextCentury": "Next century",
                                                "nextDecade": "Next decade",
                                                "nextMonth": "Next month (PageDown)",
                                                "nextYear": "Next year (Control + right)",
                                                "now": "Now",
                                                "ok": "Ok",
                                                "placeholder": "Select date",
                                                "previousCentury": "Last century",
                                                "previousDecade": "Last decade",
                                                "previousMonth": "Previous month (PageUp)",
                                                "previousYear": "Last year (Control + left)",
                                                "quarterPlaceholder": "Select quarter",
                                                "rangeMonthPlaceholder": Array [
                                                  "Start month",
                                                  "End month",
                                                ],
                                                "rangePlaceholder": Array [
                                                  "Start date",
                                                  "End date",
                                                ],
                                                "rangeWeekPlaceholder": Array [
                                                  "Start week",
                                                  "End week",
                                                ],
                                                "rangeYearPlaceholder": Array [
                                                  "Start year",
                                                  "End year",
                                                ],
                                                "timeSelect": "select time",
                                                "today": "Today",
                                                "weekPlaceholder": "Select week",
                                                "weekSelect": "Choose a week",
                                                "year": "Year",
                                                "yearFormat": "YYYY",
                                                "yearPlaceholder": "Select year",
                                                "yearSelect": "Choose a year",
                                              }
                                            }
                                            nextIcon={
                                              <span
                                                className="ant-picker-next-icon"
                                              />
                                            }
                                            onChange={[Function]}
                                            placeholder="Select date"
                                            prefixCls="ant-picker"
                                            prevIcon={
                                              <span
                                                className="ant-picker-prev-icon"
                                              />
                                            }
                                            showToday={true}
                                            suffixIcon={<ForwardRef(CalendarOutlined) />}
                                            superNextIcon={
                                              <span
                                                className="ant-picker-super-next-icon"
                                              />
                                            }
                                            superPrevIcon={
                                              <span
                                                className="ant-picker-super-prev-icon"
                                              />
                                            }
                                            transitionName="slide-up"
                                            value={"2020-12-12T00:00:00.000Z"}
                                          >
                                            <InnerPicker
                                              allowClear={true}
                                              className=""
                                              clearIcon={<ForwardRef(CloseCircleFilled) />}
                                              components={
                                                Object {
                                                  "button": [Function],
                                                  "rangeItem": [Function],
                                                }
                                              }
                                              generateConfig={
                                                Object {
                                                  "addDate": [Function],
                                                  "addMonth": [Function],
                                                  "addYear": [Function],
                                                  "getDate": [Function],
                                                  "getHour": [Function],
                                                  "getMinute": [Function],
                                                  "getMonth": [Function],
                                                  "getNow": [Function],
                                                  "getSecond": [Function],
                                                  "getWeekDay": [Function],
                                                  "getYear": [Function],
                                                  "isAfter": [Function],
                                                  "isValidate": [Function],
                                                  "locale": Object {
                                                    "format": [Function],
                                                    "getShortMonths": [Function],
                                                    "getShortWeekDays": [Function],
                                                    "getWeek": [Function],
                                                    "getWeekFirstDay": [Function],
                                                    "parse": [Function],
                                                  },
                                                  "setDate": [Function],
                                                  "setHour": [Function],
                                                  "setMinute": [Function],
                                                  "setMonth": [Function],
                                                  "setSecond": [Function],
                                                  "setYear": [Function],
                                                }
                                              }
                                              id="create-claim_claim_date"
                                              locale={
                                                Object {
                                                  "backToToday": "Back to today",
                                                  "clear": "Clear",
                                                  "dateFormat": "M/D/YYYY",
                                                  "dateSelect": "select date",
                                                  "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                  "dayFormat": "D",
                                                  "decadeSelect": "Choose a decade",
                                                  "locale": "en_US",
                                                  "month": "Month",
                                                  "monthBeforeYear": true,
                                                  "monthPlaceholder": "Select month",
                                                  "monthSelect": "Choose a month",
                                                  "nextCentury": "Next century",
                                                  "nextDecade": "Next decade",
                                                  "nextMonth": "Next month (PageDown)",
                                                  "nextYear": "Next year (Control + right)",
                                                  "now": "Now",
                                                  "ok": "Ok",
                                                  "placeholder": "Select date",
                                                  "previousCentury": "Last century",
                                                  "previousDecade": "Last decade",
                                                  "previousMonth": "Previous month (PageUp)",
                                                  "previousYear": "Last year (Control + left)",
                                                  "quarterPlaceholder": "Select quarter",
                                                  "rangeMonthPlaceholder": Array [
                                                    "Start month",
                                                    "End month",
                                                  ],
                                                  "rangePlaceholder": Array [
                                                    "Start date",
                                                    "End date",
                                                  ],
                                                  "rangeWeekPlaceholder": Array [
                                                    "Start week",
                                                    "End week",
                                                  ],
                                                  "rangeYearPlaceholder": Array [
                                                    "Start year",
                                                    "End year",
                                                  ],
                                                  "timeSelect": "select time",
                                                  "today": "Today",
                                                  "weekPlaceholder": "Select week",
                                                  "weekSelect": "Choose a week",
                                                  "year": "Year",
                                                  "yearFormat": "YYYY",
                                                  "yearPlaceholder": "Select year",
                                                  "yearSelect": "Choose a year",
                                                }
                                              }
                                              nextIcon={
                                                <span
                                                  className="ant-picker-next-icon"
                                                />
                                              }
                                              onChange={[Function]}
                                              pickerRef={
                                                Object {
                                                  "current": Object {
                                                    "blur": [Function],
                                                    "focus": [Function],
                                                  },
                                                }
                                              }
                                              placeholder="Select date"
                                              prefixCls="ant-picker"
                                              prevIcon={
                                                <span
                                                  className="ant-picker-prev-icon"
                                                />
                                              }
                                              showToday={true}
                                              suffixIcon={<ForwardRef(CalendarOutlined) />}
                                              superNextIcon={
                                                <span
                                                  className="ant-picker-super-next-icon"
                                                />
                                              }
                                              superPrevIcon={
                                                <span
                                                  className="ant-picker-super-prev-icon"
                                                />
                                              }
                                              transitionName="slide-up"
                                              value={"2020-12-12T00:00:00.000Z"}
                                            >
                                              <PickerTrigger
                                                popupElement={
                                                  <div
                                                    className="ant-picker-panel-container"
                                                    onMouseDown={[Function]}
                                                  >
                                                    <PickerPanel
                                                      allowClear={true}
                                                      className="ant-picker-panel-focused"
                                                      clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                      components={
                                                        Object {
                                                          "button": [Function],
                                                          "rangeItem": [Function],
                                                        }
                                                      }
                                                      generateConfig={
                                                        Object {
                                                          "addDate": [Function],
                                                          "addMonth": [Function],
                                                          "addYear": [Function],
                                                          "getDate": [Function],
                                                          "getHour": [Function],
                                                          "getMinute": [Function],
                                                          "getMonth": [Function],
                                                          "getNow": [Function],
                                                          "getSecond": [Function],
                                                          "getWeekDay": [Function],
                                                          "getYear": [Function],
                                                          "isAfter": [Function],
                                                          "isValidate": [Function],
                                                          "locale": Object {
                                                            "format": [Function],
                                                            "getShortMonths": [Function],
                                                            "getShortWeekDays": [Function],
                                                            "getWeek": [Function],
                                                            "getWeekFirstDay": [Function],
                                                            "parse": [Function],
                                                          },
                                                          "setDate": [Function],
                                                          "setHour": [Function],
                                                          "setMinute": [Function],
                                                          "setMonth": [Function],
                                                          "setSecond": [Function],
                                                          "setYear": [Function],
                                                        }
                                                      }
                                                      id="create-claim_claim_date"
                                                      locale={
                                                        Object {
                                                          "backToToday": "Back to today",
                                                          "clear": "Clear",
                                                          "dateFormat": "M/D/YYYY",
                                                          "dateSelect": "select date",
                                                          "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                          "dayFormat": "D",
                                                          "decadeSelect": "Choose a decade",
                                                          "locale": "en_US",
                                                          "month": "Month",
                                                          "monthBeforeYear": true,
                                                          "monthPlaceholder": "Select month",
                                                          "monthSelect": "Choose a month",
                                                          "nextCentury": "Next century",
                                                          "nextDecade": "Next decade",
                                                          "nextMonth": "Next month (PageDown)",
                                                          "nextYear": "Next year (Control + right)",
                                                          "now": "Now",
                                                          "ok": "Ok",
                                                          "placeholder": "Select date",
                                                          "previousCentury": "Last century",
                                                          "previousDecade": "Last decade",
                                                          "previousMonth": "Previous month (PageUp)",
                                                          "previousYear": "Last year (Control + left)",
                                                          "quarterPlaceholder": "Select quarter",
                                                          "rangeMonthPlaceholder": Array [
                                                            "Start month",
                                                            "End month",
                                                          ],
                                                          "rangePlaceholder": Array [
                                                            "Start date",
                                                            "End date",
                                                          ],
                                                          "rangeWeekPlaceholder": Array [
                                                            "Start week",
                                                            "End week",
                                                          ],
                                                          "rangeYearPlaceholder": Array [
                                                            "Start year",
                                                            "End year",
                                                          ],
                                                          "timeSelect": "select time",
                                                          "today": "Today",
                                                          "weekPlaceholder": "Select week",
                                                          "weekSelect": "Choose a week",
                                                          "year": "Year",
                                                          "yearFormat": "YYYY",
                                                          "yearPlaceholder": "Select year",
                                                          "yearSelect": "Choose a year",
                                                        }
                                                      }
                                                      nextIcon={
                                                        <span
                                                          className="ant-picker-next-icon"
                                                        />
                                                      }
                                                      onChange={[Function]}
                                                      pickerRef={
                                                        Object {
                                                          "current": Object {
                                                            "blur": [Function],
                                                            "focus": [Function],
                                                          },
                                                        }
                                                      }
                                                      placeholder="Select date"
                                                      prefixCls="ant-picker"
                                                      prevIcon={
                                                        <span
                                                          className="ant-picker-prev-icon"
                                                        />
                                                      }
                                                      showToday={true}
                                                      suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                      superNextIcon={
                                                        <span
                                                          className="ant-picker-super-next-icon"
                                                        />
                                                      }
                                                      superPrevIcon={
                                                        <span
                                                          className="ant-picker-super-prev-icon"
                                                        />
                                                      }
                                                      tabIndex={-1}
                                                      transitionName="slide-up"
                                                      value={"2020-12-12T00:00:00.000Z"}
                                                    />
                                                  </div>
                                                }
                                                popupPlacement="bottomLeft"
                                                prefixCls="ant-picker"
                                                transitionName="slide-up"
                                                visible={false}
                                              >
                                                <Trigger
                                                  action={Array []}
                                                  afterPopupVisibleChange={[Function]}
                                                  autoDestroy={false}
                                                  blurDelay={0.15}
                                                  builtinPlacements={
                                                    Object {
                                                      "bottomLeft": Object {
                                                        "offset": Array [
                                                          0,
                                                          4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 1,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "tl",
                                                          "bl",
                                                        ],
                                                      },
                                                      "bottomRight": Object {
                                                        "offset": Array [
                                                          0,
                                                          4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 1,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "tr",
                                                          "br",
                                                        ],
                                                      },
                                                      "topLeft": Object {
                                                        "offset": Array [
                                                          0,
                                                          -4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 0,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "bl",
                                                          "tl",
                                                        ],
                                                      },
                                                      "topRight": Object {
                                                        "offset": Array [
                                                          0,
                                                          -4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 0,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "br",
                                                          "tr",
                                                        ],
                                                      },
                                                    }
                                                  }
                                                  defaultPopupVisible={false}
                                                  destroyPopupOnHide={false}
                                                  focusDelay={0}
                                                  getDocument={[Function]}
                                                  getPopupClassNameFromAlign={[Function]}
                                                  hideAction={Array []}
                                                  mask={false}
                                                  maskClosable={true}
                                                  mouseEnterDelay={0}
                                                  mouseLeaveDelay={0.1}
                                                  onPopupAlign={[Function]}
                                                  onPopupVisibleChange={[Function]}
                                                  popup={
                                                    <div
                                                      className="ant-picker-panel-container"
                                                      onMouseDown={[Function]}
                                                    >
                                                      <PickerPanel
                                                        allowClear={true}
                                                        className="ant-picker-panel-focused"
                                                        clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                        components={
                                                          Object {
                                                            "button": [Function],
                                                            "rangeItem": [Function],
                                                          }
                                                        }
                                                        generateConfig={
                                                          Object {
                                                            "addDate": [Function],
                                                            "addMonth": [Function],
                                                            "addYear": [Function],
                                                            "getDate": [Function],
                                                            "getHour": [Function],
                                                            "getMinute": [Function],
                                                            "getMonth": [Function],
                                                            "getNow": [Function],
                                                            "getSecond": [Function],
                                                            "getWeekDay": [Function],
                                                            "getYear": [Function],
                                                            "isAfter": [Function],
                                                            "isValidate": [Function],
                                                            "locale": Object {
                                                              "format": [Function],
                                                              "getShortMonths": [Function],
                                                              "getShortWeekDays": [Function],
                                                              "getWeek": [Function],
                                                              "getWeekFirstDay": [Function],
                                                              "parse": [Function],
                                                            },
                                                            "setDate": [Function],
                                                            "setHour": [Function],
                                                            "setMinute": [Function],
                                                            "setMonth": [Function],
                                                            "setSecond": [Function],
                                                            "setYear": [Function],
                                                          }
                                                        }
                                                        id="create-claim_claim_date"
                                                        locale={
                                                          Object {
                                                            "backToToday": "Back to today",
                                                            "clear": "Clear",
                                                            "dateFormat": "M/D/YYYY",
                                                            "dateSelect": "select date",
                                                            "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                            "dayFormat": "D",
                                                            "decadeSelect": "Choose a decade",
                                                            "locale": "en_US",
                                                            "month": "Month",
                                                            "monthBeforeYear": true,
                                                            "monthPlaceholder": "Select month",
                                                            "monthSelect": "Choose a month",
                                                            "nextCentury": "Next century",
                                                            "nextDecade": "Next decade",
                                                            "nextMonth": "Next month (PageDown)",
                                                            "nextYear": "Next year (Control + right)",
                                                            "now": "Now",
                                                            "ok": "Ok",
                                                            "placeholder": "Select date",
                                                            "previousCentury": "Last century",
                                                            "previousDecade": "Last decade",
                                                            "previousMonth": "Previous month (PageUp)",
                                                            "previousYear": "Last year (Control + left)",
                                                            "quarterPlaceholder": "Select quarter",
                                                            "rangeMonthPlaceholder": Array [
                                                              "Start month",
                                                              "End month",
                                                            ],
                                                            "rangePlaceholder": Array [
                                                              "Start date",
                                                              "End date",
                                                            ],
                                                            "rangeWeekPlaceholder": Array [
                                                              "Start week",
                                                              "End week",
                                                            ],
                                                            "rangeYearPlaceholder": Array [
                                                              "Start year",
                                                              "End year",
                                                            ],
                                                            "timeSelect": "select time",
                                                            "today": "Today",
                                                            "weekPlaceholder": "Select week",
                                                            "weekSelect": "Choose a week",
                                                            "year": "Year",
                                                            "yearFormat": "YYYY",
                                                            "yearPlaceholder": "Select year",
                                                            "yearSelect": "Choose a year",
                                                          }
                                                        }
                                                        nextIcon={
                                                          <span
                                                            className="ant-picker-next-icon"
                                                          />
                                                        }
                                                        onChange={[Function]}
                                                        pickerRef={
                                                          Object {
                                                            "current": Object {
                                                              "blur": [Function],
                                                              "focus": [Function],
                                                            },
                                                          }
                                                        }
                                                        placeholder="Select date"
                                                        prefixCls="ant-picker"
                                                        prevIcon={
                                                          <span
                                                            className="ant-picker-prev-icon"
                                                          />
                                                        }
                                                        showToday={true}
                                                        suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                        superNextIcon={
                                                          <span
                                                            className="ant-picker-super-next-icon"
                                                          />
                                                        }
                                                        superPrevIcon={
                                                          <span
                                                            className="ant-picker-super-prev-icon"
                                                          />
                                                        }
                                                        tabIndex={-1}
                                                        transitionName="slide-up"
                                                        value={"2020-12-12T00:00:00.000Z"}
                                                      />
                                                    </div>
                                                  }
                                                  popupAlign={Object {}}
                                                  popupClassName=""
                                                  popupPlacement="bottomLeft"
                                                  popupStyle={Object {}}
                                                  popupTransitionName="slide-up"
                                                  popupVisible={false}
                                                  prefixCls="ant-picker-dropdown"
                                                  showAction={Array []}
                                                >
                                                  <div
                                                    className="ant-picker"
                                                    key="trigger"
                                                    onMouseUp={[Function]}
                                                  >
                                                    <div
                                                      className="ant-picker-input"
                                                    >
                                                      <input
                                                        autoComplete="off"
                                                        id="create-claim_claim_date"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        onMouseDown={[Function]}
                                                        placeholder="Select date"
                                                        readOnly={true}
                                                        size={12}
                                                        title=""
                                                        value=""
                                                      />
                                                      <span
                                                        className="ant-picker-suffix"
                                                      >
                                                        <ForwardRef(CalendarOutlined)>
                                                          <AntdIcon
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "calendar",
                                                                "theme": "outlined",
                                                              }
                                                            }
                                                          >
                                                            <span
                                                              aria-label="calendar"
                                                              className="anticon anticon-calendar"
                                                              role="img"
                                                            >
                                                              <IconReact
                                                                className=""
                                                                icon={
                                                                  Object {
                                                                    "icon": Object {
                                                                      "attrs": Object {
                                                                        "focusable": "false",
                                                                        "viewBox": "64 64 896 896",
                                                                      },
                                                                      "children": Array [
                                                                        Object {
                                                                          "attrs": Object {
                                                                            "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                          },
                                                                          "tag": "path",
                                                                        },
                                                                      ],
                                                                      "tag": "svg",
                                                                    },
                                                                    "name": "calendar",
                                                                    "theme": "outlined",
                                                                  }
                                                                }
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className=""
                                                                  data-icon="calendar"
                                                                  fill="currentColor"
                                                                  focusable="false"
                                                                  height="1em"
                                                                  key="svg-calendar"
                                                                  viewBox="64 64 896 896"
                                                                  width="1em"
                                                                >
                                                                  <path
                                                                    d="M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z"
                                                                    key="svg-calendar-svg-0"
                                                                  />
                                                                </svg>
                                                              </IconReact>
                                                            </span>
                                                          </AntdIcon>
                                                        </ForwardRef(CalendarOutlined)>
                                                      </span>
                                                      <span
                                                        className="ant-picker-clear"
                                                        onMouseDown={[Function]}
                                                        onMouseUp={[Function]}
                                                      >
                                                        <ForwardRef(CloseCircleFilled)>
                                                          <AntdIcon
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "close-circle",
                                                                "theme": "filled",
                                                              }
                                                            }
                                                          >
                                                            <span
                                                              aria-label="close-circle"
                                                              className="anticon anticon-close-circle"
                                                              role="img"
                                                            >
                                                              <IconReact
                                                                className=""
                                                                icon={
                                                                  Object {
                                                                    "icon": Object {
                                                                      "attrs": Object {
                                                                        "focusable": "false",
                                                                        "viewBox": "64 64 896 896",
                                                                      },
                                                                      "children": Array [
                                                                        Object {
                                                                          "attrs": Object {
                                                                            "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                          },
                                                                          "tag": "path",
                                                                        },
                                                                      ],
                                                                      "tag": "svg",
                                                                    },
                                                                    "name": "close-circle",
                                                                    "theme": "filled",
                                                                  }
                                                                }
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className=""
                                                                  data-icon="close-circle"
                                                                  fill="currentColor"
                                                                  focusable="false"
                                                                  height="1em"
                                                                  key="svg-close-circle"
                                                                  viewBox="64 64 896 896"
                                                                  width="1em"
                                                                >
                                                                  <path
                                                                    d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z"
                                                                    key="svg-close-circle-svg-0"
                                                                  />
                                                                </svg>
                                                              </IconReact>
                                                            </span>
                                                          </AntdIcon>
                                                        </ForwardRef(CloseCircleFilled)>
                                                      </span>
                                                    </div>
                                                  </div>
                                                </Trigger>
                                              </PickerTrigger>
                                            </InnerPicker>
                                          </Picker>
                                        </LocaleReceiver>
                                      </Picker>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Checked Date"
                  name="checked_date"
                >
                  <WrapperField
                    label="Checked Date"
                    messageVariables={
                      Object {
                        "label": "Checked Date",
                      }
                    }
                    name="checked_date"
                    onReset={[Function]}
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_checked_date"
                      label="Checked Date"
                      messageVariables={
                        Object {
                          "label": "Checked Date",
                        }
                      }
                      name={
                        Array [
                          "checked_date",
                        ]
                      }
                      onReset={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_checked_date"
                            label="Checked Date"
                            name="checked_date"
                            prefixCls="ant-form"
                            required={false}
                            requiredMark={true}
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className=""
                                  htmlFor="create-claim_checked_date"
                                  title="Checked Date"
                                >
                                  Checked Date
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Checked Date"
                            name={
                              Array [
                                "checked_date",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={1}
                                      value={"2020-12-12T00:00:00.000Z"}
                                    >
                                      <Picker
                                        id="create-claim_checked_date"
                                        onChange={[Function]}
                                        value={"2020-12-12T00:00:00.000Z"}
                                      >
                                        <LocaleReceiver
                                          componentName="DatePicker"
                                          defaultLocale={[Function]}
                                        >
                                          <Picker
                                            allowClear={true}
                                            className=""
                                            clearIcon={<ForwardRef(CloseCircleFilled) />}
                                            components={
                                              Object {
                                                "button": [Function],
                                                "rangeItem": [Function],
                                              }
                                            }
                                            generateConfig={
                                              Object {
                                                "addDate": [Function],
                                                "addMonth": [Function],
                                                "addYear": [Function],
                                                "getDate": [Function],
                                                "getHour": [Function],
                                                "getMinute": [Function],
                                                "getMonth": [Function],
                                                "getNow": [Function],
                                                "getSecond": [Function],
                                                "getWeekDay": [Function],
                                                "getYear": [Function],
                                                "isAfter": [Function],
                                                "isValidate": [Function],
                                                "locale": Object {
                                                  "format": [Function],
                                                  "getShortMonths": [Function],
                                                  "getShortWeekDays": [Function],
                                                  "getWeek": [Function],
                                                  "getWeekFirstDay": [Function],
                                                  "parse": [Function],
                                                },
                                                "setDate": [Function],
                                                "setHour": [Function],
                                                "setMinute": [Function],
                                                "setMonth": [Function],
                                                "setSecond": [Function],
                                                "setYear": [Function],
                                              }
                                            }
                                            id="create-claim_checked_date"
                                            locale={
                                              Object {
                                                "backToToday": "Back to today",
                                                "clear": "Clear",
                                                "dateFormat": "M/D/YYYY",
                                                "dateSelect": "select date",
                                                "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                "dayFormat": "D",
                                                "decadeSelect": "Choose a decade",
                                                "locale": "en_US",
                                                "month": "Month",
                                                "monthBeforeYear": true,
                                                "monthPlaceholder": "Select month",
                                                "monthSelect": "Choose a month",
                                                "nextCentury": "Next century",
                                                "nextDecade": "Next decade",
                                                "nextMonth": "Next month (PageDown)",
                                                "nextYear": "Next year (Control + right)",
                                                "now": "Now",
                                                "ok": "Ok",
                                                "placeholder": "Select date",
                                                "previousCentury": "Last century",
                                                "previousDecade": "Last decade",
                                                "previousMonth": "Previous month (PageUp)",
                                                "previousYear": "Last year (Control + left)",
                                                "quarterPlaceholder": "Select quarter",
                                                "rangeMonthPlaceholder": Array [
                                                  "Start month",
                                                  "End month",
                                                ],
                                                "rangePlaceholder": Array [
                                                  "Start date",
                                                  "End date",
                                                ],
                                                "rangeWeekPlaceholder": Array [
                                                  "Start week",
                                                  "End week",
                                                ],
                                                "rangeYearPlaceholder": Array [
                                                  "Start year",
                                                  "End year",
                                                ],
                                                "timeSelect": "select time",
                                                "today": "Today",
                                                "weekPlaceholder": "Select week",
                                                "weekSelect": "Choose a week",
                                                "year": "Year",
                                                "yearFormat": "YYYY",
                                                "yearPlaceholder": "Select year",
                                                "yearSelect": "Choose a year",
                                              }
                                            }
                                            nextIcon={
                                              <span
                                                className="ant-picker-next-icon"
                                              />
                                            }
                                            onChange={[Function]}
                                            placeholder="Select date"
                                            prefixCls="ant-picker"
                                            prevIcon={
                                              <span
                                                className="ant-picker-prev-icon"
                                              />
                                            }
                                            showToday={true}
                                            suffixIcon={<ForwardRef(CalendarOutlined) />}
                                            superNextIcon={
                                              <span
                                                className="ant-picker-super-next-icon"
                                              />
                                            }
                                            superPrevIcon={
                                              <span
                                                className="ant-picker-super-prev-icon"
                                              />
                                            }
                                            transitionName="slide-up"
                                            value={"2020-12-12T00:00:00.000Z"}
                                          >
                                            <InnerPicker
                                              allowClear={true}
                                              className=""
                                              clearIcon={<ForwardRef(CloseCircleFilled) />}
                                              components={
                                                Object {
                                                  "button": [Function],
                                                  "rangeItem": [Function],
                                                }
                                              }
                                              generateConfig={
                                                Object {
                                                  "addDate": [Function],
                                                  "addMonth": [Function],
                                                  "addYear": [Function],
                                                  "getDate": [Function],
                                                  "getHour": [Function],
                                                  "getMinute": [Function],
                                                  "getMonth": [Function],
                                                  "getNow": [Function],
                                                  "getSecond": [Function],
                                                  "getWeekDay": [Function],
                                                  "getYear": [Function],
                                                  "isAfter": [Function],
                                                  "isValidate": [Function],
                                                  "locale": Object {
                                                    "format": [Function],
                                                    "getShortMonths": [Function],
                                                    "getShortWeekDays": [Function],
                                                    "getWeek": [Function],
                                                    "getWeekFirstDay": [Function],
                                                    "parse": [Function],
                                                  },
                                                  "setDate": [Function],
                                                  "setHour": [Function],
                                                  "setMinute": [Function],
                                                  "setMonth": [Function],
                                                  "setSecond": [Function],
                                                  "setYear": [Function],
                                                }
                                              }
                                              id="create-claim_checked_date"
                                              locale={
                                                Object {
                                                  "backToToday": "Back to today",
                                                  "clear": "Clear",
                                                  "dateFormat": "M/D/YYYY",
                                                  "dateSelect": "select date",
                                                  "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                  "dayFormat": "D",
                                                  "decadeSelect": "Choose a decade",
                                                  "locale": "en_US",
                                                  "month": "Month",
                                                  "monthBeforeYear": true,
                                                  "monthPlaceholder": "Select month",
                                                  "monthSelect": "Choose a month",
                                                  "nextCentury": "Next century",
                                                  "nextDecade": "Next decade",
                                                  "nextMonth": "Next month (PageDown)",
                                                  "nextYear": "Next year (Control + right)",
                                                  "now": "Now",
                                                  "ok": "Ok",
                                                  "placeholder": "Select date",
                                                  "previousCentury": "Last century",
                                                  "previousDecade": "Last decade",
                                                  "previousMonth": "Previous month (PageUp)",
                                                  "previousYear": "Last year (Control + left)",
                                                  "quarterPlaceholder": "Select quarter",
                                                  "rangeMonthPlaceholder": Array [
                                                    "Start month",
                                                    "End month",
                                                  ],
                                                  "rangePlaceholder": Array [
                                                    "Start date",
                                                    "End date",
                                                  ],
                                                  "rangeWeekPlaceholder": Array [
                                                    "Start week",
                                                    "End week",
                                                  ],
                                                  "rangeYearPlaceholder": Array [
                                                    "Start year",
                                                    "End year",
                                                  ],
                                                  "timeSelect": "select time",
                                                  "today": "Today",
                                                  "weekPlaceholder": "Select week",
                                                  "weekSelect": "Choose a week",
                                                  "year": "Year",
                                                  "yearFormat": "YYYY",
                                                  "yearPlaceholder": "Select year",
                                                  "yearSelect": "Choose a year",
                                                }
                                              }
                                              nextIcon={
                                                <span
                                                  className="ant-picker-next-icon"
                                                />
                                              }
                                              onChange={[Function]}
                                              pickerRef={
                                                Object {
                                                  "current": Object {
                                                    "blur": [Function],
                                                    "focus": [Function],
                                                  },
                                                }
                                              }
                                              placeholder="Select date"
                                              prefixCls="ant-picker"
                                              prevIcon={
                                                <span
                                                  className="ant-picker-prev-icon"
                                                />
                                              }
                                              showToday={true}
                                              suffixIcon={<ForwardRef(CalendarOutlined) />}
                                              superNextIcon={
                                                <span
                                                  className="ant-picker-super-next-icon"
                                                />
                                              }
                                              superPrevIcon={
                                                <span
                                                  className="ant-picker-super-prev-icon"
                                                />
                                              }
                                              transitionName="slide-up"
                                              value={"2020-12-12T00:00:00.000Z"}
                                            >
                                              <PickerTrigger
                                                popupElement={
                                                  <div
                                                    className="ant-picker-panel-container"
                                                    onMouseDown={[Function]}
                                                  >
                                                    <PickerPanel
                                                      allowClear={true}
                                                      className="ant-picker-panel-focused"
                                                      clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                      components={
                                                        Object {
                                                          "button": [Function],
                                                          "rangeItem": [Function],
                                                        }
                                                      }
                                                      generateConfig={
                                                        Object {
                                                          "addDate": [Function],
                                                          "addMonth": [Function],
                                                          "addYear": [Function],
                                                          "getDate": [Function],
                                                          "getHour": [Function],
                                                          "getMinute": [Function],
                                                          "getMonth": [Function],
                                                          "getNow": [Function],
                                                          "getSecond": [Function],
                                                          "getWeekDay": [Function],
                                                          "getYear": [Function],
                                                          "isAfter": [Function],
                                                          "isValidate": [Function],
                                                          "locale": Object {
                                                            "format": [Function],
                                                            "getShortMonths": [Function],
                                                            "getShortWeekDays": [Function],
                                                            "getWeek": [Function],
                                                            "getWeekFirstDay": [Function],
                                                            "parse": [Function],
                                                          },
                                                          "setDate": [Function],
                                                          "setHour": [Function],
                                                          "setMinute": [Function],
                                                          "setMonth": [Function],
                                                          "setSecond": [Function],
                                                          "setYear": [Function],
                                                        }
                                                      }
                                                      id="create-claim_checked_date"
                                                      locale={
                                                        Object {
                                                          "backToToday": "Back to today",
                                                          "clear": "Clear",
                                                          "dateFormat": "M/D/YYYY",
                                                          "dateSelect": "select date",
                                                          "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                          "dayFormat": "D",
                                                          "decadeSelect": "Choose a decade",
                                                          "locale": "en_US",
                                                          "month": "Month",
                                                          "monthBeforeYear": true,
                                                          "monthPlaceholder": "Select month",
                                                          "monthSelect": "Choose a month",
                                                          "nextCentury": "Next century",
                                                          "nextDecade": "Next decade",
                                                          "nextMonth": "Next month (PageDown)",
                                                          "nextYear": "Next year (Control + right)",
                                                          "now": "Now",
                                                          "ok": "Ok",
                                                          "placeholder": "Select date",
                                                          "previousCentury": "Last century",
                                                          "previousDecade": "Last decade",
                                                          "previousMonth": "Previous month (PageUp)",
                                                          "previousYear": "Last year (Control + left)",
                                                          "quarterPlaceholder": "Select quarter",
                                                          "rangeMonthPlaceholder": Array [
                                                            "Start month",
                                                            "End month",
                                                          ],
                                                          "rangePlaceholder": Array [
                                                            "Start date",
                                                            "End date",
                                                          ],
                                                          "rangeWeekPlaceholder": Array [
                                                            "Start week",
                                                            "End week",
                                                          ],
                                                          "rangeYearPlaceholder": Array [
                                                            "Start year",
                                                            "End year",
                                                          ],
                                                          "timeSelect": "select time",
                                                          "today": "Today",
                                                          "weekPlaceholder": "Select week",
                                                          "weekSelect": "Choose a week",
                                                          "year": "Year",
                                                          "yearFormat": "YYYY",
                                                          "yearPlaceholder": "Select year",
                                                          "yearSelect": "Choose a year",
                                                        }
                                                      }
                                                      nextIcon={
                                                        <span
                                                          className="ant-picker-next-icon"
                                                        />
                                                      }
                                                      onChange={[Function]}
                                                      pickerRef={
                                                        Object {
                                                          "current": Object {
                                                            "blur": [Function],
                                                            "focus": [Function],
                                                          },
                                                        }
                                                      }
                                                      placeholder="Select date"
                                                      prefixCls="ant-picker"
                                                      prevIcon={
                                                        <span
                                                          className="ant-picker-prev-icon"
                                                        />
                                                      }
                                                      showToday={true}
                                                      suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                      superNextIcon={
                                                        <span
                                                          className="ant-picker-super-next-icon"
                                                        />
                                                      }
                                                      superPrevIcon={
                                                        <span
                                                          className="ant-picker-super-prev-icon"
                                                        />
                                                      }
                                                      tabIndex={-1}
                                                      transitionName="slide-up"
                                                      value={"2020-12-12T00:00:00.000Z"}
                                                    />
                                                  </div>
                                                }
                                                popupPlacement="bottomLeft"
                                                prefixCls="ant-picker"
                                                transitionName="slide-up"
                                                visible={false}
                                              >
                                                <Trigger
                                                  action={Array []}
                                                  afterPopupVisibleChange={[Function]}
                                                  autoDestroy={false}
                                                  blurDelay={0.15}
                                                  builtinPlacements={
                                                    Object {
                                                      "bottomLeft": Object {
                                                        "offset": Array [
                                                          0,
                                                          4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 1,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "tl",
                                                          "bl",
                                                        ],
                                                      },
                                                      "bottomRight": Object {
                                                        "offset": Array [
                                                          0,
                                                          4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 1,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "tr",
                                                          "br",
                                                        ],
                                                      },
                                                      "topLeft": Object {
                                                        "offset": Array [
                                                          0,
                                                          -4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 0,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "bl",
                                                          "tl",
                                                        ],
                                                      },
                                                      "topRight": Object {
                                                        "offset": Array [
                                                          0,
                                                          -4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 0,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "br",
                                                          "tr",
                                                        ],
                                                      },
                                                    }
                                                  }
                                                  defaultPopupVisible={false}
                                                  destroyPopupOnHide={false}
                                                  focusDelay={0}
                                                  getDocument={[Function]}
                                                  getPopupClassNameFromAlign={[Function]}
                                                  hideAction={Array []}
                                                  mask={false}
                                                  maskClosable={true}
                                                  mouseEnterDelay={0}
                                                  mouseLeaveDelay={0.1}
                                                  onPopupAlign={[Function]}
                                                  onPopupVisibleChange={[Function]}
                                                  popup={
                                                    <div
                                                      className="ant-picker-panel-container"
                                                      onMouseDown={[Function]}
                                                    >
                                                      <PickerPanel
                                                        allowClear={true}
                                                        className="ant-picker-panel-focused"
                                                        clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                        components={
                                                          Object {
                                                            "button": [Function],
                                                            "rangeItem": [Function],
                                                          }
                                                        }
                                                        generateConfig={
                                                          Object {
                                                            "addDate": [Function],
                                                            "addMonth": [Function],
                                                            "addYear": [Function],
                                                            "getDate": [Function],
                                                            "getHour": [Function],
                                                            "getMinute": [Function],
                                                            "getMonth": [Function],
                                                            "getNow": [Function],
                                                            "getSecond": [Function],
                                                            "getWeekDay": [Function],
                                                            "getYear": [Function],
                                                            "isAfter": [Function],
                                                            "isValidate": [Function],
                                                            "locale": Object {
                                                              "format": [Function],
                                                              "getShortMonths": [Function],
                                                              "getShortWeekDays": [Function],
                                                              "getWeek": [Function],
                                                              "getWeekFirstDay": [Function],
                                                              "parse": [Function],
                                                            },
                                                            "setDate": [Function],
                                                            "setHour": [Function],
                                                            "setMinute": [Function],
                                                            "setMonth": [Function],
                                                            "setSecond": [Function],
                                                            "setYear": [Function],
                                                          }
                                                        }
                                                        id="create-claim_checked_date"
                                                        locale={
                                                          Object {
                                                            "backToToday": "Back to today",
                                                            "clear": "Clear",
                                                            "dateFormat": "M/D/YYYY",
                                                            "dateSelect": "select date",
                                                            "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                            "dayFormat": "D",
                                                            "decadeSelect": "Choose a decade",
                                                            "locale": "en_US",
                                                            "month": "Month",
                                                            "monthBeforeYear": true,
                                                            "monthPlaceholder": "Select month",
                                                            "monthSelect": "Choose a month",
                                                            "nextCentury": "Next century",
                                                            "nextDecade": "Next decade",
                                                            "nextMonth": "Next month (PageDown)",
                                                            "nextYear": "Next year (Control + right)",
                                                            "now": "Now",
                                                            "ok": "Ok",
                                                            "placeholder": "Select date",
                                                            "previousCentury": "Last century",
                                                            "previousDecade": "Last decade",
                                                            "previousMonth": "Previous month (PageUp)",
                                                            "previousYear": "Last year (Control + left)",
                                                            "quarterPlaceholder": "Select quarter",
                                                            "rangeMonthPlaceholder": Array [
                                                              "Start month",
                                                              "End month",
                                                            ],
                                                            "rangePlaceholder": Array [
                                                              "Start date",
                                                              "End date",
                                                            ],
                                                            "rangeWeekPlaceholder": Array [
                                                              "Start week",
                                                              "End week",
                                                            ],
                                                            "rangeYearPlaceholder": Array [
                                                              "Start year",
                                                              "End year",
                                                            ],
                                                            "timeSelect": "select time",
                                                            "today": "Today",
                                                            "weekPlaceholder": "Select week",
                                                            "weekSelect": "Choose a week",
                                                            "year": "Year",
                                                            "yearFormat": "YYYY",
                                                            "yearPlaceholder": "Select year",
                                                            "yearSelect": "Choose a year",
                                                          }
                                                        }
                                                        nextIcon={
                                                          <span
                                                            className="ant-picker-next-icon"
                                                          />
                                                        }
                                                        onChange={[Function]}
                                                        pickerRef={
                                                          Object {
                                                            "current": Object {
                                                              "blur": [Function],
                                                              "focus": [Function],
                                                            },
                                                          }
                                                        }
                                                        placeholder="Select date"
                                                        prefixCls="ant-picker"
                                                        prevIcon={
                                                          <span
                                                            className="ant-picker-prev-icon"
                                                          />
                                                        }
                                                        showToday={true}
                                                        suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                        superNextIcon={
                                                          <span
                                                            className="ant-picker-super-next-icon"
                                                          />
                                                        }
                                                        superPrevIcon={
                                                          <span
                                                            className="ant-picker-super-prev-icon"
                                                          />
                                                        }
                                                        tabIndex={-1}
                                                        transitionName="slide-up"
                                                        value={"2020-12-12T00:00:00.000Z"}
                                                      />
                                                    </div>
                                                  }
                                                  popupAlign={Object {}}
                                                  popupClassName=""
                                                  popupPlacement="bottomLeft"
                                                  popupStyle={Object {}}
                                                  popupTransitionName="slide-up"
                                                  popupVisible={false}
                                                  prefixCls="ant-picker-dropdown"
                                                  showAction={Array []}
                                                >
                                                  <div
                                                    className="ant-picker"
                                                    key="trigger"
                                                    onMouseUp={[Function]}
                                                  >
                                                    <div
                                                      className="ant-picker-input"
                                                    >
                                                      <input
                                                        autoComplete="off"
                                                        id="create-claim_checked_date"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        onMouseDown={[Function]}
                                                        placeholder="Select date"
                                                        readOnly={true}
                                                        size={12}
                                                        title=""
                                                        value=""
                                                      />
                                                      <span
                                                        className="ant-picker-suffix"
                                                      >
                                                        <ForwardRef(CalendarOutlined)>
                                                          <AntdIcon
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "calendar",
                                                                "theme": "outlined",
                                                              }
                                                            }
                                                          >
                                                            <span
                                                              aria-label="calendar"
                                                              className="anticon anticon-calendar"
                                                              role="img"
                                                            >
                                                              <IconReact
                                                                className=""
                                                                icon={
                                                                  Object {
                                                                    "icon": Object {
                                                                      "attrs": Object {
                                                                        "focusable": "false",
                                                                        "viewBox": "64 64 896 896",
                                                                      },
                                                                      "children": Array [
                                                                        Object {
                                                                          "attrs": Object {
                                                                            "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                          },
                                                                          "tag": "path",
                                                                        },
                                                                      ],
                                                                      "tag": "svg",
                                                                    },
                                                                    "name": "calendar",
                                                                    "theme": "outlined",
                                                                  }
                                                                }
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className=""
                                                                  data-icon="calendar"
                                                                  fill="currentColor"
                                                                  focusable="false"
                                                                  height="1em"
                                                                  key="svg-calendar"
                                                                  viewBox="64 64 896 896"
                                                                  width="1em"
                                                                >
                                                                  <path
                                                                    d="M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z"
                                                                    key="svg-calendar-svg-0"
                                                                  />
                                                                </svg>
                                                              </IconReact>
                                                            </span>
                                                          </AntdIcon>
                                                        </ForwardRef(CalendarOutlined)>
                                                      </span>
                                                      <span
                                                        className="ant-picker-clear"
                                                        onMouseDown={[Function]}
                                                        onMouseUp={[Function]}
                                                      >
                                                        <ForwardRef(CloseCircleFilled)>
                                                          <AntdIcon
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "close-circle",
                                                                "theme": "filled",
                                                              }
                                                            }
                                                          >
                                                            <span
                                                              aria-label="close-circle"
                                                              className="anticon anticon-close-circle"
                                                              role="img"
                                                            >
                                                              <IconReact
                                                                className=""
                                                                icon={
                                                                  Object {
                                                                    "icon": Object {
                                                                      "attrs": Object {
                                                                        "focusable": "false",
                                                                        "viewBox": "64 64 896 896",
                                                                      },
                                                                      "children": Array [
                                                                        Object {
                                                                          "attrs": Object {
                                                                            "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                          },
                                                                          "tag": "path",
                                                                        },
                                                                      ],
                                                                      "tag": "svg",
                                                                    },
                                                                    "name": "close-circle",
                                                                    "theme": "filled",
                                                                  }
                                                                }
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className=""
                                                                  data-icon="close-circle"
                                                                  fill="currentColor"
                                                                  focusable="false"
                                                                  height="1em"
                                                                  key="svg-close-circle"
                                                                  viewBox="64 64 896 896"
                                                                  width="1em"
                                                                >
                                                                  <path
                                                                    d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z"
                                                                    key="svg-close-circle-svg-0"
                                                                  />
                                                                </svg>
                                                              </IconReact>
                                                            </span>
                                                          </AntdIcon>
                                                        </ForwardRef(CloseCircleFilled)>
                                                      </span>
                                                    </div>
                                                  </div>
                                                </Trigger>
                                              </PickerTrigger>
                                            </InnerPicker>
                                          </Picker>
                                        </LocaleReceiver>
                                      </Picker>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Claim Sources"
                >
                  <Row
                    className="ant-form-item"
                    key="row"
                  >
                    <div
                      className="ant-row ant-form-item"
                      style={Object {}}
                    >
                      <FormItemLabel
                        label="Claim Sources"
                        prefixCls="ant-form"
                        requiredMark={true}
                      >
                        <Col
                          className="ant-form-item-label"
                          offset={2}
                          span={8}
                        >
                          <div
                            className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                            style={Object {}}
                          >
                            <label
                              className=""
                              title="Claim Sources"
                            >
                              Claim Sources
                            </label>
                          </div>
                        </Col>
                      </FormItemLabel>
                      <FormItemInput
                        errors={Array []}
                        label="Claim Sources"
                        onDomErrorVisibleChange={[Function]}
                        prefixCls="ant-form"
                        status=""
                        validateStatus=""
                      >
                        <Col
                          className="ant-form-item-control"
                          offset={2}
                          span={20}
                        >
                          <div
                            className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                            style={Object {}}
                          >
                            <div
                              className="ant-form-item-control-input"
                            >
                              <div
                                className="ant-form-item-control-input-content"
                              >
                                <FormList
                                  label="Claim sources"
                                  name="claim_sources"
                                >
                                  <List
                                    label="Claim sources"
                                    name="claim_sources"
                                  >
                                    <WrapperField
                                      name={Array []}
                                      shouldUpdate={[Function]}
                                    >
                                      <Field
                                        fieldContext={
                                          Object {
                                            "__INTERNAL__": Object {
                                              "itemRef": [Function],
                                              "name": "create-claim",
                                            },
                                            "getFieldError": [Function],
                                            "getFieldInstance": [Function],
                                            "getFieldValue": [Function],
                                            "getFieldsError": [Function],
                                            "getFieldsValue": [Function],
                                            "getInternalHooks": [Function],
                                            "isFieldTouched": [Function],
                                            "isFieldValidating": [Function],
                                            "isFieldsTouched": [Function],
                                            "isFieldsValidating": [Function],
                                            "prefixName": Array [
                                              "claim_sources",
                                            ],
                                            "resetFields": [Function],
                                            "scrollToField": [Function],
                                            "setFields": [Function],
                                            "setFieldsValue": [Function],
                                            "submit": [Function],
                                            "validateFields": [Function],
                                            "validateTrigger": "onChange",
                                          }
                                        }
                                        key="_"
                                        name={Array []}
                                        shouldUpdate={[Function]}
                                        trigger="onChange"
                                        valuePropName="value"
                                      >
                                        <FormItem>
                                          <Row
                                            className="ant-form-item"
                                            key="row"
                                          >
                                            <div
                                              className="ant-row ant-form-item"
                                              style={Object {}}
                                            >
                                              <FormItemLabel
                                                prefixCls="ant-form"
                                                requiredMark={true}
                                              />
                                              <FormItemInput
                                                errors={Array []}
                                                onDomErrorVisibleChange={[Function]}
                                                prefixCls="ant-form"
                                                status=""
                                                validateStatus=""
                                              >
                                                <Col
                                                  className="ant-form-item-control"
                                                >
                                                  <div
                                                    className="ant-col ant-form-item-control"
                                                    style={Object {}}
                                                  >
                                                    <div
                                                      className="ant-form-item-control-input"
                                                    >
                                                      <div
                                                        className="ant-form-item-control-input-content"
                                                      >
                                                        <Button
                                                          block={true}
                                                          ghost={false}
                                                          htmlType="button"
                                                          icon={<ForwardRef(PlusOutlined) />}
                                                          loading={false}
                                                          onClick={[Function]}
                                                          type="dashed"
                                                        >
                                                          <Wave>
                                                            <button
                                                              className="ant-btn ant-btn-dashed ant-btn-block"
                                                              onClick={[Function]}
                                                              type="button"
                                                            >
                                                              <ForwardRef(PlusOutlined)>
                                                                <AntdIcon
                                                                  icon={
                                                                    Object {
                                                                      "icon": Object {
                                                                        "attrs": Object {
                                                                          "focusable": "false",
                                                                          "viewBox": "64 64 896 896",
                                                                        },
                                                                        "children": Array [
                                                                          Object {
                                                                            "attrs": Object {},
                                                                            "children": Array [
                                                                              Object {
                                                                                "attrs": Object {},
                                                                                "tag": "style",
                                                                              },
                                                                            ],
                                                                            "tag": "defs",
                                                                          },
                                                                          Object {
                                                                            "attrs": Object {
                                                                              "d": "M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z",
                                                                            },
                                                                            "tag": "path",
                                                                          },
                                                                          Object {
                                                                            "attrs": Object {
                                                                              "d": "M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z",
                                                                            },
                                                                            "tag": "path",
                                                                          },
                                                                        ],
                                                                        "tag": "svg",
                                                                      },
                                                                      "name": "plus",
                                                                      "theme": "outlined",
                                                                    }
                                                                  }
                                                                >
                                                                  <span
                                                                    aria-label="plus"
                                                                    className="anticon anticon-plus"
                                                                    role="img"
                                                                  >
                                                                    <IconReact
                                                                      className=""
                                                                      icon={
                                                                        Object {
                                                                          "icon": Object {
                                                                            "attrs": Object {
                                                                              "focusable": "false",
                                                                              "viewBox": "64 64 896 896",
                                                                            },
                                                                            "children": Array [
                                                                              Object {
                                                                                "attrs": Object {},
                                                                                "children": Array [
                                                                                  Object {
                                                                                    "attrs": Object {},
                                                                                    "tag": "style",
                                                                                  },
                                                                                ],
                                                                                "tag": "defs",
                                                                              },
                                                                              Object {
                                                                                "attrs": Object {
                                                                                  "d": "M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z",
                                                                                },
                                                                                "tag": "path",
                                                                              },
                                                                              Object {
                                                                                "attrs": Object {
                                                                                  "d": "M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z",
                                                                                },
                                                                                "tag": "path",
                                                                              },
                                                                            ],
                                                                            "tag": "svg",
                                                                          },
                                                                          "name": "plus",
                                                                          "theme": "outlined",
                                                                        }
                                                                      }
                                                                    >
                                                                      <svg
                                                                        aria-hidden="true"
                                                                        className=""
                                                                        data-icon="plus"
                                                                        fill="currentColor"
                                                                        focusable="false"
                                                                        height="1em"
                                                                        key="svg-plus"
                                                                        viewBox="64 64 896 896"
                                                                        width="1em"
                                                                      >
                                                                        <defs
                                                                          key="svg-plus-svg-0"
                                                                        >
                                                                          <style
                                                                            key="svg-plus-svg-0-defs-0"
                                                                          />
                                                                        </defs>
                                                                        <path
                                                                          d="M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z"
                                                                          key="svg-plus-svg-1"
                                                                        />
                                                                        <path
                                                                          d="M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z"
                                                                          key="svg-plus-svg-2"
                                                                        />
                                                                      </svg>
                                                                    </IconReact>
                                                                  </span>
                                                                </AntdIcon>
                                                              </ForwardRef(PlusOutlined)>
                                                              <span
                                                                key=".0"
                                                              >
                                                                Add Claim sources
                                                              </span>
                                                            </button>
                                                          </Wave>
                                                        </Button>
                                                      </div>
                                                    </div>
                                                    <ErrorList
                                                      errors={Array []}
                                                      onDomErrorVisibleChange={[Function]}
                                                    >
                                                      <CSSMotion
                                                        motionAppear={true}
                                                        motionDeadline={500}
                                                        motionName="show-help"
                                                        onLeaveEnd={[Function]}
                                                        removeOnLeave={true}
                                                        visible={false}
                                                      >
                                                        <DomWrapper />
                                                      </CSSMotion>
                                                    </ErrorList>
                                                  </div>
                                                </Col>
                                              </FormItemInput>
                                            </div>
                                          </Row>
                                        </FormItem>
                                      </Field>
                                    </WrapperField>
                                  </List>
                                </FormList>
                              </div>
                            </div>
                            <ErrorList
                              errors={Array []}
                              onDomErrorVisibleChange={[Function]}
                            >
                              <CSSMotion
                                motionAppear={true}
                                motionDeadline={500}
                                motionName="show-help"
                                onLeaveEnd={[Function]}
                                removeOnLeave={true}
                                visible={false}
                              >
                                <DomWrapper />
                              </CSSMotion>
                            </ErrorList>
                          </div>
                        </Col>
                      </FormItemInput>
                    </div>
                  </Row>
                </FormItem>
                <FormItem
                  label="Review Sources"
                >
                  <Row
                    className="ant-form-item"
                    key="row"
                  >
                    <div
                      className="ant-row ant-form-item"
                      style={Object {}}
                    >
                      <FormItemLabel
                        label="Review Sources"
                        prefixCls="ant-form"
                        requiredMark={true}
                      >
                        <Col
                          className="ant-form-item-label"
                          offset={2}
                          span={8}
                        >
                          <div
                            className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                            style={Object {}}
                          >
                            <label
                              className=""
                              title="Review Sources"
                            >
                              Review Sources
                            </label>
                          </div>
                        </Col>
                      </FormItemLabel>
                      <FormItemInput
                        errors={Array []}
                        label="Review Sources"
                        onDomErrorVisibleChange={[Function]}
                        prefixCls="ant-form"
                        status=""
                        validateStatus=""
                      >
                        <Col
                          className="ant-form-item-control"
                          offset={2}
                          span={20}
                        >
                          <div
                            className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                            style={Object {}}
                          >
                            <div
                              className="ant-form-item-control-input"
                            >
                              <div
                                className="ant-form-item-control-input-content"
                              >
                                <FormList
                                  label="Review sources"
                                  name="review_sources"
                                >
                                  <List
                                    label="Review sources"
                                    name="review_sources"
                                  >
                                    <WrapperField
                                      name={Array []}
                                      shouldUpdate={[Function]}
                                    >
                                      <Field
                                        fieldContext={
                                          Object {
                                            "__INTERNAL__": Object {
                                              "itemRef": [Function],
                                              "name": "create-claim",
                                            },
                                            "getFieldError": [Function],
                                            "getFieldInstance": [Function],
                                            "getFieldValue": [Function],
                                            "getFieldsError": [Function],
                                            "getFieldsValue": [Function],
                                            "getInternalHooks": [Function],
                                            "isFieldTouched": [Function],
                                            "isFieldValidating": [Function],
                                            "isFieldsTouched": [Function],
                                            "isFieldsValidating": [Function],
                                            "prefixName": Array [
                                              "review_sources",
                                            ],
                                            "resetFields": [Function],
                                            "scrollToField": [Function],
                                            "setFields": [Function],
                                            "setFieldsValue": [Function],
                                            "submit": [Function],
                                            "validateFields": [Function],
                                            "validateTrigger": "onChange",
                                          }
                                        }
                                        key="_"
                                        name={Array []}
                                        shouldUpdate={[Function]}
                                        trigger="onChange"
                                        valuePropName="value"
                                      >
                                        <FormItem>
                                          <Row
                                            className="ant-form-item"
                                            key="row"
                                          >
                                            <div
                                              className="ant-row ant-form-item"
                                              style={Object {}}
                                            >
                                              <FormItemLabel
                                                prefixCls="ant-form"
                                                requiredMark={true}
                                              />
                                              <FormItemInput
                                                errors={Array []}
                                                onDomErrorVisibleChange={[Function]}
                                                prefixCls="ant-form"
                                                status=""
                                                validateStatus=""
                                              >
                                                <Col
                                                  className="ant-form-item-control"
                                                >
                                                  <div
                                                    className="ant-col ant-form-item-control"
                                                    style={Object {}}
                                                  >
                                                    <div
                                                      className="ant-form-item-control-input"
                                                    >
                                                      <div
                                                        className="ant-form-item-control-input-content"
                                                      >
                                                        <Button
                                                          block={true}
                                                          ghost={false}
                                                          htmlType="button"
                                                          icon={<ForwardRef(PlusOutlined) />}
                                                          loading={false}
                                                          onClick={[Function]}
                                                          type="dashed"
                                                        >
                                                          <Wave>
                                                            <button
                                                              className="ant-btn ant-btn-dashed ant-btn-block"
                                                              onClick={[Function]}
                                                              type="button"
                                                            >
                                                              <ForwardRef(PlusOutlined)>
                                                                <AntdIcon
                                                                  icon={
                                                                    Object {
                                                                      "icon": Object {
                                                                        "attrs": Object {
                                                                          "focusable": "false",
                                                                          "viewBox": "64 64 896 896",
                                                                        },
                                                                        "children": Array [
                                                                          Object {
                                                                            "attrs": Object {},
                                                                            "children": Array [
                                                                              Object {
                                                                                "attrs": Object {},
                                                                                "tag": "style",
                                                                              },
                                                                            ],
                                                                            "tag": "defs",
                                                                          },
                                                                          Object {
                                                                            "attrs": Object {
                                                                              "d": "M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z",
                                                                            },
                                                                            "tag": "path",
                                                                          },
                                                                          Object {
                                                                            "attrs": Object {
                                                                              "d": "M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z",
                                                                            },
                                                                            "tag": "path",
                                                                          },
                                                                        ],
                                                                        "tag": "svg",
                                                                      },
                                                                      "name": "plus",
                                                                      "theme": "outlined",
                                                                    }
                                                                  }
                                                                >
                                                                  <span
                                                                    aria-label="plus"
                                                                    className="anticon anticon-plus"
                                                                    role="img"
                                                                  >
                                                                    <IconReact
                                                                      className=""
                                                                      icon={
                                                                        Object {
                                                                          "icon": Object {
                                                                            "attrs": Object {
                                                                              "focusable": "false",
                                                                              "viewBox": "64 64 896 896",
                                                                            },
                                                                            "children": Array [
                                                                              Object {
                                                                                "attrs": Object {},
                                                                                "children": Array [
                                                                                  Object {
                                                                                    "attrs": Object {},
                                                                                    "tag": "style",
                                                                                  },
                                                                                ],
                                                                                "tag": "defs",
                                                                              },
                                                                              Object {
                                                                                "attrs": Object {
                                                                                  "d": "M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z",
                                                                                },
                                                                                "tag": "path",
                                                                              },
                                                                              Object {
                                                                                "attrs": Object {
                                                                                  "d": "M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z",
                                                                                },
                                                                                "tag": "path",
                                                                              },
                                                                            ],
                                                                            "tag": "svg",
                                                                          },
                                                                          "name": "plus",
                                                                          "theme": "outlined",
                                                                        }
                                                                      }
                                                                    >
                                                                      <svg
                                                                        aria-hidden="true"
                                                                        className=""
                                                                        data-icon="plus"
                                                                        fill="currentColor"
                                                                        focusable="false"
                                                                        height="1em"
                                                                        key="svg-plus"
                                                                        viewBox="64 64 896 896"
                                                                        width="1em"
                                                                      >
                                                                        <defs
                                                                          key="svg-plus-svg-0"
                                                                        >
                                                                          <style
                                                                            key="svg-plus-svg-0-defs-0"
                                                                          />
                                                                        </defs>
                                                                        <path
                                                                          d="M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z"
                                                                          key="svg-plus-svg-1"
                                                                        />
                                                                        <path
                                                                          d="M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z"
                                                                          key="svg-plus-svg-2"
                                                                        />
                                                                      </svg>
                                                                    </IconReact>
                                                                  </span>
                                                                </AntdIcon>
                                                              </ForwardRef(PlusOutlined)>
                                                              <span
                                                                key=".0"
                                                              >
                                                                Add Review sources
                                                              </span>
                                                            </button>
                                                          </Wave>
                                                        </Button>
                                                      </div>
                                                    </div>
                                                    <ErrorList
                                                      errors={Array []}
                                                      onDomErrorVisibleChange={[Function]}
                                                    >
                                                      <CSSMotion
                                                        motionAppear={true}
                                                        motionDeadline={500}
                                                        motionName="show-help"
                                                        onLeaveEnd={[Function]}
                                                        removeOnLeave={true}
                                                        visible={false}
                                                      >
                                                        <DomWrapper />
                                                      </CSSMotion>
                                                    </ErrorList>
                                                  </div>
                                                </Col>
                                              </FormItemInput>
                                            </div>
                                          </Row>
                                        </FormItem>
                                      </Field>
                                    </WrapperField>
                                  </List>
                                </FormList>
                              </div>
                            </div>
                            <ErrorList
                              errors={Array []}
                              onDomErrorVisibleChange={[Function]}
                            >
                              <CSSMotion
                                motionAppear={true}
                                motionDeadline={500}
                                motionName="show-help"
                                onLeaveEnd={[Function]}
                                removeOnLeave={true}
                                visible={false}
                              >
                                <DomWrapper />
                              </CSSMotion>
                            </ErrorList>
                          </div>
                        </Col>
                      </FormItemInput>
                    </div>
                  </Row>
                </FormItem>
              </div>
              <FormItem>
                <Row
                  className="ant-form-item"
                  key="row"
                >
                  <div
                    className="ant-row ant-form-item"
                    style={Object {}}
                  >
                    <FormItemLabel
                      prefixCls="ant-form"
                      requiredMark={true}
                    />
                    <FormItemInput
                      errors={Array []}
                      onDomErrorVisibleChange={[Function]}
                      prefixCls="ant-form"
                      status=""
                      validateStatus=""
                    >
                      <Col
                        className="ant-form-item-control"
                        offset={2}
                        span={20}
                      >
                        <div
                          className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                          style={Object {}}
                        >
                          <div
                            className="ant-form-item-control-input"
                          >
                            <div
                              className="ant-form-item-control-input-content"
                            >
                              <Button
                                block={false}
                                disabled={true}
                                ghost={false}
                                htmlType="button"
                                loading={false}
                                onClick={[Function]}
                              >
                                <Wave>
                                  <button
                                    className="ant-btn"
                                    disabled={true}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <LoadingIcon
                                      existIcon={false}
                                      loading={false}
                                      prefixCls="ant-btn"
                                    >
                                      <CSSMotion
                                        motionName="ant-btn-loading-icon-motion"
                                        onAppearActive={[Function]}
                                        onAppearStart={[Function]}
                                        onEnterActive={[Function]}
                                        onEnterStart={[Function]}
                                        onLeaveActive={[Function]}
                                        onLeaveStart={[Function]}
                                        removeOnLeave={true}
                                        visible={false}
                                      >
                                        <DomWrapper />
                                      </CSSMotion>
                                    </LoadingIcon>
                                    <span
                                      key=".0"
                                    >
                                      Back
                                    </span>
                                  </button>
                                </Wave>
                              </Button>
                              <Button
                                block={false}
                                ghost={false}
                                htmlType="button"
                                loading={false}
                                onClick={[Function]}
                              >
                                <Wave>
                                  <button
                                    className="ant-btn"
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <LoadingIcon
                                      existIcon={false}
                                      loading={false}
                                      prefixCls="ant-btn"
                                    >
                                      <CSSMotion
                                        motionName="ant-btn-loading-icon-motion"
                                        onAppearActive={[Function]}
                                        onAppearStart={[Function]}
                                        onEnterActive={[Function]}
                                        onEnterStart={[Function]}
                                        onLeaveActive={[Function]}
                                        onLeaveStart={[Function]}
                                        removeOnLeave={true}
                                        visible={false}
                                      >
                                        <DomWrapper />
                                      </CSSMotion>
                                    </LoadingIcon>
                                    <span
                                      key=".0"
                                    >
                                      Next
                                    </span>
                                  </button>
                                </Wave>
                              </Button>
                            </div>
                          </div>
                          <ErrorList
                            errors={Array []}
                            onDomErrorVisibleChange={[Function]}
                          >
                            <CSSMotion
                              motionAppear={true}
                              motionDeadline={500}
                              motionName="show-help"
                              onLeaveEnd={[Function]}
                              removeOnLeave={true}
                              visible={false}
                            >
                              <DomWrapper />
                            </CSSMotion>
                          </ErrorList>
                        </div>
                      </Col>
                    </FormItemInput>
                  </div>
                </Row>
              </FormItem>
            </form>
          </ForwardRef(Form)>
        </SizeContextProvider>
      </ForwardRef(InternalForm)>
    </div>
  </ClaimForm>
</Provider>
`;

exports[`Claims Create Form component snapshot testing should match component with data 2`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <ClaimForm
    data={
      Object {
        "checked_date": "2020-12-12T00:00:00.000Z",
        "claim_date": "2020-12-12T00:00:00.000Z",
        "claim_sources": "claim_sources",
        "claimant": 1,
        "description": Object {
          "blocks": Array [
            Object {
              "data": Object {
                "level": 2,
                "text": "Editor.js",
              },
              "type": "header",
            },
            Object {
              "data": Object {
                "text": "Hey. Meet the new Editor. On this page you can see it in action — try to edit this text.",
              },
              "type": "paragraph",
            },
          ],
          "time": 1595747741807,
          "version": "2.18.0",
        },
        "rating": 1,
        "review": "review",
        "review_sources": "review_sources",
        "review_tag_line": "review_tag_line",
        "slug": "slug",
        "title": "title",
      }
    }
    onCreate={[MockFunction]}
  >
    <div>
      <Steps
        current={1}
        onChange={[Function]}
      >
        <Steps
          className=""
          current={1}
          direction="horizontal"
          iconPrefix="ant"
          icons={
            Object {
              "error": <ForwardRef(CloseOutlined)
                className="ant-steps-error-icon"
              />,
              "finish": <ForwardRef(CheckOutlined)
                className="ant-steps-finish-icon"
              />,
            }
          }
          initial={0}
          labelPlacement="horizontal"
          onChange={[Function]}
          prefixCls="ant-steps"
          progressDot={false}
          size=""
          status="process"
          stepIcon={[Function]}
          type="default"
        >
          <div
            className="ant-steps ant-steps-horizontal ant-steps-label-horizontal"
            style={Object {}}
          >
            <Step
              active={false}
              iconPrefix="ant"
              icons={
                Object {
                  "error": <ForwardRef(CloseOutlined)
                    className="ant-steps-error-icon"
                  />,
                  "finish": <ForwardRef(CheckOutlined)
                    className="ant-steps-finish-icon"
                  />,
                }
              }
              key="0"
              onStepClick={[Function]}
              prefixCls="ant-steps"
              progressDot={false}
              status="finish"
              stepIcon={[Function]}
              stepIndex={0}
              stepNumber="1"
              title="Basic"
              wrapperStyle={Object {}}
            >
              <div
                className="ant-steps-item ant-steps-item-finish"
                style={Object {}}
              >
                <div
                  className="ant-steps-item-container"
                  onClick={[Function]}
                  role="button"
                  tabIndex={0}
                >
                  <div
                    className="ant-steps-item-tail"
                  />
                  <div
                    className="ant-steps-item-icon"
                  >
                    <span
                      className="ant-steps-icon"
                    >
                      <ForwardRef(CheckOutlined)
                        className="ant-steps-finish-icon"
                      >
                        <AntdIcon
                          className="ant-steps-finish-icon"
                          icon={
                            Object {
                              "icon": Object {
                                "attrs": Object {
                                  "focusable": "false",
                                  "viewBox": "64 64 896 896",
                                },
                                "children": Array [
                                  Object {
                                    "attrs": Object {
                                      "d": "M912 190h-69.9c-9.8 0-19.1 4.5-25.1 12.2L404.7 724.5 207 474a32 32 0 00-25.1-12.2H112c-6.7 0-10.4 7.7-6.3 12.9l273.9 347c12.8 16.2 37.4 16.2 50.3 0l488.4-618.9c4.1-5.1.4-12.8-6.3-12.8z",
                                    },
                                    "tag": "path",
                                  },
                                ],
                                "tag": "svg",
                              },
                              "name": "check",
                              "theme": "outlined",
                            }
                          }
                        >
                          <span
                            aria-label="check"
                            className="anticon anticon-check ant-steps-finish-icon"
                            role="img"
                          >
                            <IconReact
                              className=""
                              icon={
                                Object {
                                  "icon": Object {
                                    "attrs": Object {
                                      "focusable": "false",
                                      "viewBox": "64 64 896 896",
                                    },
                                    "children": Array [
                                      Object {
                                        "attrs": Object {
                                          "d": "M912 190h-69.9c-9.8 0-19.1 4.5-25.1 12.2L404.7 724.5 207 474a32 32 0 00-25.1-12.2H112c-6.7 0-10.4 7.7-6.3 12.9l273.9 347c12.8 16.2 37.4 16.2 50.3 0l488.4-618.9c4.1-5.1.4-12.8-6.3-12.8z",
                                        },
                                        "tag": "path",
                                      },
                                    ],
                                    "tag": "svg",
                                  },
                                  "name": "check",
                                  "theme": "outlined",
                                }
                              }
                            >
                              <svg
                                aria-hidden="true"
                                className=""
                                data-icon="check"
                                fill="currentColor"
                                focusable="false"
                                height="1em"
                                key="svg-check"
                                viewBox="64 64 896 896"
                                width="1em"
                              >
                                <path
                                  d="M912 190h-69.9c-9.8 0-19.1 4.5-25.1 12.2L404.7 724.5 207 474a32 32 0 00-25.1-12.2H112c-6.7 0-10.4 7.7-6.3 12.9l273.9 347c12.8 16.2 37.4 16.2 50.3 0l488.4-618.9c4.1-5.1.4-12.8-6.3-12.8z"
                                  key="svg-check-svg-0"
                                />
                              </svg>
                            </IconReact>
                          </span>
                        </AntdIcon>
                      </ForwardRef(CheckOutlined)>
                    </span>
                  </div>
                  <div
                    className="ant-steps-item-content"
                  >
                    <div
                      className="ant-steps-item-title"
                    >
                      Basic
                    </div>
                  </div>
                </div>
              </div>
            </Step>
            <Step
              active={true}
              iconPrefix="ant"
              icons={
                Object {
                  "error": <ForwardRef(CloseOutlined)
                    className="ant-steps-error-icon"
                  />,
                  "finish": <ForwardRef(CheckOutlined)
                    className="ant-steps-finish-icon"
                  />,
                }
              }
              key="1"
              onStepClick={[Function]}
              prefixCls="ant-steps"
              progressDot={false}
              status="process"
              stepIcon={[Function]}
              stepIndex={1}
              stepNumber="2"
              title="Sources"
              wrapperStyle={Object {}}
            >
              <div
                className="ant-steps-item ant-steps-item-process ant-steps-item-active"
                style={Object {}}
              >
                <div
                  className="ant-steps-item-container"
                  onClick={[Function]}
                  role="button"
                  tabIndex={0}
                >
                  <div
                    className="ant-steps-item-tail"
                  />
                  <div
                    className="ant-steps-item-icon"
                  >
                    <span
                      className="ant-steps-icon"
                    >
                      2
                    </span>
                  </div>
                  <div
                    className="ant-steps-item-content"
                  >
                    <div
                      className="ant-steps-item-title"
                    >
                      Sources
                    </div>
                  </div>
                </div>
              </div>
            </Step>
          </div>
        </Steps>
      </Steps>
      <ForwardRef(InternalForm)
        form={
          Object {
            "__INTERNAL__": Object {
              "itemRef": [Function],
              "name": "create-claim",
            },
            "getFieldError": [Function],
            "getFieldInstance": [Function],
            "getFieldValue": [Function],
            "getFieldsError": [Function],
            "getFieldsValue": [Function],
            "getInternalHooks": [Function],
            "isFieldTouched": [Function],
            "isFieldValidating": [Function],
            "isFieldsTouched": [Function],
            "isFieldsValidating": [Function],
            "resetFields": [Function],
            "scrollToField": [Function],
            "setFields": [Function],
            "setFieldsValue": [Function],
            "submit": [Function],
            "validateFields": [Function],
          }
        }
        initialValues={
          Object {
            "checked_date": "2020-12-12T00:00:00.000Z",
            "claim_date": "2020-12-12T00:00:00.000Z",
            "claim_sources": "claim_sources",
            "claimant": 1,
            "description": Object {
              "blocks": Array [
                Object {
                  "data": Object {
                    "level": 2,
                    "text": "Editor.js",
                  },
                  "type": "header",
                },
                Object {
                  "data": Object {
                    "text": "Hey. Meet the new Editor. On this page you can see it in action — try to edit this text.",
                  },
                  "type": "paragraph",
                },
              ],
              "time": 1595747741807,
              "version": "2.18.0",
            },
            "rating": 1,
            "review": "review",
            "review_sources": "review_sources",
            "review_tag_line": "review_tag_line",
            "slug": "slug",
            "title": "title",
          }
        }
        labelCol={
          Object {
            "offset": 2,
            "span": 8,
          }
        }
        layout="vertical"
        name="create-claim"
        onFinish={[Function]}
        onFinishFailed={[Function]}
        onValuesChange={[Function]}
        scrollToFirstError={true}
        style={
          Object {
            "paddingTop": "24px",
          }
        }
        wrapperCol={
          Object {
            "offset": 2,
            "span": 20,
          }
        }
      >
        <SizeContextProvider>
          <ForwardRef(Form)
            className="ant-form ant-form-vertical"
            form={
              Object {
                "__INTERNAL__": Object {
                  "itemRef": [Function],
                  "name": "create-claim",
                },
                "getFieldError": [Function],
                "getFieldInstance": [Function],
                "getFieldValue": [Function],
                "getFieldsError": [Function],
                "getFieldsValue": [Function],
                "getInternalHooks": [Function],
                "isFieldTouched": [Function],
                "isFieldValidating": [Function],
                "isFieldsTouched": [Function],
                "isFieldsValidating": [Function],
                "resetFields": [Function],
                "scrollToField": [Function],
                "setFields": [Function],
                "setFieldsValue": [Function],
                "submit": [Function],
                "validateFields": [Function],
              }
            }
            id="create-claim"
            initialValues={
              Object {
                "checked_date": "2020-12-12T00:00:00.000Z",
                "claim_date": "2020-12-12T00:00:00.000Z",
                "claim_sources": "claim_sources",
                "claimant": 1,
                "description": Object {
                  "blocks": Array [
                    Object {
                      "data": Object {
                        "level": 2,
                        "text": "Editor.js",
                      },
                      "type": "header",
                    },
                    Object {
                      "data": Object {
                        "text": "Hey. Meet the new Editor. On this page you can see it in action — try to edit this text.",
                      },
                      "type": "paragraph",
                    },
                  ],
                  "time": 1595747741807,
                  "version": "2.18.0",
                },
                "rating": 1,
                "review": "review",
                "review_sources": "review_sources",
                "review_tag_line": "review_tag_line",
                "slug": "slug",
                "title": "title",
              }
            }
            name="create-claim"
            onFinish={[Function]}
            onFinishFailed={[Function]}
            onValuesChange={[Function]}
            style={
              Object {
                "paddingTop": "24px",
              }
            }
          >
            <form
              className="ant-form ant-form-vertical"
              id="create-claim"
              onSubmit={[Function]}
              style={
                Object {
                  "paddingTop": "24px",
                }
              }
            >
              <div
                style={
                  Object {
                    "display": "none",
                  }
                }
              >
                <FormItem
                  label="Claim"
                  name="claim"
                  rules={
                    Array [
                      Object {
                        "message": "Please input the Claim!",
                        "required": true,
                      },
                      Object {
                        "message": "Claim must be minimum 3 characters.",
                        "min": 3,
                      },
                      Object {
                        "max": 5000,
                        "message": "Claim must be maximum 5000 characters.",
                      },
                    ]
                  }
                >
                  <WrapperField
                    label="Claim"
                    messageVariables={
                      Object {
                        "label": "Claim",
                      }
                    }
                    name="claim"
                    onReset={[Function]}
                    rules={
                      Array [
                        Object {
                          "message": "Please input the Claim!",
                          "required": true,
                        },
                        Object {
                          "message": "Claim must be minimum 3 characters.",
                          "min": 3,
                        },
                        Object {
                          "max": 5000,
                          "message": "Claim must be maximum 5000 characters.",
                        },
                      ]
                    }
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_claim"
                      label="Claim"
                      messageVariables={
                        Object {
                          "label": "Claim",
                        }
                      }
                      name={
                        Array [
                          "claim",
                        ]
                      }
                      onReset={[Function]}
                      rules={
                        Array [
                          Object {
                            "message": "Please input the Claim!",
                            "required": true,
                          },
                          Object {
                            "message": "Claim must be minimum 3 characters.",
                            "min": 3,
                          },
                          Object {
                            "max": 5000,
                            "message": "Claim must be maximum 5000 characters.",
                          },
                        ]
                      }
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_claim"
                            label="Claim"
                            name="claim"
                            prefixCls="ant-form"
                            required={true}
                            requiredMark={true}
                            rules={
                              Array [
                                Object {
                                  "message": "Please input the Claim!",
                                  "required": true,
                                },
                                Object {
                                  "message": "Claim must be minimum 3 characters.",
                                  "min": 3,
                                },
                                Object {
                                  "max": 5000,
                                  "message": "Claim must be maximum 5000 characters.",
                                },
                              ]
                            }
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className="ant-form-item-required"
                                  htmlFor="create-claim_claim"
                                  title="Claim"
                                >
                                  Claim
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Claim"
                            name={
                              Array [
                                "claim",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            rules={
                              Array [
                                Object {
                                  "message": "Please input the Claim!",
                                  "required": true,
                                },
                                Object {
                                  "message": "Claim must be minimum 3 characters.",
                                  "min": 3,
                                },
                                Object {
                                  "max": 5000,
                                  "message": "Claim must be maximum 5000 characters.",
                                },
                              ]
                            }
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={2}
                                    >
                                      <TextArea
                                        id="create-claim_claim"
                                        onChange={[Function]}
                                        placeholder="Enter claim...."
                                        rows={6}
                                      >
                                        <ClearableLabeledInput
                                          bordered={true}
                                          element={
                                            <TextArea
                                              className=""
                                              id="create-claim_claim"
                                              onChange={[Function]}
                                              placeholder="Enter claim...."
                                              prefixCls="ant-input"
                                              rows={6}
                                            />
                                          }
                                          handleReset={[Function]}
                                          id="create-claim_claim"
                                          inputType="text"
                                          onChange={[Function]}
                                          placeholder="Enter claim...."
                                          prefixCls="ant-input"
                                          rows={6}
                                          triggerFocus={[Function]}
                                          value=""
                                        >
                                          <TextArea
                                            className=""
                                            id="create-claim_claim"
                                            onChange={[Function]}
                                            placeholder="Enter claim...."
                                            prefixCls="ant-input"
                                            rows={6}
                                            value=""
                                          >
                                            <ResizableTextArea
                                              className=""
                                              id="create-claim_claim"
                                              onChange={[Function]}
                                              onKeyDown={[Function]}
                                              placeholder="Enter claim...."
                                              prefixCls="ant-input"
                                              rows={6}
                                              value=""
                                            >
                                              <ResizeObserver
                                                disabled={true}
                                                onResize={[Function]}
                                              >
                                                <textarea
                                                  className="ant-input"
                                                  id="create-claim_claim"
                                                  onChange={[Function]}
                                                  onKeyDown={[Function]}
                                                  placeholder="Enter claim...."
                                                  rows={6}
                                                  style={Object {}}
                                                  value=""
                                                />
                                              </ResizeObserver>
                                            </ResizableTextArea>
                                          </TextArea>
                                        </ClearableLabeledInput>
                                      </TextArea>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Slug"
                  name="slug"
                  rules={
                    Array [
                      Object {
                        "message": "Please input the slug!",
                        "required": true,
                      },
                      Object {
                        "message": "Please enter valid slug!",
                        "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                      },
                      Object {
                        "max": 150,
                        "message": "Slug must be maximum 150 characters.",
                      },
                    ]
                  }
                >
                  <WrapperField
                    label="Slug"
                    messageVariables={
                      Object {
                        "label": "Slug",
                      }
                    }
                    name="slug"
                    onReset={[Function]}
                    rules={
                      Array [
                        Object {
                          "message": "Please input the slug!",
                          "required": true,
                        },
                        Object {
                          "message": "Please enter valid slug!",
                          "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                        },
                        Object {
                          "max": 150,
                          "message": "Slug must be maximum 150 characters.",
                        },
                      ]
                    }
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_slug"
                      label="Slug"
                      messageVariables={
                        Object {
                          "label": "Slug",
                        }
                      }
                      name={
                        Array [
                          "slug",
                        ]
                      }
                      onReset={[Function]}
                      rules={
                        Array [
                          Object {
                            "message": "Please input the slug!",
                            "required": true,
                          },
                          Object {
                            "message": "Please enter valid slug!",
                            "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                          },
                          Object {
                            "max": 150,
                            "message": "Slug must be maximum 150 characters.",
                          },
                        ]
                      }
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_slug"
                            label="Slug"
                            name="slug"
                            prefixCls="ant-form"
                            required={true}
                            requiredMark={true}
                            rules={
                              Array [
                                Object {
                                  "message": "Please input the slug!",
                                  "required": true,
                                },
                                Object {
                                  "message": "Please enter valid slug!",
                                  "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                                },
                                Object {
                                  "max": 150,
                                  "message": "Slug must be maximum 150 characters.",
                                },
                              ]
                            }
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className="ant-form-item-required"
                                  htmlFor="create-claim_slug"
                                  title="Slug"
                                >
                                  Slug
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Slug"
                            name={
                              Array [
                                "slug",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            rules={
                              Array [
                                Object {
                                  "message": "Please input the slug!",
                                  "required": true,
                                },
                                Object {
                                  "message": "Please enter valid slug!",
                                  "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                                },
                                Object {
                                  "max": 150,
                                  "message": "Slug must be maximum 150 characters.",
                                },
                              ]
                            }
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={2}
                                      value="slug"
                                    >
                                      <Input
                                        id="create-claim_slug"
                                        onChange={[Function]}
                                        type="text"
                                        value="slug"
                                      >
                                        <ClearableLabeledInput
                                          bordered={true}
                                          element={
                                            <input
                                              className="ant-input"
                                              id="create-claim_slug"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              onKeyDown={[Function]}
                                              type="text"
                                              value="slug"
                                            />
                                          }
                                          focused={false}
                                          handleReset={[Function]}
                                          id="create-claim_slug"
                                          inputType="input"
                                          onChange={[Function]}
                                          prefixCls="ant-input"
                                          triggerFocus={[Function]}
                                          type="text"
                                          value="slug"
                                        >
                                          <input
                                            className="ant-input"
                                            id="create-claim_slug"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            onKeyDown={[Function]}
                                            type="text"
                                            value="slug"
                                          />
                                        </ClearableLabeledInput>
                                      </Input>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Fact"
                  name="fact"
                >
                  <WrapperField
                    label="Fact"
                    messageVariables={
                      Object {
                        "label": "Fact",
                      }
                    }
                    name="fact"
                    onReset={[Function]}
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_fact"
                      label="Fact"
                      messageVariables={
                        Object {
                          "label": "Fact",
                        }
                      }
                      name={
                        Array [
                          "fact",
                        ]
                      }
                      onReset={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_fact"
                            label="Fact"
                            name="fact"
                            prefixCls="ant-form"
                            required={false}
                            requiredMark={true}
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className=""
                                  htmlFor="create-claim_fact"
                                  title="Fact"
                                >
                                  Fact
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Fact"
                            name={
                              Array [
                                "fact",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={2}
                                    >
                                      <TextArea
                                        id="create-claim_fact"
                                        onChange={[Function]}
                                        placeholder="Enter Fact ..."
                                        rows={6}
                                      >
                                        <ClearableLabeledInput
                                          bordered={true}
                                          element={
                                            <TextArea
                                              className=""
                                              id="create-claim_fact"
                                              onChange={[Function]}
                                              placeholder="Enter Fact ..."
                                              prefixCls="ant-input"
                                              rows={6}
                                            />
                                          }
                                          handleReset={[Function]}
                                          id="create-claim_fact"
                                          inputType="text"
                                          onChange={[Function]}
                                          placeholder="Enter Fact ..."
                                          prefixCls="ant-input"
                                          rows={6}
                                          triggerFocus={[Function]}
                                          value=""
                                        >
                                          <TextArea
                                            className=""
                                            id="create-claim_fact"
                                            onChange={[Function]}
                                            placeholder="Enter Fact ..."
                                            prefixCls="ant-input"
                                            rows={6}
                                            value=""
                                          >
                                            <ResizableTextArea
                                              className=""
                                              id="create-claim_fact"
                                              onChange={[Function]}
                                              onKeyDown={[Function]}
                                              placeholder="Enter Fact ..."
                                              prefixCls="ant-input"
                                              rows={6}
                                              value=""
                                            >
                                              <ResizeObserver
                                                disabled={true}
                                                onResize={[Function]}
                                              >
                                                <textarea
                                                  className="ant-input"
                                                  id="create-claim_fact"
                                                  onChange={[Function]}
                                                  onKeyDown={[Function]}
                                                  placeholder="Enter Fact ..."
                                                  rows={6}
                                                  style={Object {}}
                                                  value=""
                                                />
                                              </ResizeObserver>
                                            </ResizableTextArea>
                                          </TextArea>
                                        </ClearableLabeledInput>
                                      </TextArea>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Claimant"
                  name="claimant"
                  rules={
                    Array [
                      Object {
                        "message": "Please add claimant!",
                        "required": true,
                      },
                    ]
                  }
                >
                  <WrapperField
                    label="Claimant"
                    messageVariables={
                      Object {
                        "label": "Claimant",
                      }
                    }
                    name="claimant"
                    onReset={[Function]}
                    rules={
                      Array [
                        Object {
                          "message": "Please add claimant!",
                          "required": true,
                        },
                      ]
                    }
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_claimant"
                      label="Claimant"
                      messageVariables={
                        Object {
                          "label": "Claimant",
                        }
                      }
                      name={
                        Array [
                          "claimant",
                        ]
                      }
                      onReset={[Function]}
                      rules={
                        Array [
                          Object {
                            "message": "Please add claimant!",
                            "required": true,
                          },
                        ]
                      }
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_claimant"
                            label="Claimant"
                            name="claimant"
                            prefixCls="ant-form"
                            required={true}
                            requiredMark={true}
                            rules={
                              Array [
                                Object {
                                  "message": "Please add claimant!",
                                  "required": true,
                                },
                              ]
                            }
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className="ant-form-item-required"
                                  htmlFor="create-claim_claimant"
                                  title="Claimant"
                                >
                                  Claimant
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Claimant"
                            name={
                              Array [
                                "claimant",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            rules={
                              Array [
                                Object {
                                  "message": "Please add claimant!",
                                  "required": true,
                                },
                              ]
                            }
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={2}
                                      value={1}
                                    >
                                      <Selector
                                        action="Claimants"
                                        id="create-claim_claimant"
                                        onChange={[Function]}
                                        value={1}
                                      >
                                        <ForwardRef(InternalSelect)
                                          allowClear={true}
                                          bordered={true}
                                          defaultValue={
                                            Array [
                                              1,
                                            ]
                                          }
                                          filterOption={[Function]}
                                          getPopupContainer={[Function]}
                                          listHeight={128}
                                          loading={false}
                                          notFoundContent={null}
                                          onChange={[Function]}
                                          onPopupScroll={[Function]}
                                          onSearch={[Function]}
                                          placeholder="Select claimants"
                                        >
                                          <Select
                                            allowClear={true}
                                            className=""
                                            clearIcon={<ForwardRef(CloseCircleFilled) />}
                                            defaultValue={
                                              Array [
                                                1,
                                              ]
                                            }
                                            dropdownClassName=""
                                            filterOption={[Function]}
                                            getPopupContainer={[Function]}
                                            inputIcon={[Function]}
                                            listHeight={128}
                                            listItemHeight={24}
                                            loading={false}
                                            menuItemSelectedIcon={null}
                                            notFoundContent={null}
                                            onChange={[Function]}
                                            onPopupScroll={[Function]}
                                            onSearch={[Function]}
                                            placeholder="Select claimants"
                                            prefixCls="ant-select"
                                            removeIcon={<ForwardRef(CloseOutlined) />}
                                            transitionName="slide-up"
                                          >
                                            <ForwardRef(Select)
                                              allowClear={true}
                                              className=""
                                              clearIcon={<ForwardRef(CloseCircleFilled) />}
                                              defaultValue={
                                                Array [
                                                  1,
                                                ]
                                              }
                                              dropdownClassName=""
                                              filterOption={[Function]}
                                              getPopupContainer={[Function]}
                                              inputIcon={[Function]}
                                              listHeight={128}
                                              listItemHeight={24}
                                              loading={false}
                                              menuItemSelectedIcon={null}
                                              notFoundContent={null}
                                              onChange={[Function]}
                                              onPopupScroll={[Function]}
                                              onSearch={[Function]}
                                              placeholder="Select claimants"
                                              prefixCls="ant-select"
                                              removeIcon={<ForwardRef(CloseOutlined) />}
                                              transitionName="slide-up"
                                            >
                                              <div
                                                className="ant-select ant-select-single ant-select-allow-clear ant-select-show-arrow"
                                                onBlur={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                onKeyUp={[Function]}
                                                onMouseDown={[Function]}
                                              >
                                                <SelectTrigger
                                                  containerWidth={null}
                                                  dropdownClassName=""
                                                  empty={true}
                                                  getPopupContainer={[Function]}
                                                  getTriggerDOMNode={[Function]}
                                                  popupElement={
                                                    <ForwardRef(OptionList)
                                                      childrenAsData={true}
                                                      defaultActiveFirstOption={true}
                                                      flattenOptions={Array []}
                                                      height={128}
                                                      id="rc_select_TEST_OR_SSR"
                                                      itemHeight={24}
                                                      menuItemSelectedIcon={null}
                                                      multiple={false}
                                                      notFoundContent={null}
                                                      onActiveValue={[Function]}
                                                      onMouseEnter={[Function]}
                                                      onScroll={[Function]}
                                                      onSelect={[Function]}
                                                      onToggleOpen={[Function]}
                                                      options={Array []}
                                                      prefixCls="ant-select"
                                                      searchValue=""
                                                      values={
                                                        Set {
                                                          1,
                                                        }
                                                      }
                                                      virtual={true}
                                                    />
                                                  }
                                                  prefixCls="ant-select"
                                                  transitionName="slide-up"
                                                  visible={false}
                                                >
                                                  <Trigger
                                                    action={Array []}
                                                    afterPopupVisibleChange={[Function]}
                                                    autoDestroy={false}
                                                    blurDelay={0.15}
                                                    builtinPlacements={
                                                      Object {
                                                        "bottomLeft": Object {
                                                          "offset": Array [
                                                            0,
                                                            4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "tl",
                                                            "bl",
                                                          ],
                                                        },
                                                        "bottomRight": Object {
                                                          "offset": Array [
                                                            0,
                                                            4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "tr",
                                                            "br",
                                                          ],
                                                        },
                                                        "topLeft": Object {
                                                          "offset": Array [
                                                            0,
                                                            -4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "bl",
                                                            "tl",
                                                          ],
                                                        },
                                                        "topRight": Object {
                                                          "offset": Array [
                                                            0,
                                                            -4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "br",
                                                            "tr",
                                                          ],
                                                        },
                                                      }
                                                    }
                                                    defaultPopupVisible={false}
                                                    destroyPopupOnHide={false}
                                                    focusDelay={0}
                                                    getDocument={[Function]}
                                                    getPopupClassNameFromAlign={[Function]}
                                                    getPopupContainer={[Function]}
                                                    getTriggerDOMNode={[Function]}
                                                    hideAction={Array []}
                                                    mask={false}
                                                    maskClosable={true}
                                                    mouseEnterDelay={0}
                                                    mouseLeaveDelay={0.1}
                                                    onPopupAlign={[Function]}
                                                    onPopupVisibleChange={[Function]}
                                                    popup={
                                                      <div>
                                                        <ForwardRef(OptionList)
                                                          childrenAsData={true}
                                                          defaultActiveFirstOption={true}
                                                          flattenOptions={Array []}
                                                          height={128}
                                                          id="rc_select_TEST_OR_SSR"
                                                          itemHeight={24}
                                                          menuItemSelectedIcon={null}
                                                          multiple={false}
                                                          notFoundContent={null}
                                                          onActiveValue={[Function]}
                                                          onMouseEnter={[Function]}
                                                          onScroll={[Function]}
                                                          onSelect={[Function]}
                                                          onToggleOpen={[Function]}
                                                          options={Array []}
                                                          prefixCls="ant-select"
                                                          searchValue=""
                                                          values={
                                                            Set {
                                                              1,
                                                            }
                                                          }
                                                          virtual={true}
                                                        />
                                                      </div>
                                                    }
                                                    popupAlign={Object {}}
                                                    popupClassName="ant-select-dropdown-empty"
                                                    popupPlacement="bottomLeft"
                                                    popupStyle={
                                                      Object {
                                                        "minWidth": null,
                                                        "width": null,
                                                      }
                                                    }
                                                    popupTransitionName="slide-up"
                                                    popupVisible={false}
                                                    prefixCls="ant-select-dropdown"
                                                    showAction={Array []}
                                                  >
                                                    <Selector
                                                      accessibilityIndex={0}
                                                      activeValue={null}
                                                      allowClear={true}
                                                      className=""
                                                      clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                      defaultValue={
                                                        Array [
                                                          1,
                                                        ]
                                                      }
                                                      domRef={
                                                        Object {
                                                          "current": <div
                                                            class="ant-select-selector"
                                                          >
                                                            <span
                                                              class="ant-select-selection-search"
                                                            >
                                                              <input
                                                                aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                aria-autocomplete="list"
                                                                aria-controls="rc_select_TEST_OR_SSR_list"
                                                                aria-haspopup="listbox"
                                                                aria-owns="rc_select_TEST_OR_SSR_list"
                                                                autocomplete="off"
                                                                class="ant-select-selection-search-input"
                                                                id="rc_select_TEST_OR_SSR"
                                                                readonly=""
                                                                role="combobox"
                                                                style="opacity: 0;"
                                                                type="search"
                                                                unselectable="on"
                                                                value=""
                                                              />
                                                            </span>
                                                            <span
                                                              class="ant-select-selection-item"
                                                              title="1"
                                                            >
                                                              1
                                                            </span>
                                                          </div>,
                                                        }
                                                      }
                                                      dropdownClassName=""
                                                      filterOption={[Function]}
                                                      getPopupContainer={[Function]}
                                                      id="rc_select_TEST_OR_SSR"
                                                      inputElement={null}
                                                      inputIcon={[Function]}
                                                      key="trigger"
                                                      listHeight={128}
                                                      listItemHeight={24}
                                                      loading={false}
                                                      menuItemSelectedIcon={null}
                                                      multiple={false}
                                                      notFoundContent={null}
                                                      onChange={[Function]}
                                                      onPopupScroll={[Function]}
                                                      onSearch={[Function]}
                                                      onSearchSubmit={[Function]}
                                                      onSelect={[Function]}
                                                      onToggleOpen={[Function]}
                                                      placeholder="Select claimants"
                                                      prefixCls="ant-select"
                                                      removeIcon={<ForwardRef(CloseOutlined) />}
                                                      searchValue=""
                                                      showSearch={false}
                                                      tokenWithEnter={false}
                                                      transitionName="slide-up"
                                                      values={
                                                        Array [
                                                          Object {
                                                            "disabled": undefined,
                                                            "key": 1,
                                                            "label": 1,
                                                            "value": 1,
                                                          },
                                                        ]
                                                      }
                                                    >
                                                      <div
                                                        className="ant-select-selector"
                                                        onClick={[Function]}
                                                        onMouseDown={[Function]}
                                                      >
                                                        <SingleSelector
                                                          accessibilityIndex={0}
                                                          activeValue={null}
                                                          allowClear={true}
                                                          className=""
                                                          clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                          defaultValue={
                                                            Array [
                                                              1,
                                                            ]
                                                          }
                                                          domRef={
                                                            Object {
                                                              "current": <div
                                                                class="ant-select-selector"
                                                              >
                                                                <span
                                                                  class="ant-select-selection-search"
                                                                >
                                                                  <input
                                                                    aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                    aria-autocomplete="list"
                                                                    aria-controls="rc_select_TEST_OR_SSR_list"
                                                                    aria-haspopup="listbox"
                                                                    aria-owns="rc_select_TEST_OR_SSR_list"
                                                                    autocomplete="off"
                                                                    class="ant-select-selection-search-input"
                                                                    id="rc_select_TEST_OR_SSR"
                                                                    readonly=""
                                                                    role="combobox"
                                                                    style="opacity: 0;"
                                                                    type="search"
                                                                    unselectable="on"
                                                                    value=""
                                                                  />
                                                                </span>
                                                                <span
                                                                  class="ant-select-selection-item"
                                                                  title="1"
                                                                >
                                                                  1
                                                                </span>
                                                              </div>,
                                                            }
                                                          }
                                                          dropdownClassName=""
                                                          filterOption={[Function]}
                                                          getPopupContainer={[Function]}
                                                          id="rc_select_TEST_OR_SSR"
                                                          inputElement={null}
                                                          inputIcon={[Function]}
                                                          inputRef={
                                                            Object {
                                                              "current": <input
                                                                aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                aria-autocomplete="list"
                                                                aria-controls="rc_select_TEST_OR_SSR_list"
                                                                aria-haspopup="listbox"
                                                                aria-owns="rc_select_TEST_OR_SSR_list"
                                                                autocomplete="off"
                                                                class="ant-select-selection-search-input"
                                                                id="rc_select_TEST_OR_SSR"
                                                                readonly=""
                                                                role="combobox"
                                                                style="opacity: 0;"
                                                                type="search"
                                                                unselectable="on"
                                                                value=""
                                                              />,
                                                            }
                                                          }
                                                          listHeight={128}
                                                          listItemHeight={24}
                                                          loading={false}
                                                          menuItemSelectedIcon={null}
                                                          multiple={false}
                                                          notFoundContent={null}
                                                          onChange={[Function]}
                                                          onInputChange={[Function]}
                                                          onInputCompositionEnd={[Function]}
                                                          onInputCompositionStart={[Function]}
                                                          onInputKeyDown={[Function]}
                                                          onInputMouseDown={[Function]}
                                                          onInputPaste={[Function]}
                                                          onPopupScroll={[Function]}
                                                          onSearch={[Function]}
                                                          onSearchSubmit={[Function]}
                                                          onSelect={[Function]}
                                                          onToggleOpen={[Function]}
                                                          placeholder="Select claimants"
                                                          prefixCls="ant-select"
                                                          removeIcon={<ForwardRef(CloseOutlined) />}
                                                          searchValue=""
                                                          showSearch={false}
                                                          tokenWithEnter={false}
                                                          transitionName="slide-up"
                                                          values={
                                                            Array [
                                                              Object {
                                                                "disabled": undefined,
                                                                "key": 1,
                                                                "label": 1,
                                                                "value": 1,
                                                              },
                                                            ]
                                                          }
                                                        >
                                                          <span
                                                            className="ant-select-selection-search"
                                                          >
                                                            <Input
                                                              accessibilityIndex={0}
                                                              attrs={Object {}}
                                                              editable={false}
                                                              id="rc_select_TEST_OR_SSR"
                                                              inputElement={null}
                                                              onChange={[Function]}
                                                              onCompositionEnd={[Function]}
                                                              onCompositionStart={[Function]}
                                                              onKeyDown={[Function]}
                                                              onMouseDown={[Function]}
                                                              onPaste={[Function]}
                                                              prefixCls="ant-select"
                                                              value=""
                                                            >
                                                              <input
                                                                aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                aria-autocomplete="list"
                                                                aria-controls="rc_select_TEST_OR_SSR_list"
                                                                aria-haspopup="listbox"
                                                                aria-owns="rc_select_TEST_OR_SSR_list"
                                                                autoComplete="off"
                                                                className="ant-select-selection-search-input"
                                                                id="rc_select_TEST_OR_SSR"
                                                                onChange={[Function]}
                                                                onCompositionEnd={[Function]}
                                                                onCompositionStart={[Function]}
                                                                onKeyDown={[Function]}
                                                                onMouseDown={[Function]}
                                                                onPaste={[Function]}
                                                                readOnly={true}
                                                                role="combobox"
                                                                style={
                                                                  Object {
                                                                    "opacity": 0,
                                                                  }
                                                                }
                                                                type="search"
                                                                unselectable="on"
                                                                value=""
                                                              />
                                                            </Input>
                                                          </span>
                                                          <span
                                                            className="ant-select-selection-item"
                                                            title="1"
                                                          >
                                                            1
                                                          </span>
                                                        </SingleSelector>
                                                      </div>
                                                    </Selector>
                                                  </Trigger>
                                                </SelectTrigger>
                                                <TransBtn
                                                  className="ant-select-arrow"
                                                  customizeIcon={[Function]}
                                                  customizeIconProps={
                                                    Object {
                                                      "focused": false,
                                                      "loading": false,
                                                      "open": undefined,
                                                      "searchValue": "",
                                                      "showSearch": false,
                                                    }
                                                  }
                                                >
                                                  <span
                                                    aria-hidden={true}
                                                    className="ant-select-arrow"
                                                    onMouseDown={[Function]}
                                                    style={
                                                      Object {
                                                        "WebkitUserSelect": "none",
                                                        "userSelect": "none",
                                                      }
                                                    }
                                                    unselectable="on"
                                                  >
                                                    <ForwardRef(DownOutlined)
                                                      className="ant-select-suffix"
                                                    >
                                                      <AntdIcon
                                                        className="ant-select-suffix"
                                                        icon={
                                                          Object {
                                                            "icon": Object {
                                                              "attrs": Object {
                                                                "focusable": "false",
                                                                "viewBox": "64 64 896 896",
                                                              },
                                                              "children": Array [
                                                                Object {
                                                                  "attrs": Object {
                                                                    "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                                                  },
                                                                  "tag": "path",
                                                                },
                                                              ],
                                                              "tag": "svg",
                                                            },
                                                            "name": "down",
                                                            "theme": "outlined",
                                                          }
                                                        }
                                                      >
                                                        <span
                                                          aria-label="down"
                                                          className="anticon anticon-down ant-select-suffix"
                                                          role="img"
                                                        >
                                                          <IconReact
                                                            className=""
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "down",
                                                                "theme": "outlined",
                                                              }
                                                            }
                                                          >
                                                            <svg
                                                              aria-hidden="true"
                                                              className=""
                                                              data-icon="down"
                                                              fill="currentColor"
                                                              focusable="false"
                                                              height="1em"
                                                              key="svg-down"
                                                              viewBox="64 64 896 896"
                                                              width="1em"
                                                            >
                                                              <path
                                                                d="M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z"
                                                                key="svg-down-svg-0"
                                                              />
                                                            </svg>
                                                          </IconReact>
                                                        </span>
                                                      </AntdIcon>
                                                    </ForwardRef(DownOutlined)>
                                                  </span>
                                                </TransBtn>
                                                <TransBtn
                                                  className="ant-select-clear"
                                                  customizeIcon={<ForwardRef(CloseCircleFilled) />}
                                                  onMouseDown={[Function]}
                                                >
                                                  <span
                                                    aria-hidden={true}
                                                    className="ant-select-clear"
                                                    onMouseDown={[Function]}
                                                    style={
                                                      Object {
                                                        "WebkitUserSelect": "none",
                                                        "userSelect": "none",
                                                      }
                                                    }
                                                    unselectable="on"
                                                  >
                                                    <ForwardRef(CloseCircleFilled)>
                                                      <AntdIcon
                                                        icon={
                                                          Object {
                                                            "icon": Object {
                                                              "attrs": Object {
                                                                "focusable": "false",
                                                                "viewBox": "64 64 896 896",
                                                              },
                                                              "children": Array [
                                                                Object {
                                                                  "attrs": Object {
                                                                    "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                  },
                                                                  "tag": "path",
                                                                },
                                                              ],
                                                              "tag": "svg",
                                                            },
                                                            "name": "close-circle",
                                                            "theme": "filled",
                                                          }
                                                        }
                                                      >
                                                        <span
                                                          aria-label="close-circle"
                                                          className="anticon anticon-close-circle"
                                                          role="img"
                                                        >
                                                          <IconReact
                                                            className=""
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "close-circle",
                                                                "theme": "filled",
                                                              }
                                                            }
                                                          >
                                                            <svg
                                                              aria-hidden="true"
                                                              className=""
                                                              data-icon="close-circle"
                                                              fill="currentColor"
                                                              focusable="false"
                                                              height="1em"
                                                              key="svg-close-circle"
                                                              viewBox="64 64 896 896"
                                                              width="1em"
                                                            >
                                                              <path
                                                                d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z"
                                                                key="svg-close-circle-svg-0"
                                                              />
                                                            </svg>
                                                          </IconReact>
                                                        </span>
                                                      </AntdIcon>
                                                    </ForwardRef(CloseCircleFilled)>
                                                  </span>
                                                </TransBtn>
                                              </div>
                                            </ForwardRef(Select)>
                                          </Select>
                                        </ForwardRef(InternalSelect)>
                                      </Selector>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Rating"
                  name="rating"
                  rules={
                    Array [
                      Object {
                        "message": "Please add rating!",
                        "required": true,
                      },
                    ]
                  }
                >
                  <WrapperField
                    label="Rating"
                    messageVariables={
                      Object {
                        "label": "Rating",
                      }
                    }
                    name="rating"
                    onReset={[Function]}
                    rules={
                      Array [
                        Object {
                          "message": "Please add rating!",
                          "required": true,
                        },
                      ]
                    }
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_rating"
                      label="Rating"
                      messageVariables={
                        Object {
                          "label": "Rating",
                        }
                      }
                      name={
                        Array [
                          "rating",
                        ]
                      }
                      onReset={[Function]}
                      rules={
                        Array [
                          Object {
                            "message": "Please add rating!",
                            "required": true,
                          },
                        ]
                      }
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_rating"
                            label="Rating"
                            name="rating"
                            prefixCls="ant-form"
                            required={true}
                            requiredMark={true}
                            rules={
                              Array [
                                Object {
                                  "message": "Please add rating!",
                                  "required": true,
                                },
                              ]
                            }
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className="ant-form-item-required"
                                  htmlFor="create-claim_rating"
                                  title="Rating"
                                >
                                  Rating
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Rating"
                            name={
                              Array [
                                "rating",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            rules={
                              Array [
                                Object {
                                  "message": "Please add rating!",
                                  "required": true,
                                },
                              ]
                            }
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={2}
                                      value={1}
                                    >
                                      <Selector
                                        action="Ratings"
                                        id="create-claim_rating"
                                        onChange={[Function]}
                                        value={1}
                                      >
                                        <ForwardRef(InternalSelect)
                                          allowClear={true}
                                          bordered={true}
                                          defaultValue={
                                            Array [
                                              1,
                                            ]
                                          }
                                          filterOption={[Function]}
                                          getPopupContainer={[Function]}
                                          listHeight={128}
                                          loading={false}
                                          notFoundContent={null}
                                          onChange={[Function]}
                                          onPopupScroll={[Function]}
                                          onSearch={[Function]}
                                          placeholder="Select ratings"
                                        >
                                          <Select
                                            allowClear={true}
                                            className=""
                                            clearIcon={<ForwardRef(CloseCircleFilled) />}
                                            defaultValue={
                                              Array [
                                                1,
                                              ]
                                            }
                                            dropdownClassName=""
                                            filterOption={[Function]}
                                            getPopupContainer={[Function]}
                                            inputIcon={[Function]}
                                            listHeight={128}
                                            listItemHeight={24}
                                            loading={false}
                                            menuItemSelectedIcon={null}
                                            notFoundContent={null}
                                            onChange={[Function]}
                                            onPopupScroll={[Function]}
                                            onSearch={[Function]}
                                            placeholder="Select ratings"
                                            prefixCls="ant-select"
                                            removeIcon={<ForwardRef(CloseOutlined) />}
                                            transitionName="slide-up"
                                          >
                                            <ForwardRef(Select)
                                              allowClear={true}
                                              className=""
                                              clearIcon={<ForwardRef(CloseCircleFilled) />}
                                              defaultValue={
                                                Array [
                                                  1,
                                                ]
                                              }
                                              dropdownClassName=""
                                              filterOption={[Function]}
                                              getPopupContainer={[Function]}
                                              inputIcon={[Function]}
                                              listHeight={128}
                                              listItemHeight={24}
                                              loading={false}
                                              menuItemSelectedIcon={null}
                                              notFoundContent={null}
                                              onChange={[Function]}
                                              onPopupScroll={[Function]}
                                              onSearch={[Function]}
                                              placeholder="Select ratings"
                                              prefixCls="ant-select"
                                              removeIcon={<ForwardRef(CloseOutlined) />}
                                              transitionName="slide-up"
                                            >
                                              <div
                                                className="ant-select ant-select-single ant-select-allow-clear ant-select-show-arrow"
                                                onBlur={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                onKeyUp={[Function]}
                                                onMouseDown={[Function]}
                                              >
                                                <SelectTrigger
                                                  containerWidth={null}
                                                  dropdownClassName=""
                                                  empty={true}
                                                  getPopupContainer={[Function]}
                                                  getTriggerDOMNode={[Function]}
                                                  popupElement={
                                                    <ForwardRef(OptionList)
                                                      childrenAsData={true}
                                                      defaultActiveFirstOption={true}
                                                      flattenOptions={Array []}
                                                      height={128}
                                                      id="rc_select_TEST_OR_SSR"
                                                      itemHeight={24}
                                                      menuItemSelectedIcon={null}
                                                      multiple={false}
                                                      notFoundContent={null}
                                                      onActiveValue={[Function]}
                                                      onMouseEnter={[Function]}
                                                      onScroll={[Function]}
                                                      onSelect={[Function]}
                                                      onToggleOpen={[Function]}
                                                      options={Array []}
                                                      prefixCls="ant-select"
                                                      searchValue=""
                                                      values={
                                                        Set {
                                                          1,
                                                        }
                                                      }
                                                      virtual={true}
                                                    />
                                                  }
                                                  prefixCls="ant-select"
                                                  transitionName="slide-up"
                                                  visible={false}
                                                >
                                                  <Trigger
                                                    action={Array []}
                                                    afterPopupVisibleChange={[Function]}
                                                    autoDestroy={false}
                                                    blurDelay={0.15}
                                                    builtinPlacements={
                                                      Object {
                                                        "bottomLeft": Object {
                                                          "offset": Array [
                                                            0,
                                                            4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "tl",
                                                            "bl",
                                                          ],
                                                        },
                                                        "bottomRight": Object {
                                                          "offset": Array [
                                                            0,
                                                            4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "tr",
                                                            "br",
                                                          ],
                                                        },
                                                        "topLeft": Object {
                                                          "offset": Array [
                                                            0,
                                                            -4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "bl",
                                                            "tl",
                                                          ],
                                                        },
                                                        "topRight": Object {
                                                          "offset": Array [
                                                            0,
                                                            -4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "br",
                                                            "tr",
                                                          ],
                                                        },
                                                      }
                                                    }
                                                    defaultPopupVisible={false}
                                                    destroyPopupOnHide={false}
                                                    focusDelay={0}
                                                    getDocument={[Function]}
                                                    getPopupClassNameFromAlign={[Function]}
                                                    getPopupContainer={[Function]}
                                                    getTriggerDOMNode={[Function]}
                                                    hideAction={Array []}
                                                    mask={false}
                                                    maskClosable={true}
                                                    mouseEnterDelay={0}
                                                    mouseLeaveDelay={0.1}
                                                    onPopupAlign={[Function]}
                                                    onPopupVisibleChange={[Function]}
                                                    popup={
                                                      <div>
                                                        <ForwardRef(OptionList)
                                                          childrenAsData={true}
                                                          defaultActiveFirstOption={true}
                                                          flattenOptions={Array []}
                                                          height={128}
                                                          id="rc_select_TEST_OR_SSR"
                                                          itemHeight={24}
                                                          menuItemSelectedIcon={null}
                                                          multiple={false}
                                                          notFoundContent={null}
                                                          onActiveValue={[Function]}
                                                          onMouseEnter={[Function]}
                                                          onScroll={[Function]}
                                                          onSelect={[Function]}
                                                          onToggleOpen={[Function]}
                                                          options={Array []}
                                                          prefixCls="ant-select"
                                                          searchValue=""
                                                          values={
                                                            Set {
                                                              1,
                                                            }
                                                          }
                                                          virtual={true}
                                                        />
                                                      </div>
                                                    }
                                                    popupAlign={Object {}}
                                                    popupClassName="ant-select-dropdown-empty"
                                                    popupPlacement="bottomLeft"
                                                    popupStyle={
                                                      Object {
                                                        "minWidth": null,
                                                        "width": null,
                                                      }
                                                    }
                                                    popupTransitionName="slide-up"
                                                    popupVisible={false}
                                                    prefixCls="ant-select-dropdown"
                                                    showAction={Array []}
                                                  >
                                                    <Selector
                                                      accessibilityIndex={0}
                                                      activeValue={null}
                                                      allowClear={true}
                                                      className=""
                                                      clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                      defaultValue={
                                                        Array [
                                                          1,
                                                        ]
                                                      }
                                                      domRef={
                                                        Object {
                                                          "current": <div
                                                            class="ant-select-selector"
                                                          >
                                                            <span
                                                              class="ant-select-selection-search"
                                                            >
                                                              <input
                                                                aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                aria-autocomplete="list"
                                                                aria-controls="rc_select_TEST_OR_SSR_list"
                                                                aria-haspopup="listbox"
                                                                aria-owns="rc_select_TEST_OR_SSR_list"
                                                                autocomplete="off"
                                                                class="ant-select-selection-search-input"
                                                                id="rc_select_TEST_OR_SSR"
                                                                readonly=""
                                                                role="combobox"
                                                                style="opacity: 0;"
                                                                type="search"
                                                                unselectable="on"
                                                                value=""
                                                              />
                                                            </span>
                                                            <span
                                                              class="ant-select-selection-item"
                                                              title="1"
                                                            >
                                                              1
                                                            </span>
                                                          </div>,
                                                        }
                                                      }
                                                      dropdownClassName=""
                                                      filterOption={[Function]}
                                                      getPopupContainer={[Function]}
                                                      id="rc_select_TEST_OR_SSR"
                                                      inputElement={null}
                                                      inputIcon={[Function]}
                                                      key="trigger"
                                                      listHeight={128}
                                                      listItemHeight={24}
                                                      loading={false}
                                                      menuItemSelectedIcon={null}
                                                      multiple={false}
                                                      notFoundContent={null}
                                                      onChange={[Function]}
                                                      onPopupScroll={[Function]}
                                                      onSearch={[Function]}
                                                      onSearchSubmit={[Function]}
                                                      onSelect={[Function]}
                                                      onToggleOpen={[Function]}
                                                      placeholder="Select ratings"
                                                      prefixCls="ant-select"
                                                      removeIcon={<ForwardRef(CloseOutlined) />}
                                                      searchValue=""
                                                      showSearch={false}
                                                      tokenWithEnter={false}
                                                      transitionName="slide-up"
                                                      values={
                                                        Array [
                                                          Object {
                                                            "disabled": undefined,
                                                            "key": 1,
                                                            "label": 1,
                                                            "value": 1,
                                                          },
                                                        ]
                                                      }
                                                    >
                                                      <div
                                                        className="ant-select-selector"
                                                        onClick={[Function]}
                                                        onMouseDown={[Function]}
                                                      >
                                                        <SingleSelector
                                                          accessibilityIndex={0}
                                                          activeValue={null}
                                                          allowClear={true}
                                                          className=""
                                                          clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                          defaultValue={
                                                            Array [
                                                              1,
                                                            ]
                                                          }
                                                          domRef={
                                                            Object {
                                                              "current": <div
                                                                class="ant-select-selector"
                                                              >
                                                                <span
                                                                  class="ant-select-selection-search"
                                                                >
                                                                  <input
                                                                    aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                    aria-autocomplete="list"
                                                                    aria-controls="rc_select_TEST_OR_SSR_list"
                                                                    aria-haspopup="listbox"
                                                                    aria-owns="rc_select_TEST_OR_SSR_list"
                                                                    autocomplete="off"
                                                                    class="ant-select-selection-search-input"
                                                                    id="rc_select_TEST_OR_SSR"
                                                                    readonly=""
                                                                    role="combobox"
                                                                    style="opacity: 0;"
                                                                    type="search"
                                                                    unselectable="on"
                                                                    value=""
                                                                  />
                                                                </span>
                                                                <span
                                                                  class="ant-select-selection-item"
                                                                  title="1"
                                                                >
                                                                  1
                                                                </span>
                                                              </div>,
                                                            }
                                                          }
                                                          dropdownClassName=""
                                                          filterOption={[Function]}
                                                          getPopupContainer={[Function]}
                                                          id="rc_select_TEST_OR_SSR"
                                                          inputElement={null}
                                                          inputIcon={[Function]}
                                                          inputRef={
                                                            Object {
                                                              "current": <input
                                                                aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                aria-autocomplete="list"
                                                                aria-controls="rc_select_TEST_OR_SSR_list"
                                                                aria-haspopup="listbox"
                                                                aria-owns="rc_select_TEST_OR_SSR_list"
                                                                autocomplete="off"
                                                                class="ant-select-selection-search-input"
                                                                id="rc_select_TEST_OR_SSR"
                                                                readonly=""
                                                                role="combobox"
                                                                style="opacity: 0;"
                                                                type="search"
                                                                unselectable="on"
                                                                value=""
                                                              />,
                                                            }
                                                          }
                                                          listHeight={128}
                                                          listItemHeight={24}
                                                          loading={false}
                                                          menuItemSelectedIcon={null}
                                                          multiple={false}
                                                          notFoundContent={null}
                                                          onChange={[Function]}
                                                          onInputChange={[Function]}
                                                          onInputCompositionEnd={[Function]}
                                                          onInputCompositionStart={[Function]}
                                                          onInputKeyDown={[Function]}
                                                          onInputMouseDown={[Function]}
                                                          onInputPaste={[Function]}
                                                          onPopupScroll={[Function]}
                                                          onSearch={[Function]}
                                                          onSearchSubmit={[Function]}
                                                          onSelect={[Function]}
                                                          onToggleOpen={[Function]}
                                                          placeholder="Select ratings"
                                                          prefixCls="ant-select"
                                                          removeIcon={<ForwardRef(CloseOutlined) />}
                                                          searchValue=""
                                                          showSearch={false}
                                                          tokenWithEnter={false}
                                                          transitionName="slide-up"
                                                          values={
                                                            Array [
                                                              Object {
                                                                "disabled": undefined,
                                                                "key": 1,
                                                                "label": 1,
                                                                "value": 1,
                                                              },
                                                            ]
                                                          }
                                                        >
                                                          <span
                                                            className="ant-select-selection-search"
                                                          >
                                                            <Input
                                                              accessibilityIndex={0}
                                                              attrs={Object {}}
                                                              editable={false}
                                                              id="rc_select_TEST_OR_SSR"
                                                              inputElement={null}
                                                              onChange={[Function]}
                                                              onCompositionEnd={[Function]}
                                                              onCompositionStart={[Function]}
                                                              onKeyDown={[Function]}
                                                              onMouseDown={[Function]}
                                                              onPaste={[Function]}
                                                              prefixCls="ant-select"
                                                              value=""
                                                            >
                                                              <input
                                                                aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                aria-autocomplete="list"
                                                                aria-controls="rc_select_TEST_OR_SSR_list"
                                                                aria-haspopup="listbox"
                                                                aria-owns="rc_select_TEST_OR_SSR_list"
                                                                autoComplete="off"
                                                                className="ant-select-selection-search-input"
                                                                id="rc_select_TEST_OR_SSR"
                                                                onChange={[Function]}
                                                                onCompositionEnd={[Function]}
                                                                onCompositionStart={[Function]}
                                                                onKeyDown={[Function]}
                                                                onMouseDown={[Function]}
                                                                onPaste={[Function]}
                                                                readOnly={true}
                                                                role="combobox"
                                                                style={
                                                                  Object {
                                                                    "opacity": 0,
                                                                  }
                                                                }
                                                                type="search"
                                                                unselectable="on"
                                                                value=""
                                                              />
                                                            </Input>
                                                          </span>
                                                          <span
                                                            className="ant-select-selection-item"
                                                            title="1"
                                                          >
                                                            1
                                                          </span>
                                                        </SingleSelector>
                                                      </div>
                                                    </Selector>
                                                  </Trigger>
                                                </SelectTrigger>
                                                <TransBtn
                                                  className="ant-select-arrow"
                                                  customizeIcon={[Function]}
                                                  customizeIconProps={
                                                    Object {
                                                      "focused": false,
                                                      "loading": false,
                                                      "open": undefined,
                                                      "searchValue": "",
                                                      "showSearch": false,
                                                    }
                                                  }
                                                >
                                                  <span
                                                    aria-hidden={true}
                                                    className="ant-select-arrow"
                                                    onMouseDown={[Function]}
                                                    style={
                                                      Object {
                                                        "WebkitUserSelect": "none",
                                                        "userSelect": "none",
                                                      }
                                                    }
                                                    unselectable="on"
                                                  >
                                                    <ForwardRef(DownOutlined)
                                                      className="ant-select-suffix"
                                                    >
                                                      <AntdIcon
                                                        className="ant-select-suffix"
                                                        icon={
                                                          Object {
                                                            "icon": Object {
                                                              "attrs": Object {
                                                                "focusable": "false",
                                                                "viewBox": "64 64 896 896",
                                                              },
                                                              "children": Array [
                                                                Object {
                                                                  "attrs": Object {
                                                                    "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                                                  },
                                                                  "tag": "path",
                                                                },
                                                              ],
                                                              "tag": "svg",
                                                            },
                                                            "name": "down",
                                                            "theme": "outlined",
                                                          }
                                                        }
                                                      >
                                                        <span
                                                          aria-label="down"
                                                          className="anticon anticon-down ant-select-suffix"
                                                          role="img"
                                                        >
                                                          <IconReact
                                                            className=""
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "down",
                                                                "theme": "outlined",
                                                              }
                                                            }
                                                          >
                                                            <svg
                                                              aria-hidden="true"
                                                              className=""
                                                              data-icon="down"
                                                              fill="currentColor"
                                                              focusable="false"
                                                              height="1em"
                                                              key="svg-down"
                                                              viewBox="64 64 896 896"
                                                              width="1em"
                                                            >
                                                              <path
                                                                d="M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z"
                                                                key="svg-down-svg-0"
                                                              />
                                                            </svg>
                                                          </IconReact>
                                                        </span>
                                                      </AntdIcon>
                                                    </ForwardRef(DownOutlined)>
                                                  </span>
                                                </TransBtn>
                                                <TransBtn
                                                  className="ant-select-clear"
                                                  customizeIcon={<ForwardRef(CloseCircleFilled) />}
                                                  onMouseDown={[Function]}
                                                >
                                                  <span
                                                    aria-hidden={true}
                                                    className="ant-select-clear"
                                                    onMouseDown={[Function]}
                                                    style={
                                                      Object {
                                                        "WebkitUserSelect": "none",
                                                        "userSelect": "none",
                                                      }
                                                    }
                                                    unselectable="on"
                                                  >
                                                    <ForwardRef(CloseCircleFilled)>
                                                      <AntdIcon
                                                        icon={
                                                          Object {
                                                            "icon": Object {
                                                              "attrs": Object {
                                                                "focusable": "false",
                                                                "viewBox": "64 64 896 896",
                                                              },
                                                              "children": Array [
                                                                Object {
                                                                  "attrs": Object {
                                                                    "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                  },
                                                                  "tag": "path",
                                                                },
                                                              ],
                                                              "tag": "svg",
                                                            },
                                                            "name": "close-circle",
                                                            "theme": "filled",
                                                          }
                                                        }
                                                      >
                                                        <span
                                                          aria-label="close-circle"
                                                          className="anticon anticon-close-circle"
                                                          role="img"
                                                        >
                                                          <IconReact
                                                            className=""
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "close-circle",
                                                                "theme": "filled",
                                                              }
                                                            }
                                                          >
                                                            <svg
                                                              aria-hidden="true"
                                                              className=""
                                                              data-icon="close-circle"
                                                              fill="currentColor"
                                                              focusable="false"
                                                              height="1em"
                                                              key="svg-close-circle"
                                                              viewBox="64 64 896 896"
                                                              width="1em"
                                                            >
                                                              <path
                                                                d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z"
                                                                key="svg-close-circle-svg-0"
                                                              />
                                                            </svg>
                                                          </IconReact>
                                                        </span>
                                                      </AntdIcon>
                                                    </ForwardRef(CloseCircleFilled)>
                                                  </span>
                                                </TransBtn>
                                              </div>
                                            </ForwardRef(Select)>
                                          </Select>
                                        </ForwardRef(InternalSelect)>
                                      </Selector>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Description"
                  name="description"
                >
                  <WrapperField
                    label="Description"
                    messageVariables={
                      Object {
                        "label": "Description",
                      }
                    }
                    name="description"
                    onReset={[Function]}
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_description"
                      label="Description"
                      messageVariables={
                        Object {
                          "label": "Description",
                        }
                      }
                      name={
                        Array [
                          "description",
                        ]
                      }
                      onReset={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_description"
                            label="Description"
                            name="description"
                            prefixCls="ant-form"
                            required={false}
                            requiredMark={true}
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className=""
                                  htmlFor="create-claim_description"
                                  title="Description"
                                >
                                  Description
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Description"
                            name={
                              Array [
                                "description",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={2}
                                      value={
                                        Object {
                                          "blocks": Array [
                                            Object {
                                              "data": Object {
                                                "level": 2,
                                                "text": "Editor.js",
                                              },
                                              "type": "header",
                                            },
                                            Object {
                                              "data": Object {
                                                "text": "Hey. Meet the new Editor. On this page you can see it in action — try to edit this text.",
                                              },
                                              "type": "paragraph",
                                            },
                                          ],
                                          "time": 1595747741807,
                                          "version": "2.18.0",
                                        }
                                      }
                                    >
                                      <Editor
                                        id="create-claim_description"
                                        onChange={[Function]}
                                        placeholder="Enter Description..."
                                        value={
                                          Object {
                                            "blocks": Array [
                                              Object {
                                                "data": Object {
                                                  "level": 2,
                                                  "text": "Editor.js",
                                                },
                                                "type": "header",
                                              },
                                              Object {
                                                "data": Object {
                                                  "text": "Hey. Meet the new Editor. On this page you can see it in action — try to edit this text.",
                                                },
                                                "type": "paragraph",
                                              },
                                            ],
                                            "time": 1595747741807,
                                            "version": "2.18.0",
                                          }
                                        }
                                      >
                                        <div
                                          style={null}
                                        />
                                      </Editor>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
              </div>
              <div
                style={
                  Object {
                    "display": "block",
                  }
                }
              >
                <FormItem
                  label="Claim Date"
                  name="claim_date"
                >
                  <WrapperField
                    label="Claim Date"
                    messageVariables={
                      Object {
                        "label": "Claim Date",
                      }
                    }
                    name="claim_date"
                    onReset={[Function]}
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_claim_date"
                      label="Claim Date"
                      messageVariables={
                        Object {
                          "label": "Claim Date",
                        }
                      }
                      name={
                        Array [
                          "claim_date",
                        ]
                      }
                      onReset={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_claim_date"
                            label="Claim Date"
                            name="claim_date"
                            prefixCls="ant-form"
                            required={false}
                            requiredMark={true}
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className=""
                                  htmlFor="create-claim_claim_date"
                                  title="Claim Date"
                                >
                                  Claim Date
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Claim Date"
                            name={
                              Array [
                                "claim_date",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={2}
                                      value={"2020-12-12T00:00:00.000Z"}
                                    >
                                      <Picker
                                        id="create-claim_claim_date"
                                        onChange={[Function]}
                                        value={"2020-12-12T00:00:00.000Z"}
                                      >
                                        <LocaleReceiver
                                          componentName="DatePicker"
                                          defaultLocale={[Function]}
                                        >
                                          <Picker
                                            allowClear={true}
                                            className=""
                                            clearIcon={<ForwardRef(CloseCircleFilled) />}
                                            components={
                                              Object {
                                                "button": [Function],
                                                "rangeItem": [Function],
                                              }
                                            }
                                            generateConfig={
                                              Object {
                                                "addDate": [Function],
                                                "addMonth": [Function],
                                                "addYear": [Function],
                                                "getDate": [Function],
                                                "getHour": [Function],
                                                "getMinute": [Function],
                                                "getMonth": [Function],
                                                "getNow": [Function],
                                                "getSecond": [Function],
                                                "getWeekDay": [Function],
                                                "getYear": [Function],
                                                "isAfter": [Function],
                                                "isValidate": [Function],
                                                "locale": Object {
                                                  "format": [Function],
                                                  "getShortMonths": [Function],
                                                  "getShortWeekDays": [Function],
                                                  "getWeek": [Function],
                                                  "getWeekFirstDay": [Function],
                                                  "parse": [Function],
                                                },
                                                "setDate": [Function],
                                                "setHour": [Function],
                                                "setMinute": [Function],
                                                "setMonth": [Function],
                                                "setSecond": [Function],
                                                "setYear": [Function],
                                              }
                                            }
                                            id="create-claim_claim_date"
                                            locale={
                                              Object {
                                                "backToToday": "Back to today",
                                                "clear": "Clear",
                                                "dateFormat": "M/D/YYYY",
                                                "dateSelect": "select date",
                                                "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                "dayFormat": "D",
                                                "decadeSelect": "Choose a decade",
                                                "locale": "en_US",
                                                "month": "Month",
                                                "monthBeforeYear": true,
                                                "monthPlaceholder": "Select month",
                                                "monthSelect": "Choose a month",
                                                "nextCentury": "Next century",
                                                "nextDecade": "Next decade",
                                                "nextMonth": "Next month (PageDown)",
                                                "nextYear": "Next year (Control + right)",
                                                "now": "Now",
                                                "ok": "Ok",
                                                "placeholder": "Select date",
                                                "previousCentury": "Last century",
                                                "previousDecade": "Last decade",
                                                "previousMonth": "Previous month (PageUp)",
                                                "previousYear": "Last year (Control + left)",
                                                "quarterPlaceholder": "Select quarter",
                                                "rangeMonthPlaceholder": Array [
                                                  "Start month",
                                                  "End month",
                                                ],
                                                "rangePlaceholder": Array [
                                                  "Start date",
                                                  "End date",
                                                ],
                                                "rangeWeekPlaceholder": Array [
                                                  "Start week",
                                                  "End week",
                                                ],
                                                "rangeYearPlaceholder": Array [
                                                  "Start year",
                                                  "End year",
                                                ],
                                                "timeSelect": "select time",
                                                "today": "Today",
                                                "weekPlaceholder": "Select week",
                                                "weekSelect": "Choose a week",
                                                "year": "Year",
                                                "yearFormat": "YYYY",
                                                "yearPlaceholder": "Select year",
                                                "yearSelect": "Choose a year",
                                              }
                                            }
                                            nextIcon={
                                              <span
                                                className="ant-picker-next-icon"
                                              />
                                            }
                                            onChange={[Function]}
                                            placeholder="Select date"
                                            prefixCls="ant-picker"
                                            prevIcon={
                                              <span
                                                className="ant-picker-prev-icon"
                                              />
                                            }
                                            showToday={true}
                                            suffixIcon={<ForwardRef(CalendarOutlined) />}
                                            superNextIcon={
                                              <span
                                                className="ant-picker-super-next-icon"
                                              />
                                            }
                                            superPrevIcon={
                                              <span
                                                className="ant-picker-super-prev-icon"
                                              />
                                            }
                                            transitionName="slide-up"
                                            value={"2020-12-12T00:00:00.000Z"}
                                          >
                                            <InnerPicker
                                              allowClear={true}
                                              className=""
                                              clearIcon={<ForwardRef(CloseCircleFilled) />}
                                              components={
                                                Object {
                                                  "button": [Function],
                                                  "rangeItem": [Function],
                                                }
                                              }
                                              generateConfig={
                                                Object {
                                                  "addDate": [Function],
                                                  "addMonth": [Function],
                                                  "addYear": [Function],
                                                  "getDate": [Function],
                                                  "getHour": [Function],
                                                  "getMinute": [Function],
                                                  "getMonth": [Function],
                                                  "getNow": [Function],
                                                  "getSecond": [Function],
                                                  "getWeekDay": [Function],
                                                  "getYear": [Function],
                                                  "isAfter": [Function],
                                                  "isValidate": [Function],
                                                  "locale": Object {
                                                    "format": [Function],
                                                    "getShortMonths": [Function],
                                                    "getShortWeekDays": [Function],
                                                    "getWeek": [Function],
                                                    "getWeekFirstDay": [Function],
                                                    "parse": [Function],
                                                  },
                                                  "setDate": [Function],
                                                  "setHour": [Function],
                                                  "setMinute": [Function],
                                                  "setMonth": [Function],
                                                  "setSecond": [Function],
                                                  "setYear": [Function],
                                                }
                                              }
                                              id="create-claim_claim_date"
                                              locale={
                                                Object {
                                                  "backToToday": "Back to today",
                                                  "clear": "Clear",
                                                  "dateFormat": "M/D/YYYY",
                                                  "dateSelect": "select date",
                                                  "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                  "dayFormat": "D",
                                                  "decadeSelect": "Choose a decade",
                                                  "locale": "en_US",
                                                  "month": "Month",
                                                  "monthBeforeYear": true,
                                                  "monthPlaceholder": "Select month",
                                                  "monthSelect": "Choose a month",
                                                  "nextCentury": "Next century",
                                                  "nextDecade": "Next decade",
                                                  "nextMonth": "Next month (PageDown)",
                                                  "nextYear": "Next year (Control + right)",
                                                  "now": "Now",
                                                  "ok": "Ok",
                                                  "placeholder": "Select date",
                                                  "previousCentury": "Last century",
                                                  "previousDecade": "Last decade",
                                                  "previousMonth": "Previous month (PageUp)",
                                                  "previousYear": "Last year (Control + left)",
                                                  "quarterPlaceholder": "Select quarter",
                                                  "rangeMonthPlaceholder": Array [
                                                    "Start month",
                                                    "End month",
                                                  ],
                                                  "rangePlaceholder": Array [
                                                    "Start date",
                                                    "End date",
                                                  ],
                                                  "rangeWeekPlaceholder": Array [
                                                    "Start week",
                                                    "End week",
                                                  ],
                                                  "rangeYearPlaceholder": Array [
                                                    "Start year",
                                                    "End year",
                                                  ],
                                                  "timeSelect": "select time",
                                                  "today": "Today",
                                                  "weekPlaceholder": "Select week",
                                                  "weekSelect": "Choose a week",
                                                  "year": "Year",
                                                  "yearFormat": "YYYY",
                                                  "yearPlaceholder": "Select year",
                                                  "yearSelect": "Choose a year",
                                                }
                                              }
                                              nextIcon={
                                                <span
                                                  className="ant-picker-next-icon"
                                                />
                                              }
                                              onChange={[Function]}
                                              pickerRef={
                                                Object {
                                                  "current": Object {
                                                    "blur": [Function],
                                                    "focus": [Function],
                                                  },
                                                }
                                              }
                                              placeholder="Select date"
                                              prefixCls="ant-picker"
                                              prevIcon={
                                                <span
                                                  className="ant-picker-prev-icon"
                                                />
                                              }
                                              showToday={true}
                                              suffixIcon={<ForwardRef(CalendarOutlined) />}
                                              superNextIcon={
                                                <span
                                                  className="ant-picker-super-next-icon"
                                                />
                                              }
                                              superPrevIcon={
                                                <span
                                                  className="ant-picker-super-prev-icon"
                                                />
                                              }
                                              transitionName="slide-up"
                                              value={"2020-12-12T00:00:00.000Z"}
                                            >
                                              <PickerTrigger
                                                popupElement={
                                                  <div
                                                    className="ant-picker-panel-container"
                                                    onMouseDown={[Function]}
                                                  >
                                                    <PickerPanel
                                                      allowClear={true}
                                                      className="ant-picker-panel-focused"
                                                      clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                      components={
                                                        Object {
                                                          "button": [Function],
                                                          "rangeItem": [Function],
                                                        }
                                                      }
                                                      generateConfig={
                                                        Object {
                                                          "addDate": [Function],
                                                          "addMonth": [Function],
                                                          "addYear": [Function],
                                                          "getDate": [Function],
                                                          "getHour": [Function],
                                                          "getMinute": [Function],
                                                          "getMonth": [Function],
                                                          "getNow": [Function],
                                                          "getSecond": [Function],
                                                          "getWeekDay": [Function],
                                                          "getYear": [Function],
                                                          "isAfter": [Function],
                                                          "isValidate": [Function],
                                                          "locale": Object {
                                                            "format": [Function],
                                                            "getShortMonths": [Function],
                                                            "getShortWeekDays": [Function],
                                                            "getWeek": [Function],
                                                            "getWeekFirstDay": [Function],
                                                            "parse": [Function],
                                                          },
                                                          "setDate": [Function],
                                                          "setHour": [Function],
                                                          "setMinute": [Function],
                                                          "setMonth": [Function],
                                                          "setSecond": [Function],
                                                          "setYear": [Function],
                                                        }
                                                      }
                                                      id="create-claim_claim_date"
                                                      locale={
                                                        Object {
                                                          "backToToday": "Back to today",
                                                          "clear": "Clear",
                                                          "dateFormat": "M/D/YYYY",
                                                          "dateSelect": "select date",
                                                          "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                          "dayFormat": "D",
                                                          "decadeSelect": "Choose a decade",
                                                          "locale": "en_US",
                                                          "month": "Month",
                                                          "monthBeforeYear": true,
                                                          "monthPlaceholder": "Select month",
                                                          "monthSelect": "Choose a month",
                                                          "nextCentury": "Next century",
                                                          "nextDecade": "Next decade",
                                                          "nextMonth": "Next month (PageDown)",
                                                          "nextYear": "Next year (Control + right)",
                                                          "now": "Now",
                                                          "ok": "Ok",
                                                          "placeholder": "Select date",
                                                          "previousCentury": "Last century",
                                                          "previousDecade": "Last decade",
                                                          "previousMonth": "Previous month (PageUp)",
                                                          "previousYear": "Last year (Control + left)",
                                                          "quarterPlaceholder": "Select quarter",
                                                          "rangeMonthPlaceholder": Array [
                                                            "Start month",
                                                            "End month",
                                                          ],
                                                          "rangePlaceholder": Array [
                                                            "Start date",
                                                            "End date",
                                                          ],
                                                          "rangeWeekPlaceholder": Array [
                                                            "Start week",
                                                            "End week",
                                                          ],
                                                          "rangeYearPlaceholder": Array [
                                                            "Start year",
                                                            "End year",
                                                          ],
                                                          "timeSelect": "select time",
                                                          "today": "Today",
                                                          "weekPlaceholder": "Select week",
                                                          "weekSelect": "Choose a week",
                                                          "year": "Year",
                                                          "yearFormat": "YYYY",
                                                          "yearPlaceholder": "Select year",
                                                          "yearSelect": "Choose a year",
                                                        }
                                                      }
                                                      nextIcon={
                                                        <span
                                                          className="ant-picker-next-icon"
                                                        />
                                                      }
                                                      onChange={[Function]}
                                                      pickerRef={
                                                        Object {
                                                          "current": Object {
                                                            "blur": [Function],
                                                            "focus": [Function],
                                                          },
                                                        }
                                                      }
                                                      placeholder="Select date"
                                                      prefixCls="ant-picker"
                                                      prevIcon={
                                                        <span
                                                          className="ant-picker-prev-icon"
                                                        />
                                                      }
                                                      showToday={true}
                                                      suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                      superNextIcon={
                                                        <span
                                                          className="ant-picker-super-next-icon"
                                                        />
                                                      }
                                                      superPrevIcon={
                                                        <span
                                                          className="ant-picker-super-prev-icon"
                                                        />
                                                      }
                                                      tabIndex={-1}
                                                      transitionName="slide-up"
                                                      value={"2020-12-12T00:00:00.000Z"}
                                                    />
                                                  </div>
                                                }
                                                popupPlacement="bottomLeft"
                                                prefixCls="ant-picker"
                                                transitionName="slide-up"
                                                visible={false}
                                              >
                                                <Trigger
                                                  action={Array []}
                                                  afterPopupVisibleChange={[Function]}
                                                  autoDestroy={false}
                                                  blurDelay={0.15}
                                                  builtinPlacements={
                                                    Object {
                                                      "bottomLeft": Object {
                                                        "offset": Array [
                                                          0,
                                                          4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 1,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "tl",
                                                          "bl",
                                                        ],
                                                      },
                                                      "bottomRight": Object {
                                                        "offset": Array [
                                                          0,
                                                          4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 1,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "tr",
                                                          "br",
                                                        ],
                                                      },
                                                      "topLeft": Object {
                                                        "offset": Array [
                                                          0,
                                                          -4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 0,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "bl",
                                                          "tl",
                                                        ],
                                                      },
                                                      "topRight": Object {
                                                        "offset": Array [
                                                          0,
                                                          -4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 0,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "br",
                                                          "tr",
                                                        ],
                                                      },
                                                    }
                                                  }
                                                  defaultPopupVisible={false}
                                                  destroyPopupOnHide={false}
                                                  focusDelay={0}
                                                  getDocument={[Function]}
                                                  getPopupClassNameFromAlign={[Function]}
                                                  hideAction={Array []}
                                                  mask={false}
                                                  maskClosable={true}
                                                  mouseEnterDelay={0}
                                                  mouseLeaveDelay={0.1}
                                                  onPopupAlign={[Function]}
                                                  onPopupVisibleChange={[Function]}
                                                  popup={
                                                    <div
                                                      className="ant-picker-panel-container"
                                                      onMouseDown={[Function]}
                                                    >
                                                      <PickerPanel
                                                        allowClear={true}
                                                        className="ant-picker-panel-focused"
                                                        clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                        components={
                                                          Object {
                                                            "button": [Function],
                                                            "rangeItem": [Function],
                                                          }
                                                        }
                                                        generateConfig={
                                                          Object {
                                                            "addDate": [Function],
                                                            "addMonth": [Function],
                                                            "addYear": [Function],
                                                            "getDate": [Function],
                                                            "getHour": [Function],
                                                            "getMinute": [Function],
                                                            "getMonth": [Function],
                                                            "getNow": [Function],
                                                            "getSecond": [Function],
                                                            "getWeekDay": [Function],
                                                            "getYear": [Function],
                                                            "isAfter": [Function],
                                                            "isValidate": [Function],
                                                            "locale": Object {
                                                              "format": [Function],
                                                              "getShortMonths": [Function],
                                                              "getShortWeekDays": [Function],
                                                              "getWeek": [Function],
                                                              "getWeekFirstDay": [Function],
                                                              "parse": [Function],
                                                            },
                                                            "setDate": [Function],
                                                            "setHour": [Function],
                                                            "setMinute": [Function],
                                                            "setMonth": [Function],
                                                            "setSecond": [Function],
                                                            "setYear": [Function],
                                                          }
                                                        }
                                                        id="create-claim_claim_date"
                                                        locale={
                                                          Object {
                                                            "backToToday": "Back to today",
                                                            "clear": "Clear",
                                                            "dateFormat": "M/D/YYYY",
                                                            "dateSelect": "select date",
                                                            "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                            "dayFormat": "D",
                                                            "decadeSelect": "Choose a decade",
                                                            "locale": "en_US",
                                                            "month": "Month",
                                                            "monthBeforeYear": true,
                                                            "monthPlaceholder": "Select month",
                                                            "monthSelect": "Choose a month",
                                                            "nextCentury": "Next century",
                                                            "nextDecade": "Next decade",
                                                            "nextMonth": "Next month (PageDown)",
                                                            "nextYear": "Next year (Control + right)",
                                                            "now": "Now",
                                                            "ok": "Ok",
                                                            "placeholder": "Select date",
                                                            "previousCentury": "Last century",
                                                            "previousDecade": "Last decade",
                                                            "previousMonth": "Previous month (PageUp)",
                                                            "previousYear": "Last year (Control + left)",
                                                            "quarterPlaceholder": "Select quarter",
                                                            "rangeMonthPlaceholder": Array [
                                                              "Start month",
                                                              "End month",
                                                            ],
                                                            "rangePlaceholder": Array [
                                                              "Start date",
                                                              "End date",
                                                            ],
                                                            "rangeWeekPlaceholder": Array [
                                                              "Start week",
                                                              "End week",
                                                            ],
                                                            "rangeYearPlaceholder": Array [
                                                              "Start year",
                                                              "End year",
                                                            ],
                                                            "timeSelect": "select time",
                                                            "today": "Today",
                                                            "weekPlaceholder": "Select week",
                                                            "weekSelect": "Choose a week",
                                                            "year": "Year",
                                                            "yearFormat": "YYYY",
                                                            "yearPlaceholder": "Select year",
                                                            "yearSelect": "Choose a year",
                                                          }
                                                        }
                                                        nextIcon={
                                                          <span
                                                            className="ant-picker-next-icon"
                                                          />
                                                        }
                                                        onChange={[Function]}
                                                        pickerRef={
                                                          Object {
                                                            "current": Object {
                                                              "blur": [Function],
                                                              "focus": [Function],
                                                            },
                                                          }
                                                        }
                                                        placeholder="Select date"
                                                        prefixCls="ant-picker"
                                                        prevIcon={
                                                          <span
                                                            className="ant-picker-prev-icon"
                                                          />
                                                        }
                                                        showToday={true}
                                                        suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                        superNextIcon={
                                                          <span
                                                            className="ant-picker-super-next-icon"
                                                          />
                                                        }
                                                        superPrevIcon={
                                                          <span
                                                            className="ant-picker-super-prev-icon"
                                                          />
                                                        }
                                                        tabIndex={-1}
                                                        transitionName="slide-up"
                                                        value={"2020-12-12T00:00:00.000Z"}
                                                      />
                                                    </div>
                                                  }
                                                  popupAlign={Object {}}
                                                  popupClassName=""
                                                  popupPlacement="bottomLeft"
                                                  popupStyle={Object {}}
                                                  popupTransitionName="slide-up"
                                                  popupVisible={false}
                                                  prefixCls="ant-picker-dropdown"
                                                  showAction={Array []}
                                                >
                                                  <div
                                                    className="ant-picker"
                                                    key="trigger"
                                                    onMouseUp={[Function]}
                                                  >
                                                    <div
                                                      className="ant-picker-input"
                                                    >
                                                      <input
                                                        autoComplete="off"
                                                        id="create-claim_claim_date"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        onMouseDown={[Function]}
                                                        placeholder="Select date"
                                                        readOnly={true}
                                                        size={12}
                                                        title="2020-12-12"
                                                        value="2020-12-12"
                                                      />
                                                      <span
                                                        className="ant-picker-suffix"
                                                      >
                                                        <ForwardRef(CalendarOutlined)>
                                                          <AntdIcon
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "calendar",
                                                                "theme": "outlined",
                                                              }
                                                            }
                                                          >
                                                            <span
                                                              aria-label="calendar"
                                                              className="anticon anticon-calendar"
                                                              role="img"
                                                            >
                                                              <IconReact
                                                                className=""
                                                                icon={
                                                                  Object {
                                                                    "icon": Object {
                                                                      "attrs": Object {
                                                                        "focusable": "false",
                                                                        "viewBox": "64 64 896 896",
                                                                      },
                                                                      "children": Array [
                                                                        Object {
                                                                          "attrs": Object {
                                                                            "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                          },
                                                                          "tag": "path",
                                                                        },
                                                                      ],
                                                                      "tag": "svg",
                                                                    },
                                                                    "name": "calendar",
                                                                    "theme": "outlined",
                                                                  }
                                                                }
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className=""
                                                                  data-icon="calendar"
                                                                  fill="currentColor"
                                                                  focusable="false"
                                                                  height="1em"
                                                                  key="svg-calendar"
                                                                  viewBox="64 64 896 896"
                                                                  width="1em"
                                                                >
                                                                  <path
                                                                    d="M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z"
                                                                    key="svg-calendar-svg-0"
                                                                  />
                                                                </svg>
                                                              </IconReact>
                                                            </span>
                                                          </AntdIcon>
                                                        </ForwardRef(CalendarOutlined)>
                                                      </span>
                                                      <span
                                                        className="ant-picker-clear"
                                                        onMouseDown={[Function]}
                                                        onMouseUp={[Function]}
                                                      >
                                                        <ForwardRef(CloseCircleFilled)>
                                                          <AntdIcon
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "close-circle",
                                                                "theme": "filled",
                                                              }
                                                            }
                                                          >
                                                            <span
                                                              aria-label="close-circle"
                                                              className="anticon anticon-close-circle"
                                                              role="img"
                                                            >
                                                              <IconReact
                                                                className=""
                                                                icon={
                                                                  Object {
                                                                    "icon": Object {
                                                                      "attrs": Object {
                                                                        "focusable": "false",
                                                                        "viewBox": "64 64 896 896",
                                                                      },
                                                                      "children": Array [
                                                                        Object {
                                                                          "attrs": Object {
                                                                            "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                          },
                                                                          "tag": "path",
                                                                        },
                                                                      ],
                                                                      "tag": "svg",
                                                                    },
                                                                    "name": "close-circle",
                                                                    "theme": "filled",
                                                                  }
                                                                }
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className=""
                                                                  data-icon="close-circle"
                                                                  fill="currentColor"
                                                                  focusable="false"
                                                                  height="1em"
                                                                  key="svg-close-circle"
                                                                  viewBox="64 64 896 896"
                                                                  width="1em"
                                                                >
                                                                  <path
                                                                    d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z"
                                                                    key="svg-close-circle-svg-0"
                                                                  />
                                                                </svg>
                                                              </IconReact>
                                                            </span>
                                                          </AntdIcon>
                                                        </ForwardRef(CloseCircleFilled)>
                                                      </span>
                                                    </div>
                                                  </div>
                                                </Trigger>
                                              </PickerTrigger>
                                            </InnerPicker>
                                          </Picker>
                                        </LocaleReceiver>
                                      </Picker>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Checked Date"
                  name="checked_date"
                >
                  <WrapperField
                    label="Checked Date"
                    messageVariables={
                      Object {
                        "label": "Checked Date",
                      }
                    }
                    name="checked_date"
                    onReset={[Function]}
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_checked_date"
                      label="Checked Date"
                      messageVariables={
                        Object {
                          "label": "Checked Date",
                        }
                      }
                      name={
                        Array [
                          "checked_date",
                        ]
                      }
                      onReset={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_checked_date"
                            label="Checked Date"
                            name="checked_date"
                            prefixCls="ant-form"
                            required={false}
                            requiredMark={true}
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className=""
                                  htmlFor="create-claim_checked_date"
                                  title="Checked Date"
                                >
                                  Checked Date
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Checked Date"
                            name={
                              Array [
                                "checked_date",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={2}
                                      value={"2020-12-12T00:00:00.000Z"}
                                    >
                                      <Picker
                                        id="create-claim_checked_date"
                                        onChange={[Function]}
                                        value={"2020-12-12T00:00:00.000Z"}
                                      >
                                        <LocaleReceiver
                                          componentName="DatePicker"
                                          defaultLocale={[Function]}
                                        >
                                          <Picker
                                            allowClear={true}
                                            className=""
                                            clearIcon={<ForwardRef(CloseCircleFilled) />}
                                            components={
                                              Object {
                                                "button": [Function],
                                                "rangeItem": [Function],
                                              }
                                            }
                                            generateConfig={
                                              Object {
                                                "addDate": [Function],
                                                "addMonth": [Function],
                                                "addYear": [Function],
                                                "getDate": [Function],
                                                "getHour": [Function],
                                                "getMinute": [Function],
                                                "getMonth": [Function],
                                                "getNow": [Function],
                                                "getSecond": [Function],
                                                "getWeekDay": [Function],
                                                "getYear": [Function],
                                                "isAfter": [Function],
                                                "isValidate": [Function],
                                                "locale": Object {
                                                  "format": [Function],
                                                  "getShortMonths": [Function],
                                                  "getShortWeekDays": [Function],
                                                  "getWeek": [Function],
                                                  "getWeekFirstDay": [Function],
                                                  "parse": [Function],
                                                },
                                                "setDate": [Function],
                                                "setHour": [Function],
                                                "setMinute": [Function],
                                                "setMonth": [Function],
                                                "setSecond": [Function],
                                                "setYear": [Function],
                                              }
                                            }
                                            id="create-claim_checked_date"
                                            locale={
                                              Object {
                                                "backToToday": "Back to today",
                                                "clear": "Clear",
                                                "dateFormat": "M/D/YYYY",
                                                "dateSelect": "select date",
                                                "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                "dayFormat": "D",
                                                "decadeSelect": "Choose a decade",
                                                "locale": "en_US",
                                                "month": "Month",
                                                "monthBeforeYear": true,
                                                "monthPlaceholder": "Select month",
                                                "monthSelect": "Choose a month",
                                                "nextCentury": "Next century",
                                                "nextDecade": "Next decade",
                                                "nextMonth": "Next month (PageDown)",
                                                "nextYear": "Next year (Control + right)",
                                                "now": "Now",
                                                "ok": "Ok",
                                                "placeholder": "Select date",
                                                "previousCentury": "Last century",
                                                "previousDecade": "Last decade",
                                                "previousMonth": "Previous month (PageUp)",
                                                "previousYear": "Last year (Control + left)",
                                                "quarterPlaceholder": "Select quarter",
                                                "rangeMonthPlaceholder": Array [
                                                  "Start month",
                                                  "End month",
                                                ],
                                                "rangePlaceholder": Array [
                                                  "Start date",
                                                  "End date",
                                                ],
                                                "rangeWeekPlaceholder": Array [
                                                  "Start week",
                                                  "End week",
                                                ],
                                                "rangeYearPlaceholder": Array [
                                                  "Start year",
                                                  "End year",
                                                ],
                                                "timeSelect": "select time",
                                                "today": "Today",
                                                "weekPlaceholder": "Select week",
                                                "weekSelect": "Choose a week",
                                                "year": "Year",
                                                "yearFormat": "YYYY",
                                                "yearPlaceholder": "Select year",
                                                "yearSelect": "Choose a year",
                                              }
                                            }
                                            nextIcon={
                                              <span
                                                className="ant-picker-next-icon"
                                              />
                                            }
                                            onChange={[Function]}
                                            placeholder="Select date"
                                            prefixCls="ant-picker"
                                            prevIcon={
                                              <span
                                                className="ant-picker-prev-icon"
                                              />
                                            }
                                            showToday={true}
                                            suffixIcon={<ForwardRef(CalendarOutlined) />}
                                            superNextIcon={
                                              <span
                                                className="ant-picker-super-next-icon"
                                              />
                                            }
                                            superPrevIcon={
                                              <span
                                                className="ant-picker-super-prev-icon"
                                              />
                                            }
                                            transitionName="slide-up"
                                            value={"2020-12-12T00:00:00.000Z"}
                                          >
                                            <InnerPicker
                                              allowClear={true}
                                              className=""
                                              clearIcon={<ForwardRef(CloseCircleFilled) />}
                                              components={
                                                Object {
                                                  "button": [Function],
                                                  "rangeItem": [Function],
                                                }
                                              }
                                              generateConfig={
                                                Object {
                                                  "addDate": [Function],
                                                  "addMonth": [Function],
                                                  "addYear": [Function],
                                                  "getDate": [Function],
                                                  "getHour": [Function],
                                                  "getMinute": [Function],
                                                  "getMonth": [Function],
                                                  "getNow": [Function],
                                                  "getSecond": [Function],
                                                  "getWeekDay": [Function],
                                                  "getYear": [Function],
                                                  "isAfter": [Function],
                                                  "isValidate": [Function],
                                                  "locale": Object {
                                                    "format": [Function],
                                                    "getShortMonths": [Function],
                                                    "getShortWeekDays": [Function],
                                                    "getWeek": [Function],
                                                    "getWeekFirstDay": [Function],
                                                    "parse": [Function],
                                                  },
                                                  "setDate": [Function],
                                                  "setHour": [Function],
                                                  "setMinute": [Function],
                                                  "setMonth": [Function],
                                                  "setSecond": [Function],
                                                  "setYear": [Function],
                                                }
                                              }
                                              id="create-claim_checked_date"
                                              locale={
                                                Object {
                                                  "backToToday": "Back to today",
                                                  "clear": "Clear",
                                                  "dateFormat": "M/D/YYYY",
                                                  "dateSelect": "select date",
                                                  "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                  "dayFormat": "D",
                                                  "decadeSelect": "Choose a decade",
                                                  "locale": "en_US",
                                                  "month": "Month",
                                                  "monthBeforeYear": true,
                                                  "monthPlaceholder": "Select month",
                                                  "monthSelect": "Choose a month",
                                                  "nextCentury": "Next century",
                                                  "nextDecade": "Next decade",
                                                  "nextMonth": "Next month (PageDown)",
                                                  "nextYear": "Next year (Control + right)",
                                                  "now": "Now",
                                                  "ok": "Ok",
                                                  "placeholder": "Select date",
                                                  "previousCentury": "Last century",
                                                  "previousDecade": "Last decade",
                                                  "previousMonth": "Previous month (PageUp)",
                                                  "previousYear": "Last year (Control + left)",
                                                  "quarterPlaceholder": "Select quarter",
                                                  "rangeMonthPlaceholder": Array [
                                                    "Start month",
                                                    "End month",
                                                  ],
                                                  "rangePlaceholder": Array [
                                                    "Start date",
                                                    "End date",
                                                  ],
                                                  "rangeWeekPlaceholder": Array [
                                                    "Start week",
                                                    "End week",
                                                  ],
                                                  "rangeYearPlaceholder": Array [
                                                    "Start year",
                                                    "End year",
                                                  ],
                                                  "timeSelect": "select time",
                                                  "today": "Today",
                                                  "weekPlaceholder": "Select week",
                                                  "weekSelect": "Choose a week",
                                                  "year": "Year",
                                                  "yearFormat": "YYYY",
                                                  "yearPlaceholder": "Select year",
                                                  "yearSelect": "Choose a year",
                                                }
                                              }
                                              nextIcon={
                                                <span
                                                  className="ant-picker-next-icon"
                                                />
                                              }
                                              onChange={[Function]}
                                              pickerRef={
                                                Object {
                                                  "current": Object {
                                                    "blur": [Function],
                                                    "focus": [Function],
                                                  },
                                                }
                                              }
                                              placeholder="Select date"
                                              prefixCls="ant-picker"
                                              prevIcon={
                                                <span
                                                  className="ant-picker-prev-icon"
                                                />
                                              }
                                              showToday={true}
                                              suffixIcon={<ForwardRef(CalendarOutlined) />}
                                              superNextIcon={
                                                <span
                                                  className="ant-picker-super-next-icon"
                                                />
                                              }
                                              superPrevIcon={
                                                <span
                                                  className="ant-picker-super-prev-icon"
                                                />
                                              }
                                              transitionName="slide-up"
                                              value={"2020-12-12T00:00:00.000Z"}
                                            >
                                              <PickerTrigger
                                                popupElement={
                                                  <div
                                                    className="ant-picker-panel-container"
                                                    onMouseDown={[Function]}
                                                  >
                                                    <PickerPanel
                                                      allowClear={true}
                                                      className="ant-picker-panel-focused"
                                                      clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                      components={
                                                        Object {
                                                          "button": [Function],
                                                          "rangeItem": [Function],
                                                        }
                                                      }
                                                      generateConfig={
                                                        Object {
                                                          "addDate": [Function],
                                                          "addMonth": [Function],
                                                          "addYear": [Function],
                                                          "getDate": [Function],
                                                          "getHour": [Function],
                                                          "getMinute": [Function],
                                                          "getMonth": [Function],
                                                          "getNow": [Function],
                                                          "getSecond": [Function],
                                                          "getWeekDay": [Function],
                                                          "getYear": [Function],
                                                          "isAfter": [Function],
                                                          "isValidate": [Function],
                                                          "locale": Object {
                                                            "format": [Function],
                                                            "getShortMonths": [Function],
                                                            "getShortWeekDays": [Function],
                                                            "getWeek": [Function],
                                                            "getWeekFirstDay": [Function],
                                                            "parse": [Function],
                                                          },
                                                          "setDate": [Function],
                                                          "setHour": [Function],
                                                          "setMinute": [Function],
                                                          "setMonth": [Function],
                                                          "setSecond": [Function],
                                                          "setYear": [Function],
                                                        }
                                                      }
                                                      id="create-claim_checked_date"
                                                      locale={
                                                        Object {
                                                          "backToToday": "Back to today",
                                                          "clear": "Clear",
                                                          "dateFormat": "M/D/YYYY",
                                                          "dateSelect": "select date",
                                                          "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                          "dayFormat": "D",
                                                          "decadeSelect": "Choose a decade",
                                                          "locale": "en_US",
                                                          "month": "Month",
                                                          "monthBeforeYear": true,
                                                          "monthPlaceholder": "Select month",
                                                          "monthSelect": "Choose a month",
                                                          "nextCentury": "Next century",
                                                          "nextDecade": "Next decade",
                                                          "nextMonth": "Next month (PageDown)",
                                                          "nextYear": "Next year (Control + right)",
                                                          "now": "Now",
                                                          "ok": "Ok",
                                                          "placeholder": "Select date",
                                                          "previousCentury": "Last century",
                                                          "previousDecade": "Last decade",
                                                          "previousMonth": "Previous month (PageUp)",
                                                          "previousYear": "Last year (Control + left)",
                                                          "quarterPlaceholder": "Select quarter",
                                                          "rangeMonthPlaceholder": Array [
                                                            "Start month",
                                                            "End month",
                                                          ],
                                                          "rangePlaceholder": Array [
                                                            "Start date",
                                                            "End date",
                                                          ],
                                                          "rangeWeekPlaceholder": Array [
                                                            "Start week",
                                                            "End week",
                                                          ],
                                                          "rangeYearPlaceholder": Array [
                                                            "Start year",
                                                            "End year",
                                                          ],
                                                          "timeSelect": "select time",
                                                          "today": "Today",
                                                          "weekPlaceholder": "Select week",
                                                          "weekSelect": "Choose a week",
                                                          "year": "Year",
                                                          "yearFormat": "YYYY",
                                                          "yearPlaceholder": "Select year",
                                                          "yearSelect": "Choose a year",
                                                        }
                                                      }
                                                      nextIcon={
                                                        <span
                                                          className="ant-picker-next-icon"
                                                        />
                                                      }
                                                      onChange={[Function]}
                                                      pickerRef={
                                                        Object {
                                                          "current": Object {
                                                            "blur": [Function],
                                                            "focus": [Function],
                                                          },
                                                        }
                                                      }
                                                      placeholder="Select date"
                                                      prefixCls="ant-picker"
                                                      prevIcon={
                                                        <span
                                                          className="ant-picker-prev-icon"
                                                        />
                                                      }
                                                      showToday={true}
                                                      suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                      superNextIcon={
                                                        <span
                                                          className="ant-picker-super-next-icon"
                                                        />
                                                      }
                                                      superPrevIcon={
                                                        <span
                                                          className="ant-picker-super-prev-icon"
                                                        />
                                                      }
                                                      tabIndex={-1}
                                                      transitionName="slide-up"
                                                      value={"2020-12-12T00:00:00.000Z"}
                                                    />
                                                  </div>
                                                }
                                                popupPlacement="bottomLeft"
                                                prefixCls="ant-picker"
                                                transitionName="slide-up"
                                                visible={false}
                                              >
                                                <Trigger
                                                  action={Array []}
                                                  afterPopupVisibleChange={[Function]}
                                                  autoDestroy={false}
                                                  blurDelay={0.15}
                                                  builtinPlacements={
                                                    Object {
                                                      "bottomLeft": Object {
                                                        "offset": Array [
                                                          0,
                                                          4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 1,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "tl",
                                                          "bl",
                                                        ],
                                                      },
                                                      "bottomRight": Object {
                                                        "offset": Array [
                                                          0,
                                                          4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 1,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "tr",
                                                          "br",
                                                        ],
                                                      },
                                                      "topLeft": Object {
                                                        "offset": Array [
                                                          0,
                                                          -4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 0,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "bl",
                                                          "tl",
                                                        ],
                                                      },
                                                      "topRight": Object {
                                                        "offset": Array [
                                                          0,
                                                          -4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 0,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "br",
                                                          "tr",
                                                        ],
                                                      },
                                                    }
                                                  }
                                                  defaultPopupVisible={false}
                                                  destroyPopupOnHide={false}
                                                  focusDelay={0}
                                                  getDocument={[Function]}
                                                  getPopupClassNameFromAlign={[Function]}
                                                  hideAction={Array []}
                                                  mask={false}
                                                  maskClosable={true}
                                                  mouseEnterDelay={0}
                                                  mouseLeaveDelay={0.1}
                                                  onPopupAlign={[Function]}
                                                  onPopupVisibleChange={[Function]}
                                                  popup={
                                                    <div
                                                      className="ant-picker-panel-container"
                                                      onMouseDown={[Function]}
                                                    >
                                                      <PickerPanel
                                                        allowClear={true}
                                                        className="ant-picker-panel-focused"
                                                        clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                        components={
                                                          Object {
                                                            "button": [Function],
                                                            "rangeItem": [Function],
                                                          }
                                                        }
                                                        generateConfig={
                                                          Object {
                                                            "addDate": [Function],
                                                            "addMonth": [Function],
                                                            "addYear": [Function],
                                                            "getDate": [Function],
                                                            "getHour": [Function],
                                                            "getMinute": [Function],
                                                            "getMonth": [Function],
                                                            "getNow": [Function],
                                                            "getSecond": [Function],
                                                            "getWeekDay": [Function],
                                                            "getYear": [Function],
                                                            "isAfter": [Function],
                                                            "isValidate": [Function],
                                                            "locale": Object {
                                                              "format": [Function],
                                                              "getShortMonths": [Function],
                                                              "getShortWeekDays": [Function],
                                                              "getWeek": [Function],
                                                              "getWeekFirstDay": [Function],
                                                              "parse": [Function],
                                                            },
                                                            "setDate": [Function],
                                                            "setHour": [Function],
                                                            "setMinute": [Function],
                                                            "setMonth": [Function],
                                                            "setSecond": [Function],
                                                            "setYear": [Function],
                                                          }
                                                        }
                                                        id="create-claim_checked_date"
                                                        locale={
                                                          Object {
                                                            "backToToday": "Back to today",
                                                            "clear": "Clear",
                                                            "dateFormat": "M/D/YYYY",
                                                            "dateSelect": "select date",
                                                            "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                            "dayFormat": "D",
                                                            "decadeSelect": "Choose a decade",
                                                            "locale": "en_US",
                                                            "month": "Month",
                                                            "monthBeforeYear": true,
                                                            "monthPlaceholder": "Select month",
                                                            "monthSelect": "Choose a month",
                                                            "nextCentury": "Next century",
                                                            "nextDecade": "Next decade",
                                                            "nextMonth": "Next month (PageDown)",
                                                            "nextYear": "Next year (Control + right)",
                                                            "now": "Now",
                                                            "ok": "Ok",
                                                            "placeholder": "Select date",
                                                            "previousCentury": "Last century",
                                                            "previousDecade": "Last decade",
                                                            "previousMonth": "Previous month (PageUp)",
                                                            "previousYear": "Last year (Control + left)",
                                                            "quarterPlaceholder": "Select quarter",
                                                            "rangeMonthPlaceholder": Array [
                                                              "Start month",
                                                              "End month",
                                                            ],
                                                            "rangePlaceholder": Array [
                                                              "Start date",
                                                              "End date",
                                                            ],
                                                            "rangeWeekPlaceholder": Array [
                                                              "Start week",
                                                              "End week",
                                                            ],
                                                            "rangeYearPlaceholder": Array [
                                                              "Start year",
                                                              "End year",
                                                            ],
                                                            "timeSelect": "select time",
                                                            "today": "Today",
                                                            "weekPlaceholder": "Select week",
                                                            "weekSelect": "Choose a week",
                                                            "year": "Year",
                                                            "yearFormat": "YYYY",
                                                            "yearPlaceholder": "Select year",
                                                            "yearSelect": "Choose a year",
                                                          }
                                                        }
                                                        nextIcon={
                                                          <span
                                                            className="ant-picker-next-icon"
                                                          />
                                                        }
                                                        onChange={[Function]}
                                                        pickerRef={
                                                          Object {
                                                            "current": Object {
                                                              "blur": [Function],
                                                              "focus": [Function],
                                                            },
                                                          }
                                                        }
                                                        placeholder="Select date"
                                                        prefixCls="ant-picker"
                                                        prevIcon={
                                                          <span
                                                            className="ant-picker-prev-icon"
                                                          />
                                                        }
                                                        showToday={true}
                                                        suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                        superNextIcon={
                                                          <span
                                                            className="ant-picker-super-next-icon"
                                                          />
                                                        }
                                                        superPrevIcon={
                                                          <span
                                                            className="ant-picker-super-prev-icon"
                                                          />
                                                        }
                                                        tabIndex={-1}
                                                        transitionName="slide-up"
                                                        value={"2020-12-12T00:00:00.000Z"}
                                                      />
                                                    </div>
                                                  }
                                                  popupAlign={Object {}}
                                                  popupClassName=""
                                                  popupPlacement="bottomLeft"
                                                  popupStyle={Object {}}
                                                  popupTransitionName="slide-up"
                                                  popupVisible={false}
                                                  prefixCls="ant-picker-dropdown"
                                                  showAction={Array []}
                                                >
                                                  <div
                                                    className="ant-picker"
                                                    key="trigger"
                                                    onMouseUp={[Function]}
                                                  >
                                                    <div
                                                      className="ant-picker-input"
                                                    >
                                                      <input
                                                        autoComplete="off"
                                                        id="create-claim_checked_date"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        onMouseDown={[Function]}
                                                        placeholder="Select date"
                                                        readOnly={true}
                                                        size={12}
                                                        title="2020-12-12"
                                                        value="2020-12-12"
                                                      />
                                                      <span
                                                        className="ant-picker-suffix"
                                                      >
                                                        <ForwardRef(CalendarOutlined)>
                                                          <AntdIcon
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "calendar",
                                                                "theme": "outlined",
                                                              }
                                                            }
                                                          >
                                                            <span
                                                              aria-label="calendar"
                                                              className="anticon anticon-calendar"
                                                              role="img"
                                                            >
                                                              <IconReact
                                                                className=""
                                                                icon={
                                                                  Object {
                                                                    "icon": Object {
                                                                      "attrs": Object {
                                                                        "focusable": "false",
                                                                        "viewBox": "64 64 896 896",
                                                                      },
                                                                      "children": Array [
                                                                        Object {
                                                                          "attrs": Object {
                                                                            "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                          },
                                                                          "tag": "path",
                                                                        },
                                                                      ],
                                                                      "tag": "svg",
                                                                    },
                                                                    "name": "calendar",
                                                                    "theme": "outlined",
                                                                  }
                                                                }
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className=""
                                                                  data-icon="calendar"
                                                                  fill="currentColor"
                                                                  focusable="false"
                                                                  height="1em"
                                                                  key="svg-calendar"
                                                                  viewBox="64 64 896 896"
                                                                  width="1em"
                                                                >
                                                                  <path
                                                                    d="M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z"
                                                                    key="svg-calendar-svg-0"
                                                                  />
                                                                </svg>
                                                              </IconReact>
                                                            </span>
                                                          </AntdIcon>
                                                        </ForwardRef(CalendarOutlined)>
                                                      </span>
                                                      <span
                                                        className="ant-picker-clear"
                                                        onMouseDown={[Function]}
                                                        onMouseUp={[Function]}
                                                      >
                                                        <ForwardRef(CloseCircleFilled)>
                                                          <AntdIcon
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "close-circle",
                                                                "theme": "filled",
                                                              }
                                                            }
                                                          >
                                                            <span
                                                              aria-label="close-circle"
                                                              className="anticon anticon-close-circle"
                                                              role="img"
                                                            >
                                                              <IconReact
                                                                className=""
                                                                icon={
                                                                  Object {
                                                                    "icon": Object {
                                                                      "attrs": Object {
                                                                        "focusable": "false",
                                                                        "viewBox": "64 64 896 896",
                                                                      },
                                                                      "children": Array [
                                                                        Object {
                                                                          "attrs": Object {
                                                                            "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                          },
                                                                          "tag": "path",
                                                                        },
                                                                      ],
                                                                      "tag": "svg",
                                                                    },
                                                                    "name": "close-circle",
                                                                    "theme": "filled",
                                                                  }
                                                                }
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className=""
                                                                  data-icon="close-circle"
                                                                  fill="currentColor"
                                                                  focusable="false"
                                                                  height="1em"
                                                                  key="svg-close-circle"
                                                                  viewBox="64 64 896 896"
                                                                  width="1em"
                                                                >
                                                                  <path
                                                                    d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z"
                                                                    key="svg-close-circle-svg-0"
                                                                  />
                                                                </svg>
                                                              </IconReact>
                                                            </span>
                                                          </AntdIcon>
                                                        </ForwardRef(CloseCircleFilled)>
                                                      </span>
                                                    </div>
                                                  </div>
                                                </Trigger>
                                              </PickerTrigger>
                                            </InnerPicker>
                                          </Picker>
                                        </LocaleReceiver>
                                      </Picker>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Claim Sources"
                >
                  <Row
                    className="ant-form-item"
                    key="row"
                  >
                    <div
                      className="ant-row ant-form-item"
                      style={Object {}}
                    >
                      <FormItemLabel
                        label="Claim Sources"
                        prefixCls="ant-form"
                        requiredMark={true}
                      >
                        <Col
                          className="ant-form-item-label"
                          offset={2}
                          span={8}
                        >
                          <div
                            className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                            style={Object {}}
                          >
                            <label
                              className=""
                              title="Claim Sources"
                            >
                              Claim Sources
                            </label>
                          </div>
                        </Col>
                      </FormItemLabel>
                      <FormItemInput
                        errors={Array []}
                        label="Claim Sources"
                        onDomErrorVisibleChange={[Function]}
                        prefixCls="ant-form"
                        status=""
                        validateStatus=""
                      >
                        <Col
                          className="ant-form-item-control"
                          offset={2}
                          span={20}
                        >
                          <div
                            className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                            style={Object {}}
                          >
                            <div
                              className="ant-form-item-control-input"
                            >
                              <div
                                className="ant-form-item-control-input-content"
                              >
                                <FormList
                                  label="Claim sources"
                                  name="claim_sources"
                                >
                                  <List
                                    label="Claim sources"
                                    name="claim_sources"
                                  >
                                    <WrapperField
                                      name={Array []}
                                      shouldUpdate={[Function]}
                                    >
                                      <Field
                                        fieldContext={
                                          Object {
                                            "__INTERNAL__": Object {
                                              "itemRef": [Function],
                                              "name": "create-claim",
                                            },
                                            "getFieldError": [Function],
                                            "getFieldInstance": [Function],
                                            "getFieldValue": [Function],
                                            "getFieldsError": [Function],
                                            "getFieldsValue": [Function],
                                            "getInternalHooks": [Function],
                                            "isFieldTouched": [Function],
                                            "isFieldValidating": [Function],
                                            "isFieldsTouched": [Function],
                                            "isFieldsValidating": [Function],
                                            "prefixName": Array [
                                              "claim_sources",
                                            ],
                                            "resetFields": [Function],
                                            "scrollToField": [Function],
                                            "setFields": [Function],
                                            "setFieldsValue": [Function],
                                            "submit": [Function],
                                            "validateFields": [Function],
                                            "validateTrigger": "onChange",
                                          }
                                        }
                                        key="_"
                                        name={Array []}
                                        shouldUpdate={[Function]}
                                        trigger="onChange"
                                        valuePropName="value"
                                      >
                                        <FormItem>
                                          <Row
                                            className="ant-form-item"
                                            key="row"
                                          >
                                            <div
                                              className="ant-row ant-form-item"
                                              style={Object {}}
                                            >
                                              <FormItemLabel
                                                prefixCls="ant-form"
                                                requiredMark={true}
                                              />
                                              <FormItemInput
                                                errors={Array []}
                                                onDomErrorVisibleChange={[Function]}
                                                prefixCls="ant-form"
                                                status=""
                                                validateStatus=""
                                              >
                                                <Col
                                                  className="ant-form-item-control"
                                                >
                                                  <div
                                                    className="ant-col ant-form-item-control"
                                                    style={Object {}}
                                                  >
                                                    <div
                                                      className="ant-form-item-control-input"
                                                    >
                                                      <div
                                                        className="ant-form-item-control-input-content"
                                                      >
                                                        <Button
                                                          block={true}
                                                          ghost={false}
                                                          htmlType="button"
                                                          icon={<ForwardRef(PlusOutlined) />}
                                                          loading={false}
                                                          onClick={[Function]}
                                                          type="dashed"
                                                        >
                                                          <Wave>
                                                            <button
                                                              className="ant-btn ant-btn-dashed ant-btn-block"
                                                              onClick={[Function]}
                                                              type="button"
                                                            >
                                                              <ForwardRef(PlusOutlined)>
                                                                <AntdIcon
                                                                  icon={
                                                                    Object {
                                                                      "icon": Object {
                                                                        "attrs": Object {
                                                                          "focusable": "false",
                                                                          "viewBox": "64 64 896 896",
                                                                        },
                                                                        "children": Array [
                                                                          Object {
                                                                            "attrs": Object {},
                                                                            "children": Array [
                                                                              Object {
                                                                                "attrs": Object {},
                                                                                "tag": "style",
                                                                              },
                                                                            ],
                                                                            "tag": "defs",
                                                                          },
                                                                          Object {
                                                                            "attrs": Object {
                                                                              "d": "M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z",
                                                                            },
                                                                            "tag": "path",
                                                                          },
                                                                          Object {
                                                                            "attrs": Object {
                                                                              "d": "M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z",
                                                                            },
                                                                            "tag": "path",
                                                                          },
                                                                        ],
                                                                        "tag": "svg",
                                                                      },
                                                                      "name": "plus",
                                                                      "theme": "outlined",
                                                                    }
                                                                  }
                                                                >
                                                                  <span
                                                                    aria-label="plus"
                                                                    className="anticon anticon-plus"
                                                                    role="img"
                                                                  >
                                                                    <IconReact
                                                                      className=""
                                                                      icon={
                                                                        Object {
                                                                          "icon": Object {
                                                                            "attrs": Object {
                                                                              "focusable": "false",
                                                                              "viewBox": "64 64 896 896",
                                                                            },
                                                                            "children": Array [
                                                                              Object {
                                                                                "attrs": Object {},
                                                                                "children": Array [
                                                                                  Object {
                                                                                    "attrs": Object {},
                                                                                    "tag": "style",
                                                                                  },
                                                                                ],
                                                                                "tag": "defs",
                                                                              },
                                                                              Object {
                                                                                "attrs": Object {
                                                                                  "d": "M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z",
                                                                                },
                                                                                "tag": "path",
                                                                              },
                                                                              Object {
                                                                                "attrs": Object {
                                                                                  "d": "M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z",
                                                                                },
                                                                                "tag": "path",
                                                                              },
                                                                            ],
                                                                            "tag": "svg",
                                                                          },
                                                                          "name": "plus",
                                                                          "theme": "outlined",
                                                                        }
                                                                      }
                                                                    >
                                                                      <svg
                                                                        aria-hidden="true"
                                                                        className=""
                                                                        data-icon="plus"
                                                                        fill="currentColor"
                                                                        focusable="false"
                                                                        height="1em"
                                                                        key="svg-plus"
                                                                        viewBox="64 64 896 896"
                                                                        width="1em"
                                                                      >
                                                                        <defs
                                                                          key="svg-plus-svg-0"
                                                                        >
                                                                          <style
                                                                            key="svg-plus-svg-0-defs-0"
                                                                          />
                                                                        </defs>
                                                                        <path
                                                                          d="M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z"
                                                                          key="svg-plus-svg-1"
                                                                        />
                                                                        <path
                                                                          d="M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z"
                                                                          key="svg-plus-svg-2"
                                                                        />
                                                                      </svg>
                                                                    </IconReact>
                                                                  </span>
                                                                </AntdIcon>
                                                              </ForwardRef(PlusOutlined)>
                                                              <span
                                                                key=".0"
                                                              >
                                                                Add Claim sources
                                                              </span>
                                                            </button>
                                                          </Wave>
                                                        </Button>
                                                      </div>
                                                    </div>
                                                    <ErrorList
                                                      errors={Array []}
                                                      onDomErrorVisibleChange={[Function]}
                                                    >
                                                      <CSSMotion
                                                        motionAppear={true}
                                                        motionDeadline={500}
                                                        motionName="show-help"
                                                        onLeaveEnd={[Function]}
                                                        removeOnLeave={true}
                                                        visible={false}
                                                      >
                                                        <DomWrapper />
                                                      </CSSMotion>
                                                    </ErrorList>
                                                  </div>
                                                </Col>
                                              </FormItemInput>
                                            </div>
                                          </Row>
                                        </FormItem>
                                      </Field>
                                    </WrapperField>
                                  </List>
                                </FormList>
                              </div>
                            </div>
                            <ErrorList
                              errors={Array []}
                              onDomErrorVisibleChange={[Function]}
                            >
                              <CSSMotion
                                motionAppear={true}
                                motionDeadline={500}
                                motionName="show-help"
                                onLeaveEnd={[Function]}
                                removeOnLeave={true}
                                visible={false}
                              >
                                <DomWrapper />
                              </CSSMotion>
                            </ErrorList>
                          </div>
                        </Col>
                      </FormItemInput>
                    </div>
                  </Row>
                </FormItem>
                <FormItem
                  label="Review Sources"
                >
                  <Row
                    className="ant-form-item"
                    key="row"
                  >
                    <div
                      className="ant-row ant-form-item"
                      style={Object {}}
                    >
                      <FormItemLabel
                        label="Review Sources"
                        prefixCls="ant-form"
                        requiredMark={true}
                      >
                        <Col
                          className="ant-form-item-label"
                          offset={2}
                          span={8}
                        >
                          <div
                            className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                            style={Object {}}
                          >
                            <label
                              className=""
                              title="Review Sources"
                            >
                              Review Sources
                            </label>
                          </div>
                        </Col>
                      </FormItemLabel>
                      <FormItemInput
                        errors={Array []}
                        label="Review Sources"
                        onDomErrorVisibleChange={[Function]}
                        prefixCls="ant-form"
                        status=""
                        validateStatus=""
                      >
                        <Col
                          className="ant-form-item-control"
                          offset={2}
                          span={20}
                        >
                          <div
                            className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                            style={Object {}}
                          >
                            <div
                              className="ant-form-item-control-input"
                            >
                              <div
                                className="ant-form-item-control-input-content"
                              >
                                <FormList
                                  label="Review sources"
                                  name="review_sources"
                                >
                                  <List
                                    label="Review sources"
                                    name="review_sources"
                                  >
                                    <WrapperField
                                      name={Array []}
                                      shouldUpdate={[Function]}
                                    >
                                      <Field
                                        fieldContext={
                                          Object {
                                            "__INTERNAL__": Object {
                                              "itemRef": [Function],
                                              "name": "create-claim",
                                            },
                                            "getFieldError": [Function],
                                            "getFieldInstance": [Function],
                                            "getFieldValue": [Function],
                                            "getFieldsError": [Function],
                                            "getFieldsValue": [Function],
                                            "getInternalHooks": [Function],
                                            "isFieldTouched": [Function],
                                            "isFieldValidating": [Function],
                                            "isFieldsTouched": [Function],
                                            "isFieldsValidating": [Function],
                                            "prefixName": Array [
                                              "review_sources",
                                            ],
                                            "resetFields": [Function],
                                            "scrollToField": [Function],
                                            "setFields": [Function],
                                            "setFieldsValue": [Function],
                                            "submit": [Function],
                                            "validateFields": [Function],
                                            "validateTrigger": "onChange",
                                          }
                                        }
                                        key="_"
                                        name={Array []}
                                        shouldUpdate={[Function]}
                                        trigger="onChange"
                                        valuePropName="value"
                                      >
                                        <FormItem>
                                          <Row
                                            className="ant-form-item"
                                            key="row"
                                          >
                                            <div
                                              className="ant-row ant-form-item"
                                              style={Object {}}
                                            >
                                              <FormItemLabel
                                                prefixCls="ant-form"
                                                requiredMark={true}
                                              />
                                              <FormItemInput
                                                errors={Array []}
                                                onDomErrorVisibleChange={[Function]}
                                                prefixCls="ant-form"
                                                status=""
                                                validateStatus=""
                                              >
                                                <Col
                                                  className="ant-form-item-control"
                                                >
                                                  <div
                                                    className="ant-col ant-form-item-control"
                                                    style={Object {}}
                                                  >
                                                    <div
                                                      className="ant-form-item-control-input"
                                                    >
                                                      <div
                                                        className="ant-form-item-control-input-content"
                                                      >
                                                        <Button
                                                          block={true}
                                                          ghost={false}
                                                          htmlType="button"
                                                          icon={<ForwardRef(PlusOutlined) />}
                                                          loading={false}
                                                          onClick={[Function]}
                                                          type="dashed"
                                                        >
                                                          <Wave>
                                                            <button
                                                              className="ant-btn ant-btn-dashed ant-btn-block"
                                                              onClick={[Function]}
                                                              type="button"
                                                            >
                                                              <ForwardRef(PlusOutlined)>
                                                                <AntdIcon
                                                                  icon={
                                                                    Object {
                                                                      "icon": Object {
                                                                        "attrs": Object {
                                                                          "focusable": "false",
                                                                          "viewBox": "64 64 896 896",
                                                                        },
                                                                        "children": Array [
                                                                          Object {
                                                                            "attrs": Object {},
                                                                            "children": Array [
                                                                              Object {
                                                                                "attrs": Object {},
                                                                                "tag": "style",
                                                                              },
                                                                            ],
                                                                            "tag": "defs",
                                                                          },
                                                                          Object {
                                                                            "attrs": Object {
                                                                              "d": "M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z",
                                                                            },
                                                                            "tag": "path",
                                                                          },
                                                                          Object {
                                                                            "attrs": Object {
                                                                              "d": "M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z",
                                                                            },
                                                                            "tag": "path",
                                                                          },
                                                                        ],
                                                                        "tag": "svg",
                                                                      },
                                                                      "name": "plus",
                                                                      "theme": "outlined",
                                                                    }
                                                                  }
                                                                >
                                                                  <span
                                                                    aria-label="plus"
                                                                    className="anticon anticon-plus"
                                                                    role="img"
                                                                  >
                                                                    <IconReact
                                                                      className=""
                                                                      icon={
                                                                        Object {
                                                                          "icon": Object {
                                                                            "attrs": Object {
                                                                              "focusable": "false",
                                                                              "viewBox": "64 64 896 896",
                                                                            },
                                                                            "children": Array [
                                                                              Object {
                                                                                "attrs": Object {},
                                                                                "children": Array [
                                                                                  Object {
                                                                                    "attrs": Object {},
                                                                                    "tag": "style",
                                                                                  },
                                                                                ],
                                                                                "tag": "defs",
                                                                              },
                                                                              Object {
                                                                                "attrs": Object {
                                                                                  "d": "M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z",
                                                                                },
                                                                                "tag": "path",
                                                                              },
                                                                              Object {
                                                                                "attrs": Object {
                                                                                  "d": "M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z",
                                                                                },
                                                                                "tag": "path",
                                                                              },
                                                                            ],
                                                                            "tag": "svg",
                                                                          },
                                                                          "name": "plus",
                                                                          "theme": "outlined",
                                                                        }
                                                                      }
                                                                    >
                                                                      <svg
                                                                        aria-hidden="true"
                                                                        className=""
                                                                        data-icon="plus"
                                                                        fill="currentColor"
                                                                        focusable="false"
                                                                        height="1em"
                                                                        key="svg-plus"
                                                                        viewBox="64 64 896 896"
                                                                        width="1em"
                                                                      >
                                                                        <defs
                                                                          key="svg-plus-svg-0"
                                                                        >
                                                                          <style
                                                                            key="svg-plus-svg-0-defs-0"
                                                                          />
                                                                        </defs>
                                                                        <path
                                                                          d="M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z"
                                                                          key="svg-plus-svg-1"
                                                                        />
                                                                        <path
                                                                          d="M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z"
                                                                          key="svg-plus-svg-2"
                                                                        />
                                                                      </svg>
                                                                    </IconReact>
                                                                  </span>
                                                                </AntdIcon>
                                                              </ForwardRef(PlusOutlined)>
                                                              <span
                                                                key=".0"
                                                              >
                                                                Add Review sources
                                                              </span>
                                                            </button>
                                                          </Wave>
                                                        </Button>
                                                      </div>
                                                    </div>
                                                    <ErrorList
                                                      errors={Array []}
                                                      onDomErrorVisibleChange={[Function]}
                                                    >
                                                      <CSSMotion
                                                        motionAppear={true}
                                                        motionDeadline={500}
                                                        motionName="show-help"
                                                        onLeaveEnd={[Function]}
                                                        removeOnLeave={true}
                                                        visible={false}
                                                      >
                                                        <DomWrapper />
                                                      </CSSMotion>
                                                    </ErrorList>
                                                  </div>
                                                </Col>
                                              </FormItemInput>
                                            </div>
                                          </Row>
                                        </FormItem>
                                      </Field>
                                    </WrapperField>
                                  </List>
                                </FormList>
                              </div>
                            </div>
                            <ErrorList
                              errors={Array []}
                              onDomErrorVisibleChange={[Function]}
                            >
                              <CSSMotion
                                motionAppear={true}
                                motionDeadline={500}
                                motionName="show-help"
                                onLeaveEnd={[Function]}
                                removeOnLeave={true}
                                visible={false}
                              >
                                <DomWrapper />
                              </CSSMotion>
                            </ErrorList>
                          </div>
                        </Col>
                      </FormItemInput>
                    </div>
                  </Row>
                </FormItem>
              </div>
              <FormItem>
                <Row
                  className="ant-form-item"
                  key="row"
                >
                  <div
                    className="ant-row ant-form-item"
                    style={Object {}}
                  >
                    <FormItemLabel
                      prefixCls="ant-form"
                      requiredMark={true}
                    />
                    <FormItemInput
                      errors={Array []}
                      onDomErrorVisibleChange={[Function]}
                      prefixCls="ant-form"
                      status=""
                      validateStatus=""
                    >
                      <Col
                        className="ant-form-item-control"
                        offset={2}
                        span={20}
                      >
                        <div
                          className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                          style={Object {}}
                        >
                          <div
                            className="ant-form-item-control-input"
                          >
                            <div
                              className="ant-form-item-control-input-content"
                            >
                              <Button
                                block={false}
                                disabled={false}
                                ghost={false}
                                htmlType="button"
                                loading={false}
                                onClick={[Function]}
                              >
                                <Wave>
                                  <button
                                    className="ant-btn"
                                    disabled={false}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <LoadingIcon
                                      existIcon={false}
                                      loading={false}
                                      prefixCls="ant-btn"
                                    >
                                      <CSSMotion
                                        motionName="ant-btn-loading-icon-motion"
                                        onAppearActive={[Function]}
                                        onAppearStart={[Function]}
                                        onEnterActive={[Function]}
                                        onEnterStart={[Function]}
                                        onLeaveActive={[Function]}
                                        onLeaveStart={[Function]}
                                        removeOnLeave={true}
                                        visible={false}
                                      >
                                        <DomWrapper />
                                      </CSSMotion>
                                    </LoadingIcon>
                                    <span
                                      key=".0"
                                    >
                                      Back
                                    </span>
                                  </button>
                                </Wave>
                              </Button>
                              <Button
                                block={false}
                                disabled={true}
                                ghost={false}
                                htmlType="submit"
                                loading={false}
                                type="primary"
                              >
                                <Wave>
                                  <button
                                    className="ant-btn ant-btn-primary"
                                    disabled={true}
                                    onClick={[Function]}
                                    type="submit"
                                  >
                                    <LoadingIcon
                                      existIcon={false}
                                      loading={false}
                                      prefixCls="ant-btn"
                                    >
                                      <CSSMotion
                                        motionName="ant-btn-loading-icon-motion"
                                        onAppearActive={[Function]}
                                        onAppearStart={[Function]}
                                        onEnterActive={[Function]}
                                        onEnterStart={[Function]}
                                        onLeaveActive={[Function]}
                                        onLeaveStart={[Function]}
                                        removeOnLeave={true}
                                        visible={false}
                                      >
                                        <DomWrapper />
                                      </CSSMotion>
                                    </LoadingIcon>
                                    <span
                                      key=".0"
                                    >
                                      Submit
                                    </span>
                                  </button>
                                </Wave>
                              </Button>
                            </div>
                          </div>
                          <ErrorList
                            errors={Array []}
                            onDomErrorVisibleChange={[Function]}
                          >
                            <CSSMotion
                              motionAppear={true}
                              motionDeadline={500}
                              motionName="show-help"
                              onLeaveEnd={[Function]}
                              removeOnLeave={true}
                              visible={false}
                            >
                              <DomWrapper />
                            </CSSMotion>
                          </ErrorList>
                        </div>
                      </Col>
                    </FormItemInput>
                  </div>
                </Row>
              </FormItem>
            </form>
          </ForwardRef(Form)>
        </SizeContextProvider>
      </ForwardRef(InternalForm)>
    </div>
  </ClaimForm>
</Provider>
`;

exports[`Claims Create Form component snapshot testing should render the component 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [Function],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <ClaimForm>
    <div>
      <Steps
        current={0}
        onChange={[Function]}
      >
        <Steps
          className=""
          current={0}
          direction="horizontal"
          iconPrefix="ant"
          icons={
            Object {
              "error": <ForwardRef(CloseOutlined)
                className="ant-steps-error-icon"
              />,
              "finish": <ForwardRef(CheckOutlined)
                className="ant-steps-finish-icon"
              />,
            }
          }
          initial={0}
          labelPlacement="horizontal"
          onChange={[Function]}
          prefixCls="ant-steps"
          progressDot={false}
          size=""
          status="process"
          stepIcon={[Function]}
          type="default"
        >
          <div
            className="ant-steps ant-steps-horizontal ant-steps-label-horizontal"
            style={Object {}}
          >
            <Step
              active={true}
              iconPrefix="ant"
              icons={
                Object {
                  "error": <ForwardRef(CloseOutlined)
                    className="ant-steps-error-icon"
                  />,
                  "finish": <ForwardRef(CheckOutlined)
                    className="ant-steps-finish-icon"
                  />,
                }
              }
              key="0"
              onStepClick={[Function]}
              prefixCls="ant-steps"
              progressDot={false}
              status="process"
              stepIcon={[Function]}
              stepIndex={0}
              stepNumber="1"
              title="Basic"
              wrapperStyle={Object {}}
            >
              <div
                className="ant-steps-item ant-steps-item-process ant-steps-item-active"
                style={Object {}}
              >
                <div
                  className="ant-steps-item-container"
                  onClick={[Function]}
                  role="button"
                  tabIndex={0}
                >
                  <div
                    className="ant-steps-item-tail"
                  />
                  <div
                    className="ant-steps-item-icon"
                  >
                    <span
                      className="ant-steps-icon"
                    >
                      1
                    </span>
                  </div>
                  <div
                    className="ant-steps-item-content"
                  >
                    <div
                      className="ant-steps-item-title"
                    >
                      Basic
                    </div>
                  </div>
                </div>
              </div>
            </Step>
            <Step
              active={false}
              iconPrefix="ant"
              icons={
                Object {
                  "error": <ForwardRef(CloseOutlined)
                    className="ant-steps-error-icon"
                  />,
                  "finish": <ForwardRef(CheckOutlined)
                    className="ant-steps-finish-icon"
                  />,
                }
              }
              key="1"
              onStepClick={[Function]}
              prefixCls="ant-steps"
              progressDot={false}
              status="wait"
              stepIcon={[Function]}
              stepIndex={1}
              stepNumber="2"
              title="Sources"
              wrapperStyle={Object {}}
            >
              <div
                className="ant-steps-item ant-steps-item-wait"
                style={Object {}}
              >
                <div
                  className="ant-steps-item-container"
                  onClick={[Function]}
                  role="button"
                  tabIndex={0}
                >
                  <div
                    className="ant-steps-item-tail"
                  />
                  <div
                    className="ant-steps-item-icon"
                  >
                    <span
                      className="ant-steps-icon"
                    >
                      2
                    </span>
                  </div>
                  <div
                    className="ant-steps-item-content"
                  >
                    <div
                      className="ant-steps-item-title"
                    >
                      Sources
                    </div>
                  </div>
                </div>
              </div>
            </Step>
          </div>
        </Steps>
      </Steps>
      <ForwardRef(InternalForm)
        form={
          Object {
            "__INTERNAL__": Object {
              "itemRef": [Function],
              "name": "create-claim",
            },
            "getFieldError": [Function],
            "getFieldInstance": [Function],
            "getFieldValue": [Function],
            "getFieldsError": [Function],
            "getFieldsValue": [Function],
            "getInternalHooks": [Function],
            "isFieldTouched": [Function],
            "isFieldValidating": [Function],
            "isFieldsTouched": [Function],
            "isFieldsValidating": [Function],
            "resetFields": [Function],
            "scrollToField": [Function],
            "setFields": [Function],
            "setFieldsValue": [Function],
            "submit": [Function],
            "validateFields": [Function],
          }
        }
        initialValues={Object {}}
        labelCol={
          Object {
            "offset": 2,
            "span": 8,
          }
        }
        layout="vertical"
        name="create-claim"
        onFinish={[Function]}
        onFinishFailed={[Function]}
        onValuesChange={[Function]}
        scrollToFirstError={true}
        style={
          Object {
            "paddingTop": "24px",
          }
        }
        wrapperCol={
          Object {
            "offset": 2,
            "span": 20,
          }
        }
      >
        <SizeContextProvider>
          <ForwardRef(Form)
            className="ant-form ant-form-vertical"
            form={
              Object {
                "__INTERNAL__": Object {
                  "itemRef": [Function],
                  "name": "create-claim",
                },
                "getFieldError": [Function],
                "getFieldInstance": [Function],
                "getFieldValue": [Function],
                "getFieldsError": [Function],
                "getFieldsValue": [Function],
                "getInternalHooks": [Function],
                "isFieldTouched": [Function],
                "isFieldValidating": [Function],
                "isFieldsTouched": [Function],
                "isFieldsValidating": [Function],
                "resetFields": [Function],
                "scrollToField": [Function],
                "setFields": [Function],
                "setFieldsValue": [Function],
                "submit": [Function],
                "validateFields": [Function],
              }
            }
            id="create-claim"
            initialValues={Object {}}
            name="create-claim"
            onFinish={[Function]}
            onFinishFailed={[Function]}
            onValuesChange={[Function]}
            style={
              Object {
                "paddingTop": "24px",
              }
            }
          >
            <form
              className="ant-form ant-form-vertical"
              id="create-claim"
              onSubmit={[Function]}
              style={
                Object {
                  "paddingTop": "24px",
                }
              }
            >
              <div
                style={
                  Object {
                    "display": "block",
                  }
                }
              >
                <FormItem
                  label="Claim"
                  name="claim"
                  rules={
                    Array [
                      Object {
                        "message": "Please input the Claim!",
                        "required": true,
                      },
                      Object {
                        "message": "Claim must be minimum 3 characters.",
                        "min": 3,
                      },
                      Object {
                        "max": 5000,
                        "message": "Claim must be maximum 5000 characters.",
                      },
                    ]
                  }
                >
                  <WrapperField
                    label="Claim"
                    messageVariables={
                      Object {
                        "label": "Claim",
                      }
                    }
                    name="claim"
                    onReset={[Function]}
                    rules={
                      Array [
                        Object {
                          "message": "Please input the Claim!",
                          "required": true,
                        },
                        Object {
                          "message": "Claim must be minimum 3 characters.",
                          "min": 3,
                        },
                        Object {
                          "max": 5000,
                          "message": "Claim must be maximum 5000 characters.",
                        },
                      ]
                    }
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_claim"
                      label="Claim"
                      messageVariables={
                        Object {
                          "label": "Claim",
                        }
                      }
                      name={
                        Array [
                          "claim",
                        ]
                      }
                      onReset={[Function]}
                      rules={
                        Array [
                          Object {
                            "message": "Please input the Claim!",
                            "required": true,
                          },
                          Object {
                            "message": "Claim must be minimum 3 characters.",
                            "min": 3,
                          },
                          Object {
                            "max": 5000,
                            "message": "Claim must be maximum 5000 characters.",
                          },
                        ]
                      }
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_claim"
                            label="Claim"
                            name="claim"
                            prefixCls="ant-form"
                            required={true}
                            requiredMark={true}
                            rules={
                              Array [
                                Object {
                                  "message": "Please input the Claim!",
                                  "required": true,
                                },
                                Object {
                                  "message": "Claim must be minimum 3 characters.",
                                  "min": 3,
                                },
                                Object {
                                  "max": 5000,
                                  "message": "Claim must be maximum 5000 characters.",
                                },
                              ]
                            }
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className="ant-form-item-required"
                                  htmlFor="create-claim_claim"
                                  title="Claim"
                                >
                                  Claim
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Claim"
                            name={
                              Array [
                                "claim",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            rules={
                              Array [
                                Object {
                                  "message": "Please input the Claim!",
                                  "required": true,
                                },
                                Object {
                                  "message": "Claim must be minimum 3 characters.",
                                  "min": 3,
                                },
                                Object {
                                  "max": 5000,
                                  "message": "Claim must be maximum 5000 characters.",
                                },
                              ]
                            }
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={1}
                                    >
                                      <TextArea
                                        id="create-claim_claim"
                                        onChange={[Function]}
                                        placeholder="Enter claim...."
                                        rows={6}
                                      >
                                        <ClearableLabeledInput
                                          bordered={true}
                                          element={
                                            <TextArea
                                              className=""
                                              id="create-claim_claim"
                                              onChange={[Function]}
                                              placeholder="Enter claim...."
                                              prefixCls="ant-input"
                                              rows={6}
                                            />
                                          }
                                          handleReset={[Function]}
                                          id="create-claim_claim"
                                          inputType="text"
                                          onChange={[Function]}
                                          placeholder="Enter claim...."
                                          prefixCls="ant-input"
                                          rows={6}
                                          triggerFocus={[Function]}
                                          value=""
                                        >
                                          <TextArea
                                            className=""
                                            id="create-claim_claim"
                                            onChange={[Function]}
                                            placeholder="Enter claim...."
                                            prefixCls="ant-input"
                                            rows={6}
                                            value=""
                                          >
                                            <ResizableTextArea
                                              className=""
                                              id="create-claim_claim"
                                              onChange={[Function]}
                                              onKeyDown={[Function]}
                                              placeholder="Enter claim...."
                                              prefixCls="ant-input"
                                              rows={6}
                                              value=""
                                            >
                                              <ResizeObserver
                                                disabled={true}
                                                onResize={[Function]}
                                              >
                                                <textarea
                                                  className="ant-input"
                                                  id="create-claim_claim"
                                                  onChange={[Function]}
                                                  onKeyDown={[Function]}
                                                  placeholder="Enter claim...."
                                                  rows={6}
                                                  style={Object {}}
                                                  value=""
                                                />
                                              </ResizeObserver>
                                            </ResizableTextArea>
                                          </TextArea>
                                        </ClearableLabeledInput>
                                      </TextArea>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Slug"
                  name="slug"
                  rules={
                    Array [
                      Object {
                        "message": "Please input the slug!",
                        "required": true,
                      },
                      Object {
                        "message": "Please enter valid slug!",
                        "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                      },
                      Object {
                        "max": 150,
                        "message": "Slug must be maximum 150 characters.",
                      },
                    ]
                  }
                >
                  <WrapperField
                    label="Slug"
                    messageVariables={
                      Object {
                        "label": "Slug",
                      }
                    }
                    name="slug"
                    onReset={[Function]}
                    rules={
                      Array [
                        Object {
                          "message": "Please input the slug!",
                          "required": true,
                        },
                        Object {
                          "message": "Please enter valid slug!",
                          "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                        },
                        Object {
                          "max": 150,
                          "message": "Slug must be maximum 150 characters.",
                        },
                      ]
                    }
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_slug"
                      label="Slug"
                      messageVariables={
                        Object {
                          "label": "Slug",
                        }
                      }
                      name={
                        Array [
                          "slug",
                        ]
                      }
                      onReset={[Function]}
                      rules={
                        Array [
                          Object {
                            "message": "Please input the slug!",
                            "required": true,
                          },
                          Object {
                            "message": "Please enter valid slug!",
                            "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                          },
                          Object {
                            "max": 150,
                            "message": "Slug must be maximum 150 characters.",
                          },
                        ]
                      }
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_slug"
                            label="Slug"
                            name="slug"
                            prefixCls="ant-form"
                            required={true}
                            requiredMark={true}
                            rules={
                              Array [
                                Object {
                                  "message": "Please input the slug!",
                                  "required": true,
                                },
                                Object {
                                  "message": "Please enter valid slug!",
                                  "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                                },
                                Object {
                                  "max": 150,
                                  "message": "Slug must be maximum 150 characters.",
                                },
                              ]
                            }
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className="ant-form-item-required"
                                  htmlFor="create-claim_slug"
                                  title="Slug"
                                >
                                  Slug
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Slug"
                            name={
                              Array [
                                "slug",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            rules={
                              Array [
                                Object {
                                  "message": "Please input the slug!",
                                  "required": true,
                                },
                                Object {
                                  "message": "Please enter valid slug!",
                                  "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                                },
                                Object {
                                  "max": 150,
                                  "message": "Slug must be maximum 150 characters.",
                                },
                              ]
                            }
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={1}
                                    >
                                      <Input
                                        id="create-claim_slug"
                                        onChange={[Function]}
                                        type="text"
                                      >
                                        <ClearableLabeledInput
                                          bordered={true}
                                          element={
                                            <input
                                              className="ant-input"
                                              id="create-claim_slug"
                                              onBlur={[Function]}
                                              onChange={[Function]}
                                              onFocus={[Function]}
                                              onKeyDown={[Function]}
                                              type="text"
                                            />
                                          }
                                          focused={false}
                                          handleReset={[Function]}
                                          id="create-claim_slug"
                                          inputType="input"
                                          onChange={[Function]}
                                          prefixCls="ant-input"
                                          triggerFocus={[Function]}
                                          type="text"
                                          value=""
                                        >
                                          <input
                                            className="ant-input"
                                            id="create-claim_slug"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            onKeyDown={[Function]}
                                            type="text"
                                            value=""
                                          />
                                        </ClearableLabeledInput>
                                      </Input>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Fact"
                  name="fact"
                >
                  <WrapperField
                    label="Fact"
                    messageVariables={
                      Object {
                        "label": "Fact",
                      }
                    }
                    name="fact"
                    onReset={[Function]}
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_fact"
                      label="Fact"
                      messageVariables={
                        Object {
                          "label": "Fact",
                        }
                      }
                      name={
                        Array [
                          "fact",
                        ]
                      }
                      onReset={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_fact"
                            label="Fact"
                            name="fact"
                            prefixCls="ant-form"
                            required={false}
                            requiredMark={true}
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className=""
                                  htmlFor="create-claim_fact"
                                  title="Fact"
                                >
                                  Fact
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Fact"
                            name={
                              Array [
                                "fact",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={1}
                                    >
                                      <TextArea
                                        id="create-claim_fact"
                                        onChange={[Function]}
                                        placeholder="Enter Fact ..."
                                        rows={6}
                                      >
                                        <ClearableLabeledInput
                                          bordered={true}
                                          element={
                                            <TextArea
                                              className=""
                                              id="create-claim_fact"
                                              onChange={[Function]}
                                              placeholder="Enter Fact ..."
                                              prefixCls="ant-input"
                                              rows={6}
                                            />
                                          }
                                          handleReset={[Function]}
                                          id="create-claim_fact"
                                          inputType="text"
                                          onChange={[Function]}
                                          placeholder="Enter Fact ..."
                                          prefixCls="ant-input"
                                          rows={6}
                                          triggerFocus={[Function]}
                                          value=""
                                        >
                                          <TextArea
                                            className=""
                                            id="create-claim_fact"
                                            onChange={[Function]}
                                            placeholder="Enter Fact ..."
                                            prefixCls="ant-input"
                                            rows={6}
                                            value=""
                                          >
                                            <ResizableTextArea
                                              className=""
                                              id="create-claim_fact"
                                              onChange={[Function]}
                                              onKeyDown={[Function]}
                                              placeholder="Enter Fact ..."
                                              prefixCls="ant-input"
                                              rows={6}
                                              value=""
                                            >
                                              <ResizeObserver
                                                disabled={true}
                                                onResize={[Function]}
                                              >
                                                <textarea
                                                  className="ant-input"
                                                  id="create-claim_fact"
                                                  onChange={[Function]}
                                                  onKeyDown={[Function]}
                                                  placeholder="Enter Fact ..."
                                                  rows={6}
                                                  style={Object {}}
                                                  value=""
                                                />
                                              </ResizeObserver>
                                            </ResizableTextArea>
                                          </TextArea>
                                        </ClearableLabeledInput>
                                      </TextArea>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Claimant"
                  name="claimant"
                  rules={
                    Array [
                      Object {
                        "message": "Please add claimant!",
                        "required": true,
                      },
                    ]
                  }
                >
                  <WrapperField
                    label="Claimant"
                    messageVariables={
                      Object {
                        "label": "Claimant",
                      }
                    }
                    name="claimant"
                    onReset={[Function]}
                    rules={
                      Array [
                        Object {
                          "message": "Please add claimant!",
                          "required": true,
                        },
                      ]
                    }
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_claimant"
                      label="Claimant"
                      messageVariables={
                        Object {
                          "label": "Claimant",
                        }
                      }
                      name={
                        Array [
                          "claimant",
                        ]
                      }
                      onReset={[Function]}
                      rules={
                        Array [
                          Object {
                            "message": "Please add claimant!",
                            "required": true,
                          },
                        ]
                      }
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_claimant"
                            label="Claimant"
                            name="claimant"
                            prefixCls="ant-form"
                            required={true}
                            requiredMark={true}
                            rules={
                              Array [
                                Object {
                                  "message": "Please add claimant!",
                                  "required": true,
                                },
                              ]
                            }
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className="ant-form-item-required"
                                  htmlFor="create-claim_claimant"
                                  title="Claimant"
                                >
                                  Claimant
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Claimant"
                            name={
                              Array [
                                "claimant",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            rules={
                              Array [
                                Object {
                                  "message": "Please add claimant!",
                                  "required": true,
                                },
                              ]
                            }
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={1}
                                    >
                                      <Selector
                                        action="Claimants"
                                        id="create-claim_claimant"
                                        onChange={[Function]}
                                      >
                                        <ForwardRef(InternalSelect)
                                          allowClear={true}
                                          bordered={true}
                                          defaultValue={
                                            Array [
                                              Array [],
                                            ]
                                          }
                                          filterOption={[Function]}
                                          getPopupContainer={[Function]}
                                          listHeight={128}
                                          loading={false}
                                          notFoundContent={null}
                                          onChange={[Function]}
                                          onPopupScroll={[Function]}
                                          onSearch={[Function]}
                                          placeholder="Select claimants"
                                        >
                                          <Select
                                            allowClear={true}
                                            className=""
                                            clearIcon={<ForwardRef(CloseCircleFilled) />}
                                            defaultValue={
                                              Array [
                                                Array [],
                                              ]
                                            }
                                            dropdownClassName=""
                                            filterOption={[Function]}
                                            getPopupContainer={[Function]}
                                            inputIcon={[Function]}
                                            listHeight={128}
                                            listItemHeight={24}
                                            loading={false}
                                            menuItemSelectedIcon={null}
                                            notFoundContent={null}
                                            onChange={[Function]}
                                            onPopupScroll={[Function]}
                                            onSearch={[Function]}
                                            placeholder="Select claimants"
                                            prefixCls="ant-select"
                                            removeIcon={<ForwardRef(CloseOutlined) />}
                                            transitionName="slide-up"
                                          >
                                            <ForwardRef(Select)
                                              allowClear={true}
                                              className=""
                                              clearIcon={<ForwardRef(CloseCircleFilled) />}
                                              defaultValue={
                                                Array [
                                                  Array [],
                                                ]
                                              }
                                              dropdownClassName=""
                                              filterOption={[Function]}
                                              getPopupContainer={[Function]}
                                              inputIcon={[Function]}
                                              listHeight={128}
                                              listItemHeight={24}
                                              loading={false}
                                              menuItemSelectedIcon={null}
                                              notFoundContent={null}
                                              onChange={[Function]}
                                              onPopupScroll={[Function]}
                                              onSearch={[Function]}
                                              placeholder="Select claimants"
                                              prefixCls="ant-select"
                                              removeIcon={<ForwardRef(CloseOutlined) />}
                                              transitionName="slide-up"
                                            >
                                              <div
                                                className="ant-select ant-select-single ant-select-allow-clear ant-select-show-arrow"
                                                onBlur={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                onKeyUp={[Function]}
                                                onMouseDown={[Function]}
                                              >
                                                <SelectTrigger
                                                  containerWidth={null}
                                                  dropdownClassName=""
                                                  empty={true}
                                                  getPopupContainer={[Function]}
                                                  getTriggerDOMNode={[Function]}
                                                  popupElement={
                                                    <ForwardRef(OptionList)
                                                      childrenAsData={true}
                                                      defaultActiveFirstOption={true}
                                                      flattenOptions={Array []}
                                                      height={128}
                                                      itemHeight={24}
                                                      menuItemSelectedIcon={null}
                                                      multiple={false}
                                                      notFoundContent={null}
                                                      onActiveValue={[Function]}
                                                      onMouseEnter={[Function]}
                                                      onScroll={[Function]}
                                                      onSelect={[Function]}
                                                      onToggleOpen={[Function]}
                                                      options={Array []}
                                                      prefixCls="ant-select"
                                                      searchValue=""
                                                      values={
                                                        Set {
                                                          Array [],
                                                        }
                                                      }
                                                      virtual={true}
                                                    />
                                                  }
                                                  prefixCls="ant-select"
                                                  transitionName="slide-up"
                                                  visible={false}
                                                >
                                                  <Trigger
                                                    action={Array []}
                                                    afterPopupVisibleChange={[Function]}
                                                    autoDestroy={false}
                                                    blurDelay={0.15}
                                                    builtinPlacements={
                                                      Object {
                                                        "bottomLeft": Object {
                                                          "offset": Array [
                                                            0,
                                                            4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "tl",
                                                            "bl",
                                                          ],
                                                        },
                                                        "bottomRight": Object {
                                                          "offset": Array [
                                                            0,
                                                            4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "tr",
                                                            "br",
                                                          ],
                                                        },
                                                        "topLeft": Object {
                                                          "offset": Array [
                                                            0,
                                                            -4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "bl",
                                                            "tl",
                                                          ],
                                                        },
                                                        "topRight": Object {
                                                          "offset": Array [
                                                            0,
                                                            -4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "br",
                                                            "tr",
                                                          ],
                                                        },
                                                      }
                                                    }
                                                    defaultPopupVisible={false}
                                                    destroyPopupOnHide={false}
                                                    focusDelay={0}
                                                    getDocument={[Function]}
                                                    getPopupClassNameFromAlign={[Function]}
                                                    getPopupContainer={[Function]}
                                                    getTriggerDOMNode={[Function]}
                                                    hideAction={Array []}
                                                    mask={false}
                                                    maskClosable={true}
                                                    mouseEnterDelay={0}
                                                    mouseLeaveDelay={0.1}
                                                    onPopupAlign={[Function]}
                                                    onPopupVisibleChange={[Function]}
                                                    popup={
                                                      <div>
                                                        <ForwardRef(OptionList)
                                                          childrenAsData={true}
                                                          defaultActiveFirstOption={true}
                                                          flattenOptions={Array []}
                                                          height={128}
                                                          itemHeight={24}
                                                          menuItemSelectedIcon={null}
                                                          multiple={false}
                                                          notFoundContent={null}
                                                          onActiveValue={[Function]}
                                                          onMouseEnter={[Function]}
                                                          onScroll={[Function]}
                                                          onSelect={[Function]}
                                                          onToggleOpen={[Function]}
                                                          options={Array []}
                                                          prefixCls="ant-select"
                                                          searchValue=""
                                                          values={
                                                            Set {
                                                              Array [],
                                                            }
                                                          }
                                                          virtual={true}
                                                        />
                                                      </div>
                                                    }
                                                    popupAlign={Object {}}
                                                    popupClassName="ant-select-dropdown-empty"
                                                    popupPlacement="bottomLeft"
                                                    popupStyle={
                                                      Object {
                                                        "minWidth": null,
                                                        "width": null,
                                                      }
                                                    }
                                                    popupTransitionName="slide-up"
                                                    popupVisible={false}
                                                    prefixCls="ant-select-dropdown"
                                                    showAction={Array []}
                                                  >
                                                    <Selector
                                                      accessibilityIndex={0}
                                                      activeValue={null}
                                                      allowClear={true}
                                                      className=""
                                                      clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                      defaultValue={
                                                        Array [
                                                          Array [],
                                                        ]
                                                      }
                                                      domRef={
                                                        Object {
                                                          "current": <div
                                                            class="ant-select-selector"
                                                          >
                                                            <span
                                                              class="ant-select-selection-search"
                                                            >
                                                              <input
                                                                aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                aria-autocomplete="list"
                                                                aria-controls="rc_select_TEST_OR_SSR_list"
                                                                aria-haspopup="listbox"
                                                                aria-owns="rc_select_TEST_OR_SSR_list"
                                                                autocomplete="off"
                                                                class="ant-select-selection-search-input"
                                                                id="rc_select_TEST_OR_SSR"
                                                                readonly=""
                                                                role="combobox"
                                                                style="opacity: 0;"
                                                                type="search"
                                                                unselectable="on"
                                                                value=""
                                                              />
                                                            </span>
                                                            <span
                                                              class="ant-select-selection-item"
                                                            />
                                                          </div>,
                                                        }
                                                      }
                                                      dropdownClassName=""
                                                      filterOption={[Function]}
                                                      getPopupContainer={[Function]}
                                                      inputElement={null}
                                                      inputIcon={[Function]}
                                                      key="trigger"
                                                      listHeight={128}
                                                      listItemHeight={24}
                                                      loading={false}
                                                      menuItemSelectedIcon={null}
                                                      multiple={false}
                                                      notFoundContent={null}
                                                      onChange={[Function]}
                                                      onPopupScroll={[Function]}
                                                      onSearch={[Function]}
                                                      onSearchSubmit={[Function]}
                                                      onSelect={[Function]}
                                                      onToggleOpen={[Function]}
                                                      placeholder="Select claimants"
                                                      prefixCls="ant-select"
                                                      removeIcon={<ForwardRef(CloseOutlined) />}
                                                      searchValue=""
                                                      showSearch={false}
                                                      tokenWithEnter={false}
                                                      transitionName="slide-up"
                                                      values={
                                                        Array [
                                                          Object {
                                                            "disabled": undefined,
                                                            "key": Array [],
                                                            "label": Array [],
                                                            "value": Array [],
                                                          },
                                                        ]
                                                      }
                                                    >
                                                      <div
                                                        className="ant-select-selector"
                                                        onClick={[Function]}
                                                        onMouseDown={[Function]}
                                                      >
                                                        <SingleSelector
                                                          accessibilityIndex={0}
                                                          activeValue={null}
                                                          allowClear={true}
                                                          className=""
                                                          clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                          defaultValue={
                                                            Array [
                                                              Array [],
                                                            ]
                                                          }
                                                          domRef={
                                                            Object {
                                                              "current": <div
                                                                class="ant-select-selector"
                                                              >
                                                                <span
                                                                  class="ant-select-selection-search"
                                                                >
                                                                  <input
                                                                    aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                    aria-autocomplete="list"
                                                                    aria-controls="rc_select_TEST_OR_SSR_list"
                                                                    aria-haspopup="listbox"
                                                                    aria-owns="rc_select_TEST_OR_SSR_list"
                                                                    autocomplete="off"
                                                                    class="ant-select-selection-search-input"
                                                                    id="rc_select_TEST_OR_SSR"
                                                                    readonly=""
                                                                    role="combobox"
                                                                    style="opacity: 0;"
                                                                    type="search"
                                                                    unselectable="on"
                                                                    value=""
                                                                  />
                                                                </span>
                                                                <span
                                                                  class="ant-select-selection-item"
                                                                />
                                                              </div>,
                                                            }
                                                          }
                                                          dropdownClassName=""
                                                          filterOption={[Function]}
                                                          getPopupContainer={[Function]}
                                                          inputElement={null}
                                                          inputIcon={[Function]}
                                                          inputRef={
                                                            Object {
                                                              "current": <input
                                                                aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                aria-autocomplete="list"
                                                                aria-controls="rc_select_TEST_OR_SSR_list"
                                                                aria-haspopup="listbox"
                                                                aria-owns="rc_select_TEST_OR_SSR_list"
                                                                autocomplete="off"
                                                                class="ant-select-selection-search-input"
                                                                id="rc_select_TEST_OR_SSR"
                                                                readonly=""
                                                                role="combobox"
                                                                style="opacity: 0;"
                                                                type="search"
                                                                unselectable="on"
                                                                value=""
                                                              />,
                                                            }
                                                          }
                                                          listHeight={128}
                                                          listItemHeight={24}
                                                          loading={false}
                                                          menuItemSelectedIcon={null}
                                                          multiple={false}
                                                          notFoundContent={null}
                                                          onChange={[Function]}
                                                          onInputChange={[Function]}
                                                          onInputCompositionEnd={[Function]}
                                                          onInputCompositionStart={[Function]}
                                                          onInputKeyDown={[Function]}
                                                          onInputMouseDown={[Function]}
                                                          onInputPaste={[Function]}
                                                          onPopupScroll={[Function]}
                                                          onSearch={[Function]}
                                                          onSearchSubmit={[Function]}
                                                          onSelect={[Function]}
                                                          onToggleOpen={[Function]}
                                                          placeholder="Select claimants"
                                                          prefixCls="ant-select"
                                                          removeIcon={<ForwardRef(CloseOutlined) />}
                                                          searchValue=""
                                                          showSearch={false}
                                                          tokenWithEnter={false}
                                                          transitionName="slide-up"
                                                          values={
                                                            Array [
                                                              Object {
                                                                "disabled": undefined,
                                                                "key": Array [],
                                                                "label": Array [],
                                                                "value": Array [],
                                                              },
                                                            ]
                                                          }
                                                        >
                                                          <span
                                                            className="ant-select-selection-search"
                                                          >
                                                            <Input
                                                              accessibilityIndex={0}
                                                              attrs={Object {}}
                                                              editable={false}
                                                              inputElement={null}
                                                              onChange={[Function]}
                                                              onCompositionEnd={[Function]}
                                                              onCompositionStart={[Function]}
                                                              onKeyDown={[Function]}
                                                              onMouseDown={[Function]}
                                                              onPaste={[Function]}
                                                              prefixCls="ant-select"
                                                              value=""
                                                            >
                                                              <input
                                                                aria-activedescendant="undefined_list_0"
                                                                aria-autocomplete="list"
                                                                aria-controls="undefined_list"
                                                                aria-haspopup="listbox"
                                                                aria-owns="undefined_list"
                                                                autoComplete="off"
                                                                className="ant-select-selection-search-input"
                                                                onChange={[Function]}
                                                                onCompositionEnd={[Function]}
                                                                onCompositionStart={[Function]}
                                                                onKeyDown={[Function]}
                                                                onMouseDown={[Function]}
                                                                onPaste={[Function]}
                                                                readOnly={true}
                                                                role="combobox"
                                                                style={
                                                                  Object {
                                                                    "opacity": 0,
                                                                  }
                                                                }
                                                                type="search"
                                                                unselectable="on"
                                                                value=""
                                                              />
                                                            </Input>
                                                          </span>
                                                          <span
                                                            className="ant-select-selection-item"
                                                          />
                                                        </SingleSelector>
                                                      </div>
                                                    </Selector>
                                                  </Trigger>
                                                </SelectTrigger>
                                                <TransBtn
                                                  className="ant-select-arrow"
                                                  customizeIcon={[Function]}
                                                  customizeIconProps={
                                                    Object {
                                                      "focused": false,
                                                      "loading": false,
                                                      "open": undefined,
                                                      "searchValue": "",
                                                      "showSearch": false,
                                                    }
                                                  }
                                                >
                                                  <span
                                                    aria-hidden={true}
                                                    className="ant-select-arrow"
                                                    onMouseDown={[Function]}
                                                    style={
                                                      Object {
                                                        "WebkitUserSelect": "none",
                                                        "userSelect": "none",
                                                      }
                                                    }
                                                    unselectable="on"
                                                  >
                                                    <ForwardRef(DownOutlined)
                                                      className="ant-select-suffix"
                                                    >
                                                      <AntdIcon
                                                        className="ant-select-suffix"
                                                        icon={
                                                          Object {
                                                            "icon": Object {
                                                              "attrs": Object {
                                                                "focusable": "false",
                                                                "viewBox": "64 64 896 896",
                                                              },
                                                              "children": Array [
                                                                Object {
                                                                  "attrs": Object {
                                                                    "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                                                  },
                                                                  "tag": "path",
                                                                },
                                                              ],
                                                              "tag": "svg",
                                                            },
                                                            "name": "down",
                                                            "theme": "outlined",
                                                          }
                                                        }
                                                      >
                                                        <span
                                                          aria-label="down"
                                                          className="anticon anticon-down ant-select-suffix"
                                                          role="img"
                                                        >
                                                          <IconReact
                                                            className=""
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "down",
                                                                "theme": "outlined",
                                                              }
                                                            }
                                                          >
                                                            <svg
                                                              aria-hidden="true"
                                                              className=""
                                                              data-icon="down"
                                                              fill="currentColor"
                                                              focusable="false"
                                                              height="1em"
                                                              key="svg-down"
                                                              viewBox="64 64 896 896"
                                                              width="1em"
                                                            >
                                                              <path
                                                                d="M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z"
                                                                key="svg-down-svg-0"
                                                              />
                                                            </svg>
                                                          </IconReact>
                                                        </span>
                                                      </AntdIcon>
                                                    </ForwardRef(DownOutlined)>
                                                  </span>
                                                </TransBtn>
                                                <TransBtn
                                                  className="ant-select-clear"
                                                  customizeIcon={<ForwardRef(CloseCircleFilled) />}
                                                  onMouseDown={[Function]}
                                                >
                                                  <span
                                                    aria-hidden={true}
                                                    className="ant-select-clear"
                                                    onMouseDown={[Function]}
                                                    style={
                                                      Object {
                                                        "WebkitUserSelect": "none",
                                                        "userSelect": "none",
                                                      }
                                                    }
                                                    unselectable="on"
                                                  >
                                                    <ForwardRef(CloseCircleFilled)>
                                                      <AntdIcon
                                                        icon={
                                                          Object {
                                                            "icon": Object {
                                                              "attrs": Object {
                                                                "focusable": "false",
                                                                "viewBox": "64 64 896 896",
                                                              },
                                                              "children": Array [
                                                                Object {
                                                                  "attrs": Object {
                                                                    "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                  },
                                                                  "tag": "path",
                                                                },
                                                              ],
                                                              "tag": "svg",
                                                            },
                                                            "name": "close-circle",
                                                            "theme": "filled",
                                                          }
                                                        }
                                                      >
                                                        <span
                                                          aria-label="close-circle"
                                                          className="anticon anticon-close-circle"
                                                          role="img"
                                                        >
                                                          <IconReact
                                                            className=""
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "close-circle",
                                                                "theme": "filled",
                                                              }
                                                            }
                                                          >
                                                            <svg
                                                              aria-hidden="true"
                                                              className=""
                                                              data-icon="close-circle"
                                                              fill="currentColor"
                                                              focusable="false"
                                                              height="1em"
                                                              key="svg-close-circle"
                                                              viewBox="64 64 896 896"
                                                              width="1em"
                                                            >
                                                              <path
                                                                d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z"
                                                                key="svg-close-circle-svg-0"
                                                              />
                                                            </svg>
                                                          </IconReact>
                                                        </span>
                                                      </AntdIcon>
                                                    </ForwardRef(CloseCircleFilled)>
                                                  </span>
                                                </TransBtn>
                                              </div>
                                            </ForwardRef(Select)>
                                          </Select>
                                        </ForwardRef(InternalSelect)>
                                      </Selector>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Rating"
                  name="rating"
                  rules={
                    Array [
                      Object {
                        "message": "Please add rating!",
                        "required": true,
                      },
                    ]
                  }
                >
                  <WrapperField
                    label="Rating"
                    messageVariables={
                      Object {
                        "label": "Rating",
                      }
                    }
                    name="rating"
                    onReset={[Function]}
                    rules={
                      Array [
                        Object {
                          "message": "Please add rating!",
                          "required": true,
                        },
                      ]
                    }
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_rating"
                      label="Rating"
                      messageVariables={
                        Object {
                          "label": "Rating",
                        }
                      }
                      name={
                        Array [
                          "rating",
                        ]
                      }
                      onReset={[Function]}
                      rules={
                        Array [
                          Object {
                            "message": "Please add rating!",
                            "required": true,
                          },
                        ]
                      }
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_rating"
                            label="Rating"
                            name="rating"
                            prefixCls="ant-form"
                            required={true}
                            requiredMark={true}
                            rules={
                              Array [
                                Object {
                                  "message": "Please add rating!",
                                  "required": true,
                                },
                              ]
                            }
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className="ant-form-item-required"
                                  htmlFor="create-claim_rating"
                                  title="Rating"
                                >
                                  Rating
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Rating"
                            name={
                              Array [
                                "rating",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            rules={
                              Array [
                                Object {
                                  "message": "Please add rating!",
                                  "required": true,
                                },
                              ]
                            }
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={1}
                                    >
                                      <Selector
                                        action="Ratings"
                                        id="create-claim_rating"
                                        onChange={[Function]}
                                      >
                                        <ForwardRef(InternalSelect)
                                          allowClear={true}
                                          bordered={true}
                                          defaultValue={
                                            Array [
                                              Array [],
                                            ]
                                          }
                                          filterOption={[Function]}
                                          getPopupContainer={[Function]}
                                          listHeight={128}
                                          loading={false}
                                          notFoundContent={null}
                                          onChange={[Function]}
                                          onPopupScroll={[Function]}
                                          onSearch={[Function]}
                                          placeholder="Select ratings"
                                        >
                                          <Select
                                            allowClear={true}
                                            className=""
                                            clearIcon={<ForwardRef(CloseCircleFilled) />}
                                            defaultValue={
                                              Array [
                                                Array [],
                                              ]
                                            }
                                            dropdownClassName=""
                                            filterOption={[Function]}
                                            getPopupContainer={[Function]}
                                            inputIcon={[Function]}
                                            listHeight={128}
                                            listItemHeight={24}
                                            loading={false}
                                            menuItemSelectedIcon={null}
                                            notFoundContent={null}
                                            onChange={[Function]}
                                            onPopupScroll={[Function]}
                                            onSearch={[Function]}
                                            placeholder="Select ratings"
                                            prefixCls="ant-select"
                                            removeIcon={<ForwardRef(CloseOutlined) />}
                                            transitionName="slide-up"
                                          >
                                            <ForwardRef(Select)
                                              allowClear={true}
                                              className=""
                                              clearIcon={<ForwardRef(CloseCircleFilled) />}
                                              defaultValue={
                                                Array [
                                                  Array [],
                                                ]
                                              }
                                              dropdownClassName=""
                                              filterOption={[Function]}
                                              getPopupContainer={[Function]}
                                              inputIcon={[Function]}
                                              listHeight={128}
                                              listItemHeight={24}
                                              loading={false}
                                              menuItemSelectedIcon={null}
                                              notFoundContent={null}
                                              onChange={[Function]}
                                              onPopupScroll={[Function]}
                                              onSearch={[Function]}
                                              placeholder="Select ratings"
                                              prefixCls="ant-select"
                                              removeIcon={<ForwardRef(CloseOutlined) />}
                                              transitionName="slide-up"
                                            >
                                              <div
                                                className="ant-select ant-select-single ant-select-allow-clear ant-select-show-arrow"
                                                onBlur={[Function]}
                                                onFocus={[Function]}
                                                onKeyDown={[Function]}
                                                onKeyUp={[Function]}
                                                onMouseDown={[Function]}
                                              >
                                                <SelectTrigger
                                                  containerWidth={null}
                                                  dropdownClassName=""
                                                  empty={true}
                                                  getPopupContainer={[Function]}
                                                  getTriggerDOMNode={[Function]}
                                                  popupElement={
                                                    <ForwardRef(OptionList)
                                                      childrenAsData={true}
                                                      defaultActiveFirstOption={true}
                                                      flattenOptions={Array []}
                                                      height={128}
                                                      itemHeight={24}
                                                      menuItemSelectedIcon={null}
                                                      multiple={false}
                                                      notFoundContent={null}
                                                      onActiveValue={[Function]}
                                                      onMouseEnter={[Function]}
                                                      onScroll={[Function]}
                                                      onSelect={[Function]}
                                                      onToggleOpen={[Function]}
                                                      options={Array []}
                                                      prefixCls="ant-select"
                                                      searchValue=""
                                                      values={
                                                        Set {
                                                          Array [],
                                                        }
                                                      }
                                                      virtual={true}
                                                    />
                                                  }
                                                  prefixCls="ant-select"
                                                  transitionName="slide-up"
                                                  visible={false}
                                                >
                                                  <Trigger
                                                    action={Array []}
                                                    afterPopupVisibleChange={[Function]}
                                                    autoDestroy={false}
                                                    blurDelay={0.15}
                                                    builtinPlacements={
                                                      Object {
                                                        "bottomLeft": Object {
                                                          "offset": Array [
                                                            0,
                                                            4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "tl",
                                                            "bl",
                                                          ],
                                                        },
                                                        "bottomRight": Object {
                                                          "offset": Array [
                                                            0,
                                                            4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "tr",
                                                            "br",
                                                          ],
                                                        },
                                                        "topLeft": Object {
                                                          "offset": Array [
                                                            0,
                                                            -4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "bl",
                                                            "tl",
                                                          ],
                                                        },
                                                        "topRight": Object {
                                                          "offset": Array [
                                                            0,
                                                            -4,
                                                          ],
                                                          "overflow": Object {
                                                            "adjustX": 0,
                                                            "adjustY": 1,
                                                          },
                                                          "points": Array [
                                                            "br",
                                                            "tr",
                                                          ],
                                                        },
                                                      }
                                                    }
                                                    defaultPopupVisible={false}
                                                    destroyPopupOnHide={false}
                                                    focusDelay={0}
                                                    getDocument={[Function]}
                                                    getPopupClassNameFromAlign={[Function]}
                                                    getPopupContainer={[Function]}
                                                    getTriggerDOMNode={[Function]}
                                                    hideAction={Array []}
                                                    mask={false}
                                                    maskClosable={true}
                                                    mouseEnterDelay={0}
                                                    mouseLeaveDelay={0.1}
                                                    onPopupAlign={[Function]}
                                                    onPopupVisibleChange={[Function]}
                                                    popup={
                                                      <div>
                                                        <ForwardRef(OptionList)
                                                          childrenAsData={true}
                                                          defaultActiveFirstOption={true}
                                                          flattenOptions={Array []}
                                                          height={128}
                                                          itemHeight={24}
                                                          menuItemSelectedIcon={null}
                                                          multiple={false}
                                                          notFoundContent={null}
                                                          onActiveValue={[Function]}
                                                          onMouseEnter={[Function]}
                                                          onScroll={[Function]}
                                                          onSelect={[Function]}
                                                          onToggleOpen={[Function]}
                                                          options={Array []}
                                                          prefixCls="ant-select"
                                                          searchValue=""
                                                          values={
                                                            Set {
                                                              Array [],
                                                            }
                                                          }
                                                          virtual={true}
                                                        />
                                                      </div>
                                                    }
                                                    popupAlign={Object {}}
                                                    popupClassName="ant-select-dropdown-empty"
                                                    popupPlacement="bottomLeft"
                                                    popupStyle={
                                                      Object {
                                                        "minWidth": null,
                                                        "width": null,
                                                      }
                                                    }
                                                    popupTransitionName="slide-up"
                                                    popupVisible={false}
                                                    prefixCls="ant-select-dropdown"
                                                    showAction={Array []}
                                                  >
                                                    <Selector
                                                      accessibilityIndex={0}
                                                      activeValue={null}
                                                      allowClear={true}
                                                      className=""
                                                      clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                      defaultValue={
                                                        Array [
                                                          Array [],
                                                        ]
                                                      }
                                                      domRef={
                                                        Object {
                                                          "current": <div
                                                            class="ant-select-selector"
                                                          >
                                                            <span
                                                              class="ant-select-selection-search"
                                                            >
                                                              <input
                                                                aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                aria-autocomplete="list"
                                                                aria-controls="rc_select_TEST_OR_SSR_list"
                                                                aria-haspopup="listbox"
                                                                aria-owns="rc_select_TEST_OR_SSR_list"
                                                                autocomplete="off"
                                                                class="ant-select-selection-search-input"
                                                                id="rc_select_TEST_OR_SSR"
                                                                readonly=""
                                                                role="combobox"
                                                                style="opacity: 0;"
                                                                type="search"
                                                                unselectable="on"
                                                                value=""
                                                              />
                                                            </span>
                                                            <span
                                                              class="ant-select-selection-item"
                                                            />
                                                          </div>,
                                                        }
                                                      }
                                                      dropdownClassName=""
                                                      filterOption={[Function]}
                                                      getPopupContainer={[Function]}
                                                      inputElement={null}
                                                      inputIcon={[Function]}
                                                      key="trigger"
                                                      listHeight={128}
                                                      listItemHeight={24}
                                                      loading={false}
                                                      menuItemSelectedIcon={null}
                                                      multiple={false}
                                                      notFoundContent={null}
                                                      onChange={[Function]}
                                                      onPopupScroll={[Function]}
                                                      onSearch={[Function]}
                                                      onSearchSubmit={[Function]}
                                                      onSelect={[Function]}
                                                      onToggleOpen={[Function]}
                                                      placeholder="Select ratings"
                                                      prefixCls="ant-select"
                                                      removeIcon={<ForwardRef(CloseOutlined) />}
                                                      searchValue=""
                                                      showSearch={false}
                                                      tokenWithEnter={false}
                                                      transitionName="slide-up"
                                                      values={
                                                        Array [
                                                          Object {
                                                            "disabled": undefined,
                                                            "key": Array [],
                                                            "label": Array [],
                                                            "value": Array [],
                                                          },
                                                        ]
                                                      }
                                                    >
                                                      <div
                                                        className="ant-select-selector"
                                                        onClick={[Function]}
                                                        onMouseDown={[Function]}
                                                      >
                                                        <SingleSelector
                                                          accessibilityIndex={0}
                                                          activeValue={null}
                                                          allowClear={true}
                                                          className=""
                                                          clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                          defaultValue={
                                                            Array [
                                                              Array [],
                                                            ]
                                                          }
                                                          domRef={
                                                            Object {
                                                              "current": <div
                                                                class="ant-select-selector"
                                                              >
                                                                <span
                                                                  class="ant-select-selection-search"
                                                                >
                                                                  <input
                                                                    aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                    aria-autocomplete="list"
                                                                    aria-controls="rc_select_TEST_OR_SSR_list"
                                                                    aria-haspopup="listbox"
                                                                    aria-owns="rc_select_TEST_OR_SSR_list"
                                                                    autocomplete="off"
                                                                    class="ant-select-selection-search-input"
                                                                    id="rc_select_TEST_OR_SSR"
                                                                    readonly=""
                                                                    role="combobox"
                                                                    style="opacity: 0;"
                                                                    type="search"
                                                                    unselectable="on"
                                                                    value=""
                                                                  />
                                                                </span>
                                                                <span
                                                                  class="ant-select-selection-item"
                                                                />
                                                              </div>,
                                                            }
                                                          }
                                                          dropdownClassName=""
                                                          filterOption={[Function]}
                                                          getPopupContainer={[Function]}
                                                          inputElement={null}
                                                          inputIcon={[Function]}
                                                          inputRef={
                                                            Object {
                                                              "current": <input
                                                                aria-activedescendant="rc_select_TEST_OR_SSR_list_0"
                                                                aria-autocomplete="list"
                                                                aria-controls="rc_select_TEST_OR_SSR_list"
                                                                aria-haspopup="listbox"
                                                                aria-owns="rc_select_TEST_OR_SSR_list"
                                                                autocomplete="off"
                                                                class="ant-select-selection-search-input"
                                                                id="rc_select_TEST_OR_SSR"
                                                                readonly=""
                                                                role="combobox"
                                                                style="opacity: 0;"
                                                                type="search"
                                                                unselectable="on"
                                                                value=""
                                                              />,
                                                            }
                                                          }
                                                          listHeight={128}
                                                          listItemHeight={24}
                                                          loading={false}
                                                          menuItemSelectedIcon={null}
                                                          multiple={false}
                                                          notFoundContent={null}
                                                          onChange={[Function]}
                                                          onInputChange={[Function]}
                                                          onInputCompositionEnd={[Function]}
                                                          onInputCompositionStart={[Function]}
                                                          onInputKeyDown={[Function]}
                                                          onInputMouseDown={[Function]}
                                                          onInputPaste={[Function]}
                                                          onPopupScroll={[Function]}
                                                          onSearch={[Function]}
                                                          onSearchSubmit={[Function]}
                                                          onSelect={[Function]}
                                                          onToggleOpen={[Function]}
                                                          placeholder="Select ratings"
                                                          prefixCls="ant-select"
                                                          removeIcon={<ForwardRef(CloseOutlined) />}
                                                          searchValue=""
                                                          showSearch={false}
                                                          tokenWithEnter={false}
                                                          transitionName="slide-up"
                                                          values={
                                                            Array [
                                                              Object {
                                                                "disabled": undefined,
                                                                "key": Array [],
                                                                "label": Array [],
                                                                "value": Array [],
                                                              },
                                                            ]
                                                          }
                                                        >
                                                          <span
                                                            className="ant-select-selection-search"
                                                          >
                                                            <Input
                                                              accessibilityIndex={0}
                                                              attrs={Object {}}
                                                              editable={false}
                                                              inputElement={null}
                                                              onChange={[Function]}
                                                              onCompositionEnd={[Function]}
                                                              onCompositionStart={[Function]}
                                                              onKeyDown={[Function]}
                                                              onMouseDown={[Function]}
                                                              onPaste={[Function]}
                                                              prefixCls="ant-select"
                                                              value=""
                                                            >
                                                              <input
                                                                aria-activedescendant="undefined_list_0"
                                                                aria-autocomplete="list"
                                                                aria-controls="undefined_list"
                                                                aria-haspopup="listbox"
                                                                aria-owns="undefined_list"
                                                                autoComplete="off"
                                                                className="ant-select-selection-search-input"
                                                                onChange={[Function]}
                                                                onCompositionEnd={[Function]}
                                                                onCompositionStart={[Function]}
                                                                onKeyDown={[Function]}
                                                                onMouseDown={[Function]}
                                                                onPaste={[Function]}
                                                                readOnly={true}
                                                                role="combobox"
                                                                style={
                                                                  Object {
                                                                    "opacity": 0,
                                                                  }
                                                                }
                                                                type="search"
                                                                unselectable="on"
                                                                value=""
                                                              />
                                                            </Input>
                                                          </span>
                                                          <span
                                                            className="ant-select-selection-item"
                                                          />
                                                        </SingleSelector>
                                                      </div>
                                                    </Selector>
                                                  </Trigger>
                                                </SelectTrigger>
                                                <TransBtn
                                                  className="ant-select-arrow"
                                                  customizeIcon={[Function]}
                                                  customizeIconProps={
                                                    Object {
                                                      "focused": false,
                                                      "loading": false,
                                                      "open": undefined,
                                                      "searchValue": "",
                                                      "showSearch": false,
                                                    }
                                                  }
                                                >
                                                  <span
                                                    aria-hidden={true}
                                                    className="ant-select-arrow"
                                                    onMouseDown={[Function]}
                                                    style={
                                                      Object {
                                                        "WebkitUserSelect": "none",
                                                        "userSelect": "none",
                                                      }
                                                    }
                                                    unselectable="on"
                                                  >
                                                    <ForwardRef(DownOutlined)
                                                      className="ant-select-suffix"
                                                    >
                                                      <AntdIcon
                                                        className="ant-select-suffix"
                                                        icon={
                                                          Object {
                                                            "icon": Object {
                                                              "attrs": Object {
                                                                "focusable": "false",
                                                                "viewBox": "64 64 896 896",
                                                              },
                                                              "children": Array [
                                                                Object {
                                                                  "attrs": Object {
                                                                    "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                                                  },
                                                                  "tag": "path",
                                                                },
                                                              ],
                                                              "tag": "svg",
                                                            },
                                                            "name": "down",
                                                            "theme": "outlined",
                                                          }
                                                        }
                                                      >
                                                        <span
                                                          aria-label="down"
                                                          className="anticon anticon-down ant-select-suffix"
                                                          role="img"
                                                        >
                                                          <IconReact
                                                            className=""
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "down",
                                                                "theme": "outlined",
                                                              }
                                                            }
                                                          >
                                                            <svg
                                                              aria-hidden="true"
                                                              className=""
                                                              data-icon="down"
                                                              fill="currentColor"
                                                              focusable="false"
                                                              height="1em"
                                                              key="svg-down"
                                                              viewBox="64 64 896 896"
                                                              width="1em"
                                                            >
                                                              <path
                                                                d="M884 256h-75c-5.1 0-9.9 2.5-12.9 6.6L512 654.2 227.9 262.6c-3-4.1-7.8-6.6-12.9-6.6h-75c-6.5 0-10.3 7.4-6.5 12.7l352.6 486.1c12.8 17.6 39 17.6 51.7 0l352.6-486.1c3.9-5.3.1-12.7-6.4-12.7z"
                                                                key="svg-down-svg-0"
                                                              />
                                                            </svg>
                                                          </IconReact>
                                                        </span>
                                                      </AntdIcon>
                                                    </ForwardRef(DownOutlined)>
                                                  </span>
                                                </TransBtn>
                                                <TransBtn
                                                  className="ant-select-clear"
                                                  customizeIcon={<ForwardRef(CloseCircleFilled) />}
                                                  onMouseDown={[Function]}
                                                >
                                                  <span
                                                    aria-hidden={true}
                                                    className="ant-select-clear"
                                                    onMouseDown={[Function]}
                                                    style={
                                                      Object {
                                                        "WebkitUserSelect": "none",
                                                        "userSelect": "none",
                                                      }
                                                    }
                                                    unselectable="on"
                                                  >
                                                    <ForwardRef(CloseCircleFilled)>
                                                      <AntdIcon
                                                        icon={
                                                          Object {
                                                            "icon": Object {
                                                              "attrs": Object {
                                                                "focusable": "false",
                                                                "viewBox": "64 64 896 896",
                                                              },
                                                              "children": Array [
                                                                Object {
                                                                  "attrs": Object {
                                                                    "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                  },
                                                                  "tag": "path",
                                                                },
                                                              ],
                                                              "tag": "svg",
                                                            },
                                                            "name": "close-circle",
                                                            "theme": "filled",
                                                          }
                                                        }
                                                      >
                                                        <span
                                                          aria-label="close-circle"
                                                          className="anticon anticon-close-circle"
                                                          role="img"
                                                        >
                                                          <IconReact
                                                            className=""
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "close-circle",
                                                                "theme": "filled",
                                                              }
                                                            }
                                                          >
                                                            <svg
                                                              aria-hidden="true"
                                                              className=""
                                                              data-icon="close-circle"
                                                              fill="currentColor"
                                                              focusable="false"
                                                              height="1em"
                                                              key="svg-close-circle"
                                                              viewBox="64 64 896 896"
                                                              width="1em"
                                                            >
                                                              <path
                                                                d="M512 64C264.6 64 64 264.6 64 512s200.6 448 448 448 448-200.6 448-448S759.4 64 512 64zm165.4 618.2l-66-.3L512 563.4l-99.3 118.4-66.1.3c-4.4 0-8-3.5-8-8 0-1.9.7-3.7 1.9-5.2l130.1-155L340.5 359a8.32 8.32 0 01-1.9-5.2c0-4.4 3.6-8 8-8l66.1.3L512 464.6l99.3-118.4 66-.3c4.4 0 8 3.5 8 8 0 1.9-.7 3.7-1.9 5.2L553.5 514l130 155c1.2 1.5 1.9 3.3 1.9 5.2 0 4.4-3.6 8-8 8z"
                                                                key="svg-close-circle-svg-0"
                                                              />
                                                            </svg>
                                                          </IconReact>
                                                        </span>
                                                      </AntdIcon>
                                                    </ForwardRef(CloseCircleFilled)>
                                                  </span>
                                                </TransBtn>
                                              </div>
                                            </ForwardRef(Select)>
                                          </Select>
                                        </ForwardRef(InternalSelect)>
                                      </Selector>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Description"
                  name="description"
                >
                  <WrapperField
                    label="Description"
                    messageVariables={
                      Object {
                        "label": "Description",
                      }
                    }
                    name="description"
                    onReset={[Function]}
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_description"
                      label="Description"
                      messageVariables={
                        Object {
                          "label": "Description",
                        }
                      }
                      name={
                        Array [
                          "description",
                        ]
                      }
                      onReset={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_description"
                            label="Description"
                            name="description"
                            prefixCls="ant-form"
                            required={false}
                            requiredMark={true}
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className=""
                                  htmlFor="create-claim_description"
                                  title="Description"
                                >
                                  Description
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Description"
                            name={
                              Array [
                                "description",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={1}
                                    >
                                      <Editor
                                        id="create-claim_description"
                                        onChange={[Function]}
                                        placeholder="Enter Description..."
                                      >
                                        <div
                                          style={null}
                                        />
                                      </Editor>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
              </div>
              <div
                style={
                  Object {
                    "display": "none",
                  }
                }
              >
                <FormItem
                  label="Claim Date"
                  name="claim_date"
                >
                  <WrapperField
                    label="Claim Date"
                    messageVariables={
                      Object {
                        "label": "Claim Date",
                      }
                    }
                    name="claim_date"
                    onReset={[Function]}
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_claim_date"
                      label="Claim Date"
                      messageVariables={
                        Object {
                          "label": "Claim Date",
                        }
                      }
                      name={
                        Array [
                          "claim_date",
                        ]
                      }
                      onReset={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_claim_date"
                            label="Claim Date"
                            name="claim_date"
                            prefixCls="ant-form"
                            required={false}
                            requiredMark={true}
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className=""
                                  htmlFor="create-claim_claim_date"
                                  title="Claim Date"
                                >
                                  Claim Date
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Claim Date"
                            name={
                              Array [
                                "claim_date",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={1}
                                    >
                                      <Picker
                                        id="create-claim_claim_date"
                                        onChange={[Function]}
                                      >
                                        <LocaleReceiver
                                          componentName="DatePicker"
                                          defaultLocale={[Function]}
                                        >
                                          <Picker
                                            allowClear={true}
                                            className=""
                                            clearIcon={<ForwardRef(CloseCircleFilled) />}
                                            components={
                                              Object {
                                                "button": [Function],
                                                "rangeItem": [Function],
                                              }
                                            }
                                            generateConfig={
                                              Object {
                                                "addDate": [Function],
                                                "addMonth": [Function],
                                                "addYear": [Function],
                                                "getDate": [Function],
                                                "getHour": [Function],
                                                "getMinute": [Function],
                                                "getMonth": [Function],
                                                "getNow": [Function],
                                                "getSecond": [Function],
                                                "getWeekDay": [Function],
                                                "getYear": [Function],
                                                "isAfter": [Function],
                                                "isValidate": [Function],
                                                "locale": Object {
                                                  "format": [Function],
                                                  "getShortMonths": [Function],
                                                  "getShortWeekDays": [Function],
                                                  "getWeek": [Function],
                                                  "getWeekFirstDay": [Function],
                                                  "parse": [Function],
                                                },
                                                "setDate": [Function],
                                                "setHour": [Function],
                                                "setMinute": [Function],
                                                "setMonth": [Function],
                                                "setSecond": [Function],
                                                "setYear": [Function],
                                              }
                                            }
                                            id="create-claim_claim_date"
                                            locale={
                                              Object {
                                                "backToToday": "Back to today",
                                                "clear": "Clear",
                                                "dateFormat": "M/D/YYYY",
                                                "dateSelect": "select date",
                                                "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                "dayFormat": "D",
                                                "decadeSelect": "Choose a decade",
                                                "locale": "en_US",
                                                "month": "Month",
                                                "monthBeforeYear": true,
                                                "monthPlaceholder": "Select month",
                                                "monthSelect": "Choose a month",
                                                "nextCentury": "Next century",
                                                "nextDecade": "Next decade",
                                                "nextMonth": "Next month (PageDown)",
                                                "nextYear": "Next year (Control + right)",
                                                "now": "Now",
                                                "ok": "Ok",
                                                "placeholder": "Select date",
                                                "previousCentury": "Last century",
                                                "previousDecade": "Last decade",
                                                "previousMonth": "Previous month (PageUp)",
                                                "previousYear": "Last year (Control + left)",
                                                "quarterPlaceholder": "Select quarter",
                                                "rangeMonthPlaceholder": Array [
                                                  "Start month",
                                                  "End month",
                                                ],
                                                "rangePlaceholder": Array [
                                                  "Start date",
                                                  "End date",
                                                ],
                                                "rangeWeekPlaceholder": Array [
                                                  "Start week",
                                                  "End week",
                                                ],
                                                "rangeYearPlaceholder": Array [
                                                  "Start year",
                                                  "End year",
                                                ],
                                                "timeSelect": "select time",
                                                "today": "Today",
                                                "weekPlaceholder": "Select week",
                                                "weekSelect": "Choose a week",
                                                "year": "Year",
                                                "yearFormat": "YYYY",
                                                "yearPlaceholder": "Select year",
                                                "yearSelect": "Choose a year",
                                              }
                                            }
                                            nextIcon={
                                              <span
                                                className="ant-picker-next-icon"
                                              />
                                            }
                                            onChange={[Function]}
                                            placeholder="Select date"
                                            prefixCls="ant-picker"
                                            prevIcon={
                                              <span
                                                className="ant-picker-prev-icon"
                                              />
                                            }
                                            showToday={true}
                                            suffixIcon={<ForwardRef(CalendarOutlined) />}
                                            superNextIcon={
                                              <span
                                                className="ant-picker-super-next-icon"
                                              />
                                            }
                                            superPrevIcon={
                                              <span
                                                className="ant-picker-super-prev-icon"
                                              />
                                            }
                                            transitionName="slide-up"
                                          >
                                            <InnerPicker
                                              allowClear={true}
                                              className=""
                                              clearIcon={<ForwardRef(CloseCircleFilled) />}
                                              components={
                                                Object {
                                                  "button": [Function],
                                                  "rangeItem": [Function],
                                                }
                                              }
                                              generateConfig={
                                                Object {
                                                  "addDate": [Function],
                                                  "addMonth": [Function],
                                                  "addYear": [Function],
                                                  "getDate": [Function],
                                                  "getHour": [Function],
                                                  "getMinute": [Function],
                                                  "getMonth": [Function],
                                                  "getNow": [Function],
                                                  "getSecond": [Function],
                                                  "getWeekDay": [Function],
                                                  "getYear": [Function],
                                                  "isAfter": [Function],
                                                  "isValidate": [Function],
                                                  "locale": Object {
                                                    "format": [Function],
                                                    "getShortMonths": [Function],
                                                    "getShortWeekDays": [Function],
                                                    "getWeek": [Function],
                                                    "getWeekFirstDay": [Function],
                                                    "parse": [Function],
                                                  },
                                                  "setDate": [Function],
                                                  "setHour": [Function],
                                                  "setMinute": [Function],
                                                  "setMonth": [Function],
                                                  "setSecond": [Function],
                                                  "setYear": [Function],
                                                }
                                              }
                                              id="create-claim_claim_date"
                                              locale={
                                                Object {
                                                  "backToToday": "Back to today",
                                                  "clear": "Clear",
                                                  "dateFormat": "M/D/YYYY",
                                                  "dateSelect": "select date",
                                                  "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                  "dayFormat": "D",
                                                  "decadeSelect": "Choose a decade",
                                                  "locale": "en_US",
                                                  "month": "Month",
                                                  "monthBeforeYear": true,
                                                  "monthPlaceholder": "Select month",
                                                  "monthSelect": "Choose a month",
                                                  "nextCentury": "Next century",
                                                  "nextDecade": "Next decade",
                                                  "nextMonth": "Next month (PageDown)",
                                                  "nextYear": "Next year (Control + right)",
                                                  "now": "Now",
                                                  "ok": "Ok",
                                                  "placeholder": "Select date",
                                                  "previousCentury": "Last century",
                                                  "previousDecade": "Last decade",
                                                  "previousMonth": "Previous month (PageUp)",
                                                  "previousYear": "Last year (Control + left)",
                                                  "quarterPlaceholder": "Select quarter",
                                                  "rangeMonthPlaceholder": Array [
                                                    "Start month",
                                                    "End month",
                                                  ],
                                                  "rangePlaceholder": Array [
                                                    "Start date",
                                                    "End date",
                                                  ],
                                                  "rangeWeekPlaceholder": Array [
                                                    "Start week",
                                                    "End week",
                                                  ],
                                                  "rangeYearPlaceholder": Array [
                                                    "Start year",
                                                    "End year",
                                                  ],
                                                  "timeSelect": "select time",
                                                  "today": "Today",
                                                  "weekPlaceholder": "Select week",
                                                  "weekSelect": "Choose a week",
                                                  "year": "Year",
                                                  "yearFormat": "YYYY",
                                                  "yearPlaceholder": "Select year",
                                                  "yearSelect": "Choose a year",
                                                }
                                              }
                                              nextIcon={
                                                <span
                                                  className="ant-picker-next-icon"
                                                />
                                              }
                                              onChange={[Function]}
                                              pickerRef={
                                                Object {
                                                  "current": Object {
                                                    "blur": [Function],
                                                    "focus": [Function],
                                                  },
                                                }
                                              }
                                              placeholder="Select date"
                                              prefixCls="ant-picker"
                                              prevIcon={
                                                <span
                                                  className="ant-picker-prev-icon"
                                                />
                                              }
                                              showToday={true}
                                              suffixIcon={<ForwardRef(CalendarOutlined) />}
                                              superNextIcon={
                                                <span
                                                  className="ant-picker-super-next-icon"
                                                />
                                              }
                                              superPrevIcon={
                                                <span
                                                  className="ant-picker-super-prev-icon"
                                                />
                                              }
                                              transitionName="slide-up"
                                            >
                                              <PickerTrigger
                                                popupElement={
                                                  <div
                                                    className="ant-picker-panel-container"
                                                    onMouseDown={[Function]}
                                                  >
                                                    <PickerPanel
                                                      allowClear={true}
                                                      className="ant-picker-panel-focused"
                                                      clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                      components={
                                                        Object {
                                                          "button": [Function],
                                                          "rangeItem": [Function],
                                                        }
                                                      }
                                                      generateConfig={
                                                        Object {
                                                          "addDate": [Function],
                                                          "addMonth": [Function],
                                                          "addYear": [Function],
                                                          "getDate": [Function],
                                                          "getHour": [Function],
                                                          "getMinute": [Function],
                                                          "getMonth": [Function],
                                                          "getNow": [Function],
                                                          "getSecond": [Function],
                                                          "getWeekDay": [Function],
                                                          "getYear": [Function],
                                                          "isAfter": [Function],
                                                          "isValidate": [Function],
                                                          "locale": Object {
                                                            "format": [Function],
                                                            "getShortMonths": [Function],
                                                            "getShortWeekDays": [Function],
                                                            "getWeek": [Function],
                                                            "getWeekFirstDay": [Function],
                                                            "parse": [Function],
                                                          },
                                                          "setDate": [Function],
                                                          "setHour": [Function],
                                                          "setMinute": [Function],
                                                          "setMonth": [Function],
                                                          "setSecond": [Function],
                                                          "setYear": [Function],
                                                        }
                                                      }
                                                      id="create-claim_claim_date"
                                                      locale={
                                                        Object {
                                                          "backToToday": "Back to today",
                                                          "clear": "Clear",
                                                          "dateFormat": "M/D/YYYY",
                                                          "dateSelect": "select date",
                                                          "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                          "dayFormat": "D",
                                                          "decadeSelect": "Choose a decade",
                                                          "locale": "en_US",
                                                          "month": "Month",
                                                          "monthBeforeYear": true,
                                                          "monthPlaceholder": "Select month",
                                                          "monthSelect": "Choose a month",
                                                          "nextCentury": "Next century",
                                                          "nextDecade": "Next decade",
                                                          "nextMonth": "Next month (PageDown)",
                                                          "nextYear": "Next year (Control + right)",
                                                          "now": "Now",
                                                          "ok": "Ok",
                                                          "placeholder": "Select date",
                                                          "previousCentury": "Last century",
                                                          "previousDecade": "Last decade",
                                                          "previousMonth": "Previous month (PageUp)",
                                                          "previousYear": "Last year (Control + left)",
                                                          "quarterPlaceholder": "Select quarter",
                                                          "rangeMonthPlaceholder": Array [
                                                            "Start month",
                                                            "End month",
                                                          ],
                                                          "rangePlaceholder": Array [
                                                            "Start date",
                                                            "End date",
                                                          ],
                                                          "rangeWeekPlaceholder": Array [
                                                            "Start week",
                                                            "End week",
                                                          ],
                                                          "rangeYearPlaceholder": Array [
                                                            "Start year",
                                                            "End year",
                                                          ],
                                                          "timeSelect": "select time",
                                                          "today": "Today",
                                                          "weekPlaceholder": "Select week",
                                                          "weekSelect": "Choose a week",
                                                          "year": "Year",
                                                          "yearFormat": "YYYY",
                                                          "yearPlaceholder": "Select year",
                                                          "yearSelect": "Choose a year",
                                                        }
                                                      }
                                                      nextIcon={
                                                        <span
                                                          className="ant-picker-next-icon"
                                                        />
                                                      }
                                                      onChange={[Function]}
                                                      pickerRef={
                                                        Object {
                                                          "current": Object {
                                                            "blur": [Function],
                                                            "focus": [Function],
                                                          },
                                                        }
                                                      }
                                                      placeholder="Select date"
                                                      prefixCls="ant-picker"
                                                      prevIcon={
                                                        <span
                                                          className="ant-picker-prev-icon"
                                                        />
                                                      }
                                                      showToday={true}
                                                      suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                      superNextIcon={
                                                        <span
                                                          className="ant-picker-super-next-icon"
                                                        />
                                                      }
                                                      superPrevIcon={
                                                        <span
                                                          className="ant-picker-super-prev-icon"
                                                        />
                                                      }
                                                      tabIndex={-1}
                                                      transitionName="slide-up"
                                                      value={null}
                                                    />
                                                  </div>
                                                }
                                                popupPlacement="bottomLeft"
                                                prefixCls="ant-picker"
                                                transitionName="slide-up"
                                                visible={false}
                                              >
                                                <Trigger
                                                  action={Array []}
                                                  afterPopupVisibleChange={[Function]}
                                                  autoDestroy={false}
                                                  blurDelay={0.15}
                                                  builtinPlacements={
                                                    Object {
                                                      "bottomLeft": Object {
                                                        "offset": Array [
                                                          0,
                                                          4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 1,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "tl",
                                                          "bl",
                                                        ],
                                                      },
                                                      "bottomRight": Object {
                                                        "offset": Array [
                                                          0,
                                                          4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 1,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "tr",
                                                          "br",
                                                        ],
                                                      },
                                                      "topLeft": Object {
                                                        "offset": Array [
                                                          0,
                                                          -4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 0,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "bl",
                                                          "tl",
                                                        ],
                                                      },
                                                      "topRight": Object {
                                                        "offset": Array [
                                                          0,
                                                          -4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 0,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "br",
                                                          "tr",
                                                        ],
                                                      },
                                                    }
                                                  }
                                                  defaultPopupVisible={false}
                                                  destroyPopupOnHide={false}
                                                  focusDelay={0}
                                                  getDocument={[Function]}
                                                  getPopupClassNameFromAlign={[Function]}
                                                  hideAction={Array []}
                                                  mask={false}
                                                  maskClosable={true}
                                                  mouseEnterDelay={0}
                                                  mouseLeaveDelay={0.1}
                                                  onPopupAlign={[Function]}
                                                  onPopupVisibleChange={[Function]}
                                                  popup={
                                                    <div
                                                      className="ant-picker-panel-container"
                                                      onMouseDown={[Function]}
                                                    >
                                                      <PickerPanel
                                                        allowClear={true}
                                                        className="ant-picker-panel-focused"
                                                        clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                        components={
                                                          Object {
                                                            "button": [Function],
                                                            "rangeItem": [Function],
                                                          }
                                                        }
                                                        generateConfig={
                                                          Object {
                                                            "addDate": [Function],
                                                            "addMonth": [Function],
                                                            "addYear": [Function],
                                                            "getDate": [Function],
                                                            "getHour": [Function],
                                                            "getMinute": [Function],
                                                            "getMonth": [Function],
                                                            "getNow": [Function],
                                                            "getSecond": [Function],
                                                            "getWeekDay": [Function],
                                                            "getYear": [Function],
                                                            "isAfter": [Function],
                                                            "isValidate": [Function],
                                                            "locale": Object {
                                                              "format": [Function],
                                                              "getShortMonths": [Function],
                                                              "getShortWeekDays": [Function],
                                                              "getWeek": [Function],
                                                              "getWeekFirstDay": [Function],
                                                              "parse": [Function],
                                                            },
                                                            "setDate": [Function],
                                                            "setHour": [Function],
                                                            "setMinute": [Function],
                                                            "setMonth": [Function],
                                                            "setSecond": [Function],
                                                            "setYear": [Function],
                                                          }
                                                        }
                                                        id="create-claim_claim_date"
                                                        locale={
                                                          Object {
                                                            "backToToday": "Back to today",
                                                            "clear": "Clear",
                                                            "dateFormat": "M/D/YYYY",
                                                            "dateSelect": "select date",
                                                            "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                            "dayFormat": "D",
                                                            "decadeSelect": "Choose a decade",
                                                            "locale": "en_US",
                                                            "month": "Month",
                                                            "monthBeforeYear": true,
                                                            "monthPlaceholder": "Select month",
                                                            "monthSelect": "Choose a month",
                                                            "nextCentury": "Next century",
                                                            "nextDecade": "Next decade",
                                                            "nextMonth": "Next month (PageDown)",
                                                            "nextYear": "Next year (Control + right)",
                                                            "now": "Now",
                                                            "ok": "Ok",
                                                            "placeholder": "Select date",
                                                            "previousCentury": "Last century",
                                                            "previousDecade": "Last decade",
                                                            "previousMonth": "Previous month (PageUp)",
                                                            "previousYear": "Last year (Control + left)",
                                                            "quarterPlaceholder": "Select quarter",
                                                            "rangeMonthPlaceholder": Array [
                                                              "Start month",
                                                              "End month",
                                                            ],
                                                            "rangePlaceholder": Array [
                                                              "Start date",
                                                              "End date",
                                                            ],
                                                            "rangeWeekPlaceholder": Array [
                                                              "Start week",
                                                              "End week",
                                                            ],
                                                            "rangeYearPlaceholder": Array [
                                                              "Start year",
                                                              "End year",
                                                            ],
                                                            "timeSelect": "select time",
                                                            "today": "Today",
                                                            "weekPlaceholder": "Select week",
                                                            "weekSelect": "Choose a week",
                                                            "year": "Year",
                                                            "yearFormat": "YYYY",
                                                            "yearPlaceholder": "Select year",
                                                            "yearSelect": "Choose a year",
                                                          }
                                                        }
                                                        nextIcon={
                                                          <span
                                                            className="ant-picker-next-icon"
                                                          />
                                                        }
                                                        onChange={[Function]}
                                                        pickerRef={
                                                          Object {
                                                            "current": Object {
                                                              "blur": [Function],
                                                              "focus": [Function],
                                                            },
                                                          }
                                                        }
                                                        placeholder="Select date"
                                                        prefixCls="ant-picker"
                                                        prevIcon={
                                                          <span
                                                            className="ant-picker-prev-icon"
                                                          />
                                                        }
                                                        showToday={true}
                                                        suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                        superNextIcon={
                                                          <span
                                                            className="ant-picker-super-next-icon"
                                                          />
                                                        }
                                                        superPrevIcon={
                                                          <span
                                                            className="ant-picker-super-prev-icon"
                                                          />
                                                        }
                                                        tabIndex={-1}
                                                        transitionName="slide-up"
                                                        value={null}
                                                      />
                                                    </div>
                                                  }
                                                  popupAlign={Object {}}
                                                  popupClassName=""
                                                  popupPlacement="bottomLeft"
                                                  popupStyle={Object {}}
                                                  popupTransitionName="slide-up"
                                                  popupVisible={false}
                                                  prefixCls="ant-picker-dropdown"
                                                  showAction={Array []}
                                                >
                                                  <div
                                                    className="ant-picker"
                                                    key="trigger"
                                                    onMouseUp={[Function]}
                                                  >
                                                    <div
                                                      className="ant-picker-input"
                                                    >
                                                      <input
                                                        autoComplete="off"
                                                        id="create-claim_claim_date"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        onMouseDown={[Function]}
                                                        placeholder="Select date"
                                                        readOnly={true}
                                                        size={12}
                                                        title=""
                                                        value=""
                                                      />
                                                      <span
                                                        className="ant-picker-suffix"
                                                      >
                                                        <ForwardRef(CalendarOutlined)>
                                                          <AntdIcon
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "calendar",
                                                                "theme": "outlined",
                                                              }
                                                            }
                                                          >
                                                            <span
                                                              aria-label="calendar"
                                                              className="anticon anticon-calendar"
                                                              role="img"
                                                            >
                                                              <IconReact
                                                                className=""
                                                                icon={
                                                                  Object {
                                                                    "icon": Object {
                                                                      "attrs": Object {
                                                                        "focusable": "false",
                                                                        "viewBox": "64 64 896 896",
                                                                      },
                                                                      "children": Array [
                                                                        Object {
                                                                          "attrs": Object {
                                                                            "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                          },
                                                                          "tag": "path",
                                                                        },
                                                                      ],
                                                                      "tag": "svg",
                                                                    },
                                                                    "name": "calendar",
                                                                    "theme": "outlined",
                                                                  }
                                                                }
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className=""
                                                                  data-icon="calendar"
                                                                  fill="currentColor"
                                                                  focusable="false"
                                                                  height="1em"
                                                                  key="svg-calendar"
                                                                  viewBox="64 64 896 896"
                                                                  width="1em"
                                                                >
                                                                  <path
                                                                    d="M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z"
                                                                    key="svg-calendar-svg-0"
                                                                  />
                                                                </svg>
                                                              </IconReact>
                                                            </span>
                                                          </AntdIcon>
                                                        </ForwardRef(CalendarOutlined)>
                                                      </span>
                                                    </div>
                                                  </div>
                                                </Trigger>
                                              </PickerTrigger>
                                            </InnerPicker>
                                          </Picker>
                                        </LocaleReceiver>
                                      </Picker>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Checked Date"
                  name="checked_date"
                >
                  <WrapperField
                    label="Checked Date"
                    messageVariables={
                      Object {
                        "label": "Checked Date",
                      }
                    }
                    name="checked_date"
                    onReset={[Function]}
                    trigger="onChange"
                    validateTrigger="onChange"
                  >
                    <Field
                      fieldContext={
                        Object {
                          "__INTERNAL__": Object {
                            "itemRef": [Function],
                            "name": "create-claim",
                          },
                          "getFieldError": [Function],
                          "getFieldInstance": [Function],
                          "getFieldValue": [Function],
                          "getFieldsError": [Function],
                          "getFieldsValue": [Function],
                          "getInternalHooks": [Function],
                          "isFieldTouched": [Function],
                          "isFieldValidating": [Function],
                          "isFieldsTouched": [Function],
                          "isFieldsValidating": [Function],
                          "resetFields": [Function],
                          "scrollToField": [Function],
                          "setFields": [Function],
                          "setFieldsValue": [Function],
                          "submit": [Function],
                          "validateFields": [Function],
                          "validateTrigger": "onChange",
                        }
                      }
                      key="_checked_date"
                      label="Checked Date"
                      messageVariables={
                        Object {
                          "label": "Checked Date",
                        }
                      }
                      name={
                        Array [
                          "checked_date",
                        ]
                      }
                      onReset={[Function]}
                      trigger="onChange"
                      validateTrigger="onChange"
                      valuePropName="value"
                    >
                      <Row
                        className="ant-form-item"
                        key="row"
                      >
                        <div
                          className="ant-row ant-form-item"
                          style={Object {}}
                        >
                          <FormItemLabel
                            htmlFor="create-claim_checked_date"
                            label="Checked Date"
                            name="checked_date"
                            prefixCls="ant-form"
                            required={false}
                            requiredMark={true}
                          >
                            <Col
                              className="ant-form-item-label"
                              offset={2}
                              span={8}
                            >
                              <div
                                className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                                style={Object {}}
                              >
                                <label
                                  className=""
                                  htmlFor="create-claim_checked_date"
                                  title="Checked Date"
                                >
                                  Checked Date
                                </label>
                              </div>
                            </Col>
                          </FormItemLabel>
                          <FormItemInput
                            errors={Array []}
                            label="Checked Date"
                            name={
                              Array [
                                "checked_date",
                              ]
                            }
                            onDomErrorVisibleChange={[Function]}
                            prefixCls="ant-form"
                            status=""
                            touched={false}
                            validateStatus=""
                            validating={false}
                          >
                            <Col
                              className="ant-form-item-control"
                              offset={2}
                              span={20}
                            >
                              <div
                                className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                                style={Object {}}
                              >
                                <div
                                  className="ant-form-item-control-input"
                                >
                                  <div
                                    className="ant-form-item-control-input-content"
                                  >
                                    <Component
                                      update={1}
                                    >
                                      <Picker
                                        id="create-claim_checked_date"
                                        onChange={[Function]}
                                      >
                                        <LocaleReceiver
                                          componentName="DatePicker"
                                          defaultLocale={[Function]}
                                        >
                                          <Picker
                                            allowClear={true}
                                            className=""
                                            clearIcon={<ForwardRef(CloseCircleFilled) />}
                                            components={
                                              Object {
                                                "button": [Function],
                                                "rangeItem": [Function],
                                              }
                                            }
                                            generateConfig={
                                              Object {
                                                "addDate": [Function],
                                                "addMonth": [Function],
                                                "addYear": [Function],
                                                "getDate": [Function],
                                                "getHour": [Function],
                                                "getMinute": [Function],
                                                "getMonth": [Function],
                                                "getNow": [Function],
                                                "getSecond": [Function],
                                                "getWeekDay": [Function],
                                                "getYear": [Function],
                                                "isAfter": [Function],
                                                "isValidate": [Function],
                                                "locale": Object {
                                                  "format": [Function],
                                                  "getShortMonths": [Function],
                                                  "getShortWeekDays": [Function],
                                                  "getWeek": [Function],
                                                  "getWeekFirstDay": [Function],
                                                  "parse": [Function],
                                                },
                                                "setDate": [Function],
                                                "setHour": [Function],
                                                "setMinute": [Function],
                                                "setMonth": [Function],
                                                "setSecond": [Function],
                                                "setYear": [Function],
                                              }
                                            }
                                            id="create-claim_checked_date"
                                            locale={
                                              Object {
                                                "backToToday": "Back to today",
                                                "clear": "Clear",
                                                "dateFormat": "M/D/YYYY",
                                                "dateSelect": "select date",
                                                "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                "dayFormat": "D",
                                                "decadeSelect": "Choose a decade",
                                                "locale": "en_US",
                                                "month": "Month",
                                                "monthBeforeYear": true,
                                                "monthPlaceholder": "Select month",
                                                "monthSelect": "Choose a month",
                                                "nextCentury": "Next century",
                                                "nextDecade": "Next decade",
                                                "nextMonth": "Next month (PageDown)",
                                                "nextYear": "Next year (Control + right)",
                                                "now": "Now",
                                                "ok": "Ok",
                                                "placeholder": "Select date",
                                                "previousCentury": "Last century",
                                                "previousDecade": "Last decade",
                                                "previousMonth": "Previous month (PageUp)",
                                                "previousYear": "Last year (Control + left)",
                                                "quarterPlaceholder": "Select quarter",
                                                "rangeMonthPlaceholder": Array [
                                                  "Start month",
                                                  "End month",
                                                ],
                                                "rangePlaceholder": Array [
                                                  "Start date",
                                                  "End date",
                                                ],
                                                "rangeWeekPlaceholder": Array [
                                                  "Start week",
                                                  "End week",
                                                ],
                                                "rangeYearPlaceholder": Array [
                                                  "Start year",
                                                  "End year",
                                                ],
                                                "timeSelect": "select time",
                                                "today": "Today",
                                                "weekPlaceholder": "Select week",
                                                "weekSelect": "Choose a week",
                                                "year": "Year",
                                                "yearFormat": "YYYY",
                                                "yearPlaceholder": "Select year",
                                                "yearSelect": "Choose a year",
                                              }
                                            }
                                            nextIcon={
                                              <span
                                                className="ant-picker-next-icon"
                                              />
                                            }
                                            onChange={[Function]}
                                            placeholder="Select date"
                                            prefixCls="ant-picker"
                                            prevIcon={
                                              <span
                                                className="ant-picker-prev-icon"
                                              />
                                            }
                                            showToday={true}
                                            suffixIcon={<ForwardRef(CalendarOutlined) />}
                                            superNextIcon={
                                              <span
                                                className="ant-picker-super-next-icon"
                                              />
                                            }
                                            superPrevIcon={
                                              <span
                                                className="ant-picker-super-prev-icon"
                                              />
                                            }
                                            transitionName="slide-up"
                                          >
                                            <InnerPicker
                                              allowClear={true}
                                              className=""
                                              clearIcon={<ForwardRef(CloseCircleFilled) />}
                                              components={
                                                Object {
                                                  "button": [Function],
                                                  "rangeItem": [Function],
                                                }
                                              }
                                              generateConfig={
                                                Object {
                                                  "addDate": [Function],
                                                  "addMonth": [Function],
                                                  "addYear": [Function],
                                                  "getDate": [Function],
                                                  "getHour": [Function],
                                                  "getMinute": [Function],
                                                  "getMonth": [Function],
                                                  "getNow": [Function],
                                                  "getSecond": [Function],
                                                  "getWeekDay": [Function],
                                                  "getYear": [Function],
                                                  "isAfter": [Function],
                                                  "isValidate": [Function],
                                                  "locale": Object {
                                                    "format": [Function],
                                                    "getShortMonths": [Function],
                                                    "getShortWeekDays": [Function],
                                                    "getWeek": [Function],
                                                    "getWeekFirstDay": [Function],
                                                    "parse": [Function],
                                                  },
                                                  "setDate": [Function],
                                                  "setHour": [Function],
                                                  "setMinute": [Function],
                                                  "setMonth": [Function],
                                                  "setSecond": [Function],
                                                  "setYear": [Function],
                                                }
                                              }
                                              id="create-claim_checked_date"
                                              locale={
                                                Object {
                                                  "backToToday": "Back to today",
                                                  "clear": "Clear",
                                                  "dateFormat": "M/D/YYYY",
                                                  "dateSelect": "select date",
                                                  "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                  "dayFormat": "D",
                                                  "decadeSelect": "Choose a decade",
                                                  "locale": "en_US",
                                                  "month": "Month",
                                                  "monthBeforeYear": true,
                                                  "monthPlaceholder": "Select month",
                                                  "monthSelect": "Choose a month",
                                                  "nextCentury": "Next century",
                                                  "nextDecade": "Next decade",
                                                  "nextMonth": "Next month (PageDown)",
                                                  "nextYear": "Next year (Control + right)",
                                                  "now": "Now",
                                                  "ok": "Ok",
                                                  "placeholder": "Select date",
                                                  "previousCentury": "Last century",
                                                  "previousDecade": "Last decade",
                                                  "previousMonth": "Previous month (PageUp)",
                                                  "previousYear": "Last year (Control + left)",
                                                  "quarterPlaceholder": "Select quarter",
                                                  "rangeMonthPlaceholder": Array [
                                                    "Start month",
                                                    "End month",
                                                  ],
                                                  "rangePlaceholder": Array [
                                                    "Start date",
                                                    "End date",
                                                  ],
                                                  "rangeWeekPlaceholder": Array [
                                                    "Start week",
                                                    "End week",
                                                  ],
                                                  "rangeYearPlaceholder": Array [
                                                    "Start year",
                                                    "End year",
                                                  ],
                                                  "timeSelect": "select time",
                                                  "today": "Today",
                                                  "weekPlaceholder": "Select week",
                                                  "weekSelect": "Choose a week",
                                                  "year": "Year",
                                                  "yearFormat": "YYYY",
                                                  "yearPlaceholder": "Select year",
                                                  "yearSelect": "Choose a year",
                                                }
                                              }
                                              nextIcon={
                                                <span
                                                  className="ant-picker-next-icon"
                                                />
                                              }
                                              onChange={[Function]}
                                              pickerRef={
                                                Object {
                                                  "current": Object {
                                                    "blur": [Function],
                                                    "focus": [Function],
                                                  },
                                                }
                                              }
                                              placeholder="Select date"
                                              prefixCls="ant-picker"
                                              prevIcon={
                                                <span
                                                  className="ant-picker-prev-icon"
                                                />
                                              }
                                              showToday={true}
                                              suffixIcon={<ForwardRef(CalendarOutlined) />}
                                              superNextIcon={
                                                <span
                                                  className="ant-picker-super-next-icon"
                                                />
                                              }
                                              superPrevIcon={
                                                <span
                                                  className="ant-picker-super-prev-icon"
                                                />
                                              }
                                              transitionName="slide-up"
                                            >
                                              <PickerTrigger
                                                popupElement={
                                                  <div
                                                    className="ant-picker-panel-container"
                                                    onMouseDown={[Function]}
                                                  >
                                                    <PickerPanel
                                                      allowClear={true}
                                                      className="ant-picker-panel-focused"
                                                      clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                      components={
                                                        Object {
                                                          "button": [Function],
                                                          "rangeItem": [Function],
                                                        }
                                                      }
                                                      generateConfig={
                                                        Object {
                                                          "addDate": [Function],
                                                          "addMonth": [Function],
                                                          "addYear": [Function],
                                                          "getDate": [Function],
                                                          "getHour": [Function],
                                                          "getMinute": [Function],
                                                          "getMonth": [Function],
                                                          "getNow": [Function],
                                                          "getSecond": [Function],
                                                          "getWeekDay": [Function],
                                                          "getYear": [Function],
                                                          "isAfter": [Function],
                                                          "isValidate": [Function],
                                                          "locale": Object {
                                                            "format": [Function],
                                                            "getShortMonths": [Function],
                                                            "getShortWeekDays": [Function],
                                                            "getWeek": [Function],
                                                            "getWeekFirstDay": [Function],
                                                            "parse": [Function],
                                                          },
                                                          "setDate": [Function],
                                                          "setHour": [Function],
                                                          "setMinute": [Function],
                                                          "setMonth": [Function],
                                                          "setSecond": [Function],
                                                          "setYear": [Function],
                                                        }
                                                      }
                                                      id="create-claim_checked_date"
                                                      locale={
                                                        Object {
                                                          "backToToday": "Back to today",
                                                          "clear": "Clear",
                                                          "dateFormat": "M/D/YYYY",
                                                          "dateSelect": "select date",
                                                          "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                          "dayFormat": "D",
                                                          "decadeSelect": "Choose a decade",
                                                          "locale": "en_US",
                                                          "month": "Month",
                                                          "monthBeforeYear": true,
                                                          "monthPlaceholder": "Select month",
                                                          "monthSelect": "Choose a month",
                                                          "nextCentury": "Next century",
                                                          "nextDecade": "Next decade",
                                                          "nextMonth": "Next month (PageDown)",
                                                          "nextYear": "Next year (Control + right)",
                                                          "now": "Now",
                                                          "ok": "Ok",
                                                          "placeholder": "Select date",
                                                          "previousCentury": "Last century",
                                                          "previousDecade": "Last decade",
                                                          "previousMonth": "Previous month (PageUp)",
                                                          "previousYear": "Last year (Control + left)",
                                                          "quarterPlaceholder": "Select quarter",
                                                          "rangeMonthPlaceholder": Array [
                                                            "Start month",
                                                            "End month",
                                                          ],
                                                          "rangePlaceholder": Array [
                                                            "Start date",
                                                            "End date",
                                                          ],
                                                          "rangeWeekPlaceholder": Array [
                                                            "Start week",
                                                            "End week",
                                                          ],
                                                          "rangeYearPlaceholder": Array [
                                                            "Start year",
                                                            "End year",
                                                          ],
                                                          "timeSelect": "select time",
                                                          "today": "Today",
                                                          "weekPlaceholder": "Select week",
                                                          "weekSelect": "Choose a week",
                                                          "year": "Year",
                                                          "yearFormat": "YYYY",
                                                          "yearPlaceholder": "Select year",
                                                          "yearSelect": "Choose a year",
                                                        }
                                                      }
                                                      nextIcon={
                                                        <span
                                                          className="ant-picker-next-icon"
                                                        />
                                                      }
                                                      onChange={[Function]}
                                                      pickerRef={
                                                        Object {
                                                          "current": Object {
                                                            "blur": [Function],
                                                            "focus": [Function],
                                                          },
                                                        }
                                                      }
                                                      placeholder="Select date"
                                                      prefixCls="ant-picker"
                                                      prevIcon={
                                                        <span
                                                          className="ant-picker-prev-icon"
                                                        />
                                                      }
                                                      showToday={true}
                                                      suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                      superNextIcon={
                                                        <span
                                                          className="ant-picker-super-next-icon"
                                                        />
                                                      }
                                                      superPrevIcon={
                                                        <span
                                                          className="ant-picker-super-prev-icon"
                                                        />
                                                      }
                                                      tabIndex={-1}
                                                      transitionName="slide-up"
                                                      value={null}
                                                    />
                                                  </div>
                                                }
                                                popupPlacement="bottomLeft"
                                                prefixCls="ant-picker"
                                                transitionName="slide-up"
                                                visible={false}
                                              >
                                                <Trigger
                                                  action={Array []}
                                                  afterPopupVisibleChange={[Function]}
                                                  autoDestroy={false}
                                                  blurDelay={0.15}
                                                  builtinPlacements={
                                                    Object {
                                                      "bottomLeft": Object {
                                                        "offset": Array [
                                                          0,
                                                          4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 1,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "tl",
                                                          "bl",
                                                        ],
                                                      },
                                                      "bottomRight": Object {
                                                        "offset": Array [
                                                          0,
                                                          4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 1,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "tr",
                                                          "br",
                                                        ],
                                                      },
                                                      "topLeft": Object {
                                                        "offset": Array [
                                                          0,
                                                          -4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 0,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "bl",
                                                          "tl",
                                                        ],
                                                      },
                                                      "topRight": Object {
                                                        "offset": Array [
                                                          0,
                                                          -4,
                                                        ],
                                                        "overflow": Object {
                                                          "adjustX": 0,
                                                          "adjustY": 1,
                                                        },
                                                        "points": Array [
                                                          "br",
                                                          "tr",
                                                        ],
                                                      },
                                                    }
                                                  }
                                                  defaultPopupVisible={false}
                                                  destroyPopupOnHide={false}
                                                  focusDelay={0}
                                                  getDocument={[Function]}
                                                  getPopupClassNameFromAlign={[Function]}
                                                  hideAction={Array []}
                                                  mask={false}
                                                  maskClosable={true}
                                                  mouseEnterDelay={0}
                                                  mouseLeaveDelay={0.1}
                                                  onPopupAlign={[Function]}
                                                  onPopupVisibleChange={[Function]}
                                                  popup={
                                                    <div
                                                      className="ant-picker-panel-container"
                                                      onMouseDown={[Function]}
                                                    >
                                                      <PickerPanel
                                                        allowClear={true}
                                                        className="ant-picker-panel-focused"
                                                        clearIcon={<ForwardRef(CloseCircleFilled) />}
                                                        components={
                                                          Object {
                                                            "button": [Function],
                                                            "rangeItem": [Function],
                                                          }
                                                        }
                                                        generateConfig={
                                                          Object {
                                                            "addDate": [Function],
                                                            "addMonth": [Function],
                                                            "addYear": [Function],
                                                            "getDate": [Function],
                                                            "getHour": [Function],
                                                            "getMinute": [Function],
                                                            "getMonth": [Function],
                                                            "getNow": [Function],
                                                            "getSecond": [Function],
                                                            "getWeekDay": [Function],
                                                            "getYear": [Function],
                                                            "isAfter": [Function],
                                                            "isValidate": [Function],
                                                            "locale": Object {
                                                              "format": [Function],
                                                              "getShortMonths": [Function],
                                                              "getShortWeekDays": [Function],
                                                              "getWeek": [Function],
                                                              "getWeekFirstDay": [Function],
                                                              "parse": [Function],
                                                            },
                                                            "setDate": [Function],
                                                            "setHour": [Function],
                                                            "setMinute": [Function],
                                                            "setMonth": [Function],
                                                            "setSecond": [Function],
                                                            "setYear": [Function],
                                                          }
                                                        }
                                                        id="create-claim_checked_date"
                                                        locale={
                                                          Object {
                                                            "backToToday": "Back to today",
                                                            "clear": "Clear",
                                                            "dateFormat": "M/D/YYYY",
                                                            "dateSelect": "select date",
                                                            "dateTimeFormat": "M/D/YYYY HH:mm:ss",
                                                            "dayFormat": "D",
                                                            "decadeSelect": "Choose a decade",
                                                            "locale": "en_US",
                                                            "month": "Month",
                                                            "monthBeforeYear": true,
                                                            "monthPlaceholder": "Select month",
                                                            "monthSelect": "Choose a month",
                                                            "nextCentury": "Next century",
                                                            "nextDecade": "Next decade",
                                                            "nextMonth": "Next month (PageDown)",
                                                            "nextYear": "Next year (Control + right)",
                                                            "now": "Now",
                                                            "ok": "Ok",
                                                            "placeholder": "Select date",
                                                            "previousCentury": "Last century",
                                                            "previousDecade": "Last decade",
                                                            "previousMonth": "Previous month (PageUp)",
                                                            "previousYear": "Last year (Control + left)",
                                                            "quarterPlaceholder": "Select quarter",
                                                            "rangeMonthPlaceholder": Array [
                                                              "Start month",
                                                              "End month",
                                                            ],
                                                            "rangePlaceholder": Array [
                                                              "Start date",
                                                              "End date",
                                                            ],
                                                            "rangeWeekPlaceholder": Array [
                                                              "Start week",
                                                              "End week",
                                                            ],
                                                            "rangeYearPlaceholder": Array [
                                                              "Start year",
                                                              "End year",
                                                            ],
                                                            "timeSelect": "select time",
                                                            "today": "Today",
                                                            "weekPlaceholder": "Select week",
                                                            "weekSelect": "Choose a week",
                                                            "year": "Year",
                                                            "yearFormat": "YYYY",
                                                            "yearPlaceholder": "Select year",
                                                            "yearSelect": "Choose a year",
                                                          }
                                                        }
                                                        nextIcon={
                                                          <span
                                                            className="ant-picker-next-icon"
                                                          />
                                                        }
                                                        onChange={[Function]}
                                                        pickerRef={
                                                          Object {
                                                            "current": Object {
                                                              "blur": [Function],
                                                              "focus": [Function],
                                                            },
                                                          }
                                                        }
                                                        placeholder="Select date"
                                                        prefixCls="ant-picker"
                                                        prevIcon={
                                                          <span
                                                            className="ant-picker-prev-icon"
                                                          />
                                                        }
                                                        showToday={true}
                                                        suffixIcon={<ForwardRef(CalendarOutlined) />}
                                                        superNextIcon={
                                                          <span
                                                            className="ant-picker-super-next-icon"
                                                          />
                                                        }
                                                        superPrevIcon={
                                                          <span
                                                            className="ant-picker-super-prev-icon"
                                                          />
                                                        }
                                                        tabIndex={-1}
                                                        transitionName="slide-up"
                                                        value={null}
                                                      />
                                                    </div>
                                                  }
                                                  popupAlign={Object {}}
                                                  popupClassName=""
                                                  popupPlacement="bottomLeft"
                                                  popupStyle={Object {}}
                                                  popupTransitionName="slide-up"
                                                  popupVisible={false}
                                                  prefixCls="ant-picker-dropdown"
                                                  showAction={Array []}
                                                >
                                                  <div
                                                    className="ant-picker"
                                                    key="trigger"
                                                    onMouseUp={[Function]}
                                                  >
                                                    <div
                                                      className="ant-picker-input"
                                                    >
                                                      <input
                                                        autoComplete="off"
                                                        id="create-claim_checked_date"
                                                        onBlur={[Function]}
                                                        onChange={[Function]}
                                                        onFocus={[Function]}
                                                        onKeyDown={[Function]}
                                                        onMouseDown={[Function]}
                                                        placeholder="Select date"
                                                        readOnly={true}
                                                        size={12}
                                                        title=""
                                                        value=""
                                                      />
                                                      <span
                                                        className="ant-picker-suffix"
                                                      >
                                                        <ForwardRef(CalendarOutlined)>
                                                          <AntdIcon
                                                            icon={
                                                              Object {
                                                                "icon": Object {
                                                                  "attrs": Object {
                                                                    "focusable": "false",
                                                                    "viewBox": "64 64 896 896",
                                                                  },
                                                                  "children": Array [
                                                                    Object {
                                                                      "attrs": Object {
                                                                        "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                      },
                                                                      "tag": "path",
                                                                    },
                                                                  ],
                                                                  "tag": "svg",
                                                                },
                                                                "name": "calendar",
                                                                "theme": "outlined",
                                                              }
                                                            }
                                                          >
                                                            <span
                                                              aria-label="calendar"
                                                              className="anticon anticon-calendar"
                                                              role="img"
                                                            >
                                                              <IconReact
                                                                className=""
                                                                icon={
                                                                  Object {
                                                                    "icon": Object {
                                                                      "attrs": Object {
                                                                        "focusable": "false",
                                                                        "viewBox": "64 64 896 896",
                                                                      },
                                                                      "children": Array [
                                                                        Object {
                                                                          "attrs": Object {
                                                                            "d": "M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z",
                                                                          },
                                                                          "tag": "path",
                                                                        },
                                                                      ],
                                                                      "tag": "svg",
                                                                    },
                                                                    "name": "calendar",
                                                                    "theme": "outlined",
                                                                  }
                                                                }
                                                              >
                                                                <svg
                                                                  aria-hidden="true"
                                                                  className=""
                                                                  data-icon="calendar"
                                                                  fill="currentColor"
                                                                  focusable="false"
                                                                  height="1em"
                                                                  key="svg-calendar"
                                                                  viewBox="64 64 896 896"
                                                                  width="1em"
                                                                >
                                                                  <path
                                                                    d="M880 184H712v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H384v-64c0-4.4-3.6-8-8-8h-56c-4.4 0-8 3.6-8 8v64H144c-17.7 0-32 14.3-32 32v664c0 17.7 14.3 32 32 32h736c17.7 0 32-14.3 32-32V216c0-17.7-14.3-32-32-32zm-40 656H184V460h656v380zM184 392V256h128v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h256v48c0 4.4 3.6 8 8 8h56c4.4 0 8-3.6 8-8v-48h128v136H184z"
                                                                    key="svg-calendar-svg-0"
                                                                  />
                                                                </svg>
                                                              </IconReact>
                                                            </span>
                                                          </AntdIcon>
                                                        </ForwardRef(CalendarOutlined)>
                                                      </span>
                                                    </div>
                                                  </div>
                                                </Trigger>
                                              </PickerTrigger>
                                            </InnerPicker>
                                          </Picker>
                                        </LocaleReceiver>
                                      </Picker>
                                    </Component>
                                  </div>
                                </div>
                                <ErrorList
                                  errors={Array []}
                                  onDomErrorVisibleChange={[Function]}
                                >
                                  <CSSMotion
                                    motionAppear={true}
                                    motionDeadline={500}
                                    motionName="show-help"
                                    onLeaveEnd={[Function]}
                                    removeOnLeave={true}
                                    visible={false}
                                  >
                                    <DomWrapper />
                                  </CSSMotion>
                                </ErrorList>
                              </div>
                            </Col>
                          </FormItemInput>
                        </div>
                      </Row>
                    </Field>
                  </WrapperField>
                </FormItem>
                <FormItem
                  label="Claim Sources"
                >
                  <Row
                    className="ant-form-item"
                    key="row"
                  >
                    <div
                      className="ant-row ant-form-item"
                      style={Object {}}
                    >
                      <FormItemLabel
                        label="Claim Sources"
                        prefixCls="ant-form"
                        requiredMark={true}
                      >
                        <Col
                          className="ant-form-item-label"
                          offset={2}
                          span={8}
                        >
                          <div
                            className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                            style={Object {}}
                          >
                            <label
                              className=""
                              title="Claim Sources"
                            >
                              Claim Sources
                            </label>
                          </div>
                        </Col>
                      </FormItemLabel>
                      <FormItemInput
                        errors={Array []}
                        label="Claim Sources"
                        onDomErrorVisibleChange={[Function]}
                        prefixCls="ant-form"
                        status=""
                        validateStatus=""
                      >
                        <Col
                          className="ant-form-item-control"
                          offset={2}
                          span={20}
                        >
                          <div
                            className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                            style={Object {}}
                          >
                            <div
                              className="ant-form-item-control-input"
                            >
                              <div
                                className="ant-form-item-control-input-content"
                              >
                                <FormList
                                  label="Claim sources"
                                  name="claim_sources"
                                >
                                  <List
                                    label="Claim sources"
                                    name="claim_sources"
                                  >
                                    <WrapperField
                                      name={Array []}
                                      shouldUpdate={[Function]}
                                    >
                                      <Field
                                        fieldContext={
                                          Object {
                                            "__INTERNAL__": Object {
                                              "itemRef": [Function],
                                              "name": "create-claim",
                                            },
                                            "getFieldError": [Function],
                                            "getFieldInstance": [Function],
                                            "getFieldValue": [Function],
                                            "getFieldsError": [Function],
                                            "getFieldsValue": [Function],
                                            "getInternalHooks": [Function],
                                            "isFieldTouched": [Function],
                                            "isFieldValidating": [Function],
                                            "isFieldsTouched": [Function],
                                            "isFieldsValidating": [Function],
                                            "prefixName": Array [
                                              "claim_sources",
                                            ],
                                            "resetFields": [Function],
                                            "scrollToField": [Function],
                                            "setFields": [Function],
                                            "setFieldsValue": [Function],
                                            "submit": [Function],
                                            "validateFields": [Function],
                                            "validateTrigger": "onChange",
                                          }
                                        }
                                        key="_"
                                        name={Array []}
                                        shouldUpdate={[Function]}
                                        trigger="onChange"
                                        valuePropName="value"
                                      >
                                        <FormItem>
                                          <Row
                                            className="ant-form-item"
                                            key="row"
                                          >
                                            <div
                                              className="ant-row ant-form-item"
                                              style={Object {}}
                                            >
                                              <FormItemLabel
                                                prefixCls="ant-form"
                                                requiredMark={true}
                                              />
                                              <FormItemInput
                                                errors={Array []}
                                                onDomErrorVisibleChange={[Function]}
                                                prefixCls="ant-form"
                                                status=""
                                                validateStatus=""
                                              >
                                                <Col
                                                  className="ant-form-item-control"
                                                >
                                                  <div
                                                    className="ant-col ant-form-item-control"
                                                    style={Object {}}
                                                  >
                                                    <div
                                                      className="ant-form-item-control-input"
                                                    >
                                                      <div
                                                        className="ant-form-item-control-input-content"
                                                      >
                                                        <Button
                                                          block={true}
                                                          ghost={false}
                                                          htmlType="button"
                                                          icon={<ForwardRef(PlusOutlined) />}
                                                          loading={false}
                                                          onClick={[Function]}
                                                          type="dashed"
                                                        >
                                                          <Wave>
                                                            <button
                                                              className="ant-btn ant-btn-dashed ant-btn-block"
                                                              onClick={[Function]}
                                                              type="button"
                                                            >
                                                              <ForwardRef(PlusOutlined)>
                                                                <AntdIcon
                                                                  icon={
                                                                    Object {
                                                                      "icon": Object {
                                                                        "attrs": Object {
                                                                          "focusable": "false",
                                                                          "viewBox": "64 64 896 896",
                                                                        },
                                                                        "children": Array [
                                                                          Object {
                                                                            "attrs": Object {},
                                                                            "children": Array [
                                                                              Object {
                                                                                "attrs": Object {},
                                                                                "tag": "style",
                                                                              },
                                                                            ],
                                                                            "tag": "defs",
                                                                          },
                                                                          Object {
                                                                            "attrs": Object {
                                                                              "d": "M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z",
                                                                            },
                                                                            "tag": "path",
                                                                          },
                                                                          Object {
                                                                            "attrs": Object {
                                                                              "d": "M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z",
                                                                            },
                                                                            "tag": "path",
                                                                          },
                                                                        ],
                                                                        "tag": "svg",
                                                                      },
                                                                      "name": "plus",
                                                                      "theme": "outlined",
                                                                    }
                                                                  }
                                                                >
                                                                  <span
                                                                    aria-label="plus"
                                                                    className="anticon anticon-plus"
                                                                    role="img"
                                                                  >
                                                                    <IconReact
                                                                      className=""
                                                                      icon={
                                                                        Object {
                                                                          "icon": Object {
                                                                            "attrs": Object {
                                                                              "focusable": "false",
                                                                              "viewBox": "64 64 896 896",
                                                                            },
                                                                            "children": Array [
                                                                              Object {
                                                                                "attrs": Object {},
                                                                                "children": Array [
                                                                                  Object {
                                                                                    "attrs": Object {},
                                                                                    "tag": "style",
                                                                                  },
                                                                                ],
                                                                                "tag": "defs",
                                                                              },
                                                                              Object {
                                                                                "attrs": Object {
                                                                                  "d": "M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z",
                                                                                },
                                                                                "tag": "path",
                                                                              },
                                                                              Object {
                                                                                "attrs": Object {
                                                                                  "d": "M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z",
                                                                                },
                                                                                "tag": "path",
                                                                              },
                                                                            ],
                                                                            "tag": "svg",
                                                                          },
                                                                          "name": "plus",
                                                                          "theme": "outlined",
                                                                        }
                                                                      }
                                                                    >
                                                                      <svg
                                                                        aria-hidden="true"
                                                                        className=""
                                                                        data-icon="plus"
                                                                        fill="currentColor"
                                                                        focusable="false"
                                                                        height="1em"
                                                                        key="svg-plus"
                                                                        viewBox="64 64 896 896"
                                                                        width="1em"
                                                                      >
                                                                        <defs
                                                                          key="svg-plus-svg-0"
                                                                        >
                                                                          <style
                                                                            key="svg-plus-svg-0-defs-0"
                                                                          />
                                                                        </defs>
                                                                        <path
                                                                          d="M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z"
                                                                          key="svg-plus-svg-1"
                                                                        />
                                                                        <path
                                                                          d="M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z"
                                                                          key="svg-plus-svg-2"
                                                                        />
                                                                      </svg>
                                                                    </IconReact>
                                                                  </span>
                                                                </AntdIcon>
                                                              </ForwardRef(PlusOutlined)>
                                                              <span
                                                                key=".0"
                                                              >
                                                                Add Claim sources
                                                              </span>
                                                            </button>
                                                          </Wave>
                                                        </Button>
                                                      </div>
                                                    </div>
                                                    <ErrorList
                                                      errors={Array []}
                                                      onDomErrorVisibleChange={[Function]}
                                                    >
                                                      <CSSMotion
                                                        motionAppear={true}
                                                        motionDeadline={500}
                                                        motionName="show-help"
                                                        onLeaveEnd={[Function]}
                                                        removeOnLeave={true}
                                                        visible={false}
                                                      >
                                                        <DomWrapper />
                                                      </CSSMotion>
                                                    </ErrorList>
                                                  </div>
                                                </Col>
                                              </FormItemInput>
                                            </div>
                                          </Row>
                                        </FormItem>
                                      </Field>
                                    </WrapperField>
                                  </List>
                                </FormList>
                              </div>
                            </div>
                            <ErrorList
                              errors={Array []}
                              onDomErrorVisibleChange={[Function]}
                            >
                              <CSSMotion
                                motionAppear={true}
                                motionDeadline={500}
                                motionName="show-help"
                                onLeaveEnd={[Function]}
                                removeOnLeave={true}
                                visible={false}
                              >
                                <DomWrapper />
                              </CSSMotion>
                            </ErrorList>
                          </div>
                        </Col>
                      </FormItemInput>
                    </div>
                  </Row>
                </FormItem>
                <FormItem
                  label="Review Sources"
                >
                  <Row
                    className="ant-form-item"
                    key="row"
                  >
                    <div
                      className="ant-row ant-form-item"
                      style={Object {}}
                    >
                      <FormItemLabel
                        label="Review Sources"
                        prefixCls="ant-form"
                        requiredMark={true}
                      >
                        <Col
                          className="ant-form-item-label"
                          offset={2}
                          span={8}
                        >
                          <div
                            className="ant-col ant-col-8 ant-col-offset-2 ant-form-item-label"
                            style={Object {}}
                          >
                            <label
                              className=""
                              title="Review Sources"
                            >
                              Review Sources
                            </label>
                          </div>
                        </Col>
                      </FormItemLabel>
                      <FormItemInput
                        errors={Array []}
                        label="Review Sources"
                        onDomErrorVisibleChange={[Function]}
                        prefixCls="ant-form"
                        status=""
                        validateStatus=""
                      >
                        <Col
                          className="ant-form-item-control"
                          offset={2}
                          span={20}
                        >
                          <div
                            className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                            style={Object {}}
                          >
                            <div
                              className="ant-form-item-control-input"
                            >
                              <div
                                className="ant-form-item-control-input-content"
                              >
                                <FormList
                                  label="Review sources"
                                  name="review_sources"
                                >
                                  <List
                                    label="Review sources"
                                    name="review_sources"
                                  >
                                    <WrapperField
                                      name={Array []}
                                      shouldUpdate={[Function]}
                                    >
                                      <Field
                                        fieldContext={
                                          Object {
                                            "__INTERNAL__": Object {
                                              "itemRef": [Function],
                                              "name": "create-claim",
                                            },
                                            "getFieldError": [Function],
                                            "getFieldInstance": [Function],
                                            "getFieldValue": [Function],
                                            "getFieldsError": [Function],
                                            "getFieldsValue": [Function],
                                            "getInternalHooks": [Function],
                                            "isFieldTouched": [Function],
                                            "isFieldValidating": [Function],
                                            "isFieldsTouched": [Function],
                                            "isFieldsValidating": [Function],
                                            "prefixName": Array [
                                              "review_sources",
                                            ],
                                            "resetFields": [Function],
                                            "scrollToField": [Function],
                                            "setFields": [Function],
                                            "setFieldsValue": [Function],
                                            "submit": [Function],
                                            "validateFields": [Function],
                                            "validateTrigger": "onChange",
                                          }
                                        }
                                        key="_"
                                        name={Array []}
                                        shouldUpdate={[Function]}
                                        trigger="onChange"
                                        valuePropName="value"
                                      >
                                        <FormItem>
                                          <Row
                                            className="ant-form-item"
                                            key="row"
                                          >
                                            <div
                                              className="ant-row ant-form-item"
                                              style={Object {}}
                                            >
                                              <FormItemLabel
                                                prefixCls="ant-form"
                                                requiredMark={true}
                                              />
                                              <FormItemInput
                                                errors={Array []}
                                                onDomErrorVisibleChange={[Function]}
                                                prefixCls="ant-form"
                                                status=""
                                                validateStatus=""
                                              >
                                                <Col
                                                  className="ant-form-item-control"
                                                >
                                                  <div
                                                    className="ant-col ant-form-item-control"
                                                    style={Object {}}
                                                  >
                                                    <div
                                                      className="ant-form-item-control-input"
                                                    >
                                                      <div
                                                        className="ant-form-item-control-input-content"
                                                      >
                                                        <Button
                                                          block={true}
                                                          ghost={false}
                                                          htmlType="button"
                                                          icon={<ForwardRef(PlusOutlined) />}
                                                          loading={false}
                                                          onClick={[Function]}
                                                          type="dashed"
                                                        >
                                                          <Wave>
                                                            <button
                                                              className="ant-btn ant-btn-dashed ant-btn-block"
                                                              onClick={[Function]}
                                                              type="button"
                                                            >
                                                              <ForwardRef(PlusOutlined)>
                                                                <AntdIcon
                                                                  icon={
                                                                    Object {
                                                                      "icon": Object {
                                                                        "attrs": Object {
                                                                          "focusable": "false",
                                                                          "viewBox": "64 64 896 896",
                                                                        },
                                                                        "children": Array [
                                                                          Object {
                                                                            "attrs": Object {},
                                                                            "children": Array [
                                                                              Object {
                                                                                "attrs": Object {},
                                                                                "tag": "style",
                                                                              },
                                                                            ],
                                                                            "tag": "defs",
                                                                          },
                                                                          Object {
                                                                            "attrs": Object {
                                                                              "d": "M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z",
                                                                            },
                                                                            "tag": "path",
                                                                          },
                                                                          Object {
                                                                            "attrs": Object {
                                                                              "d": "M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z",
                                                                            },
                                                                            "tag": "path",
                                                                          },
                                                                        ],
                                                                        "tag": "svg",
                                                                      },
                                                                      "name": "plus",
                                                                      "theme": "outlined",
                                                                    }
                                                                  }
                                                                >
                                                                  <span
                                                                    aria-label="plus"
                                                                    className="anticon anticon-plus"
                                                                    role="img"
                                                                  >
                                                                    <IconReact
                                                                      className=""
                                                                      icon={
                                                                        Object {
                                                                          "icon": Object {
                                                                            "attrs": Object {
                                                                              "focusable": "false",
                                                                              "viewBox": "64 64 896 896",
                                                                            },
                                                                            "children": Array [
                                                                              Object {
                                                                                "attrs": Object {},
                                                                                "children": Array [
                                                                                  Object {
                                                                                    "attrs": Object {},
                                                                                    "tag": "style",
                                                                                  },
                                                                                ],
                                                                                "tag": "defs",
                                                                              },
                                                                              Object {
                                                                                "attrs": Object {
                                                                                  "d": "M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z",
                                                                                },
                                                                                "tag": "path",
                                                                              },
                                                                              Object {
                                                                                "attrs": Object {
                                                                                  "d": "M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z",
                                                                                },
                                                                                "tag": "path",
                                                                              },
                                                                            ],
                                                                            "tag": "svg",
                                                                          },
                                                                          "name": "plus",
                                                                          "theme": "outlined",
                                                                        }
                                                                      }
                                                                    >
                                                                      <svg
                                                                        aria-hidden="true"
                                                                        className=""
                                                                        data-icon="plus"
                                                                        fill="currentColor"
                                                                        focusable="false"
                                                                        height="1em"
                                                                        key="svg-plus"
                                                                        viewBox="64 64 896 896"
                                                                        width="1em"
                                                                      >
                                                                        <defs
                                                                          key="svg-plus-svg-0"
                                                                        >
                                                                          <style
                                                                            key="svg-plus-svg-0-defs-0"
                                                                          />
                                                                        </defs>
                                                                        <path
                                                                          d="M482 152h60q8 0 8 8v704q0 8-8 8h-60q-8 0-8-8V160q0-8 8-8z"
                                                                          key="svg-plus-svg-1"
                                                                        />
                                                                        <path
                                                                          d="M176 474h672q8 0 8 8v60q0 8-8 8H176q-8 0-8-8v-60q0-8 8-8z"
                                                                          key="svg-plus-svg-2"
                                                                        />
                                                                      </svg>
                                                                    </IconReact>
                                                                  </span>
                                                                </AntdIcon>
                                                              </ForwardRef(PlusOutlined)>
                                                              <span
                                                                key=".0"
                                                              >
                                                                Add Review sources
                                                              </span>
                                                            </button>
                                                          </Wave>
                                                        </Button>
                                                      </div>
                                                    </div>
                                                    <ErrorList
                                                      errors={Array []}
                                                      onDomErrorVisibleChange={[Function]}
                                                    >
                                                      <CSSMotion
                                                        motionAppear={true}
                                                        motionDeadline={500}
                                                        motionName="show-help"
                                                        onLeaveEnd={[Function]}
                                                        removeOnLeave={true}
                                                        visible={false}
                                                      >
                                                        <DomWrapper />
                                                      </CSSMotion>
                                                    </ErrorList>
                                                  </div>
                                                </Col>
                                              </FormItemInput>
                                            </div>
                                          </Row>
                                        </FormItem>
                                      </Field>
                                    </WrapperField>
                                  </List>
                                </FormList>
                              </div>
                            </div>
                            <ErrorList
                              errors={Array []}
                              onDomErrorVisibleChange={[Function]}
                            >
                              <CSSMotion
                                motionAppear={true}
                                motionDeadline={500}
                                motionName="show-help"
                                onLeaveEnd={[Function]}
                                removeOnLeave={true}
                                visible={false}
                              >
                                <DomWrapper />
                              </CSSMotion>
                            </ErrorList>
                          </div>
                        </Col>
                      </FormItemInput>
                    </div>
                  </Row>
                </FormItem>
              </div>
              <FormItem>
                <Row
                  className="ant-form-item"
                  key="row"
                >
                  <div
                    className="ant-row ant-form-item"
                    style={Object {}}
                  >
                    <FormItemLabel
                      prefixCls="ant-form"
                      requiredMark={true}
                    />
                    <FormItemInput
                      errors={Array []}
                      onDomErrorVisibleChange={[Function]}
                      prefixCls="ant-form"
                      status=""
                      validateStatus=""
                    >
                      <Col
                        className="ant-form-item-control"
                        offset={2}
                        span={20}
                      >
                        <div
                          className="ant-col ant-col-20 ant-col-offset-2 ant-form-item-control"
                          style={Object {}}
                        >
                          <div
                            className="ant-form-item-control-input"
                          >
                            <div
                              className="ant-form-item-control-input-content"
                            >
                              <Button
                                block={false}
                                disabled={true}
                                ghost={false}
                                htmlType="button"
                                loading={false}
                                onClick={[Function]}
                              >
                                <Wave>
                                  <button
                                    className="ant-btn"
                                    disabled={true}
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <LoadingIcon
                                      existIcon={false}
                                      loading={false}
                                      prefixCls="ant-btn"
                                    >
                                      <CSSMotion
                                        motionName="ant-btn-loading-icon-motion"
                                        onAppearActive={[Function]}
                                        onAppearStart={[Function]}
                                        onEnterActive={[Function]}
                                        onEnterStart={[Function]}
                                        onLeaveActive={[Function]}
                                        onLeaveStart={[Function]}
                                        removeOnLeave={true}
                                        visible={false}
                                      >
                                        <DomWrapper />
                                      </CSSMotion>
                                    </LoadingIcon>
                                    <span
                                      key=".0"
                                    >
                                      Back
                                    </span>
                                  </button>
                                </Wave>
                              </Button>
                              <Button
                                block={false}
                                ghost={false}
                                htmlType="button"
                                loading={false}
                                onClick={[Function]}
                              >
                                <Wave>
                                  <button
                                    className="ant-btn"
                                    onClick={[Function]}
                                    type="button"
                                  >
                                    <LoadingIcon
                                      existIcon={false}
                                      loading={false}
                                      prefixCls="ant-btn"
                                    >
                                      <CSSMotion
                                        motionName="ant-btn-loading-icon-motion"
                                        onAppearActive={[Function]}
                                        onAppearStart={[Function]}
                                        onEnterActive={[Function]}
                                        onEnterStart={[Function]}
                                        onLeaveActive={[Function]}
                                        onLeaveStart={[Function]}
                                        removeOnLeave={true}
                                        visible={false}
                                      >
                                        <DomWrapper />
                                      </CSSMotion>
                                    </LoadingIcon>
                                    <span
                                      key=".0"
                                    >
                                      Next
                                    </span>
                                  </button>
                                </Wave>
                              </Button>
                            </div>
                          </div>
                          <ErrorList
                            errors={Array []}
                            onDomErrorVisibleChange={[Function]}
                          >
                            <CSSMotion
                              motionAppear={true}
                              motionDeadline={500}
                              motionName="show-help"
                              onLeaveEnd={[Function]}
                              removeOnLeave={true}
                              visible={false}
                            >
                              <DomWrapper />
                            </CSSMotion>
                          </ErrorList>
                        </div>
                      </Col>
                    </FormItemInput>
                  </div>
                </Row>
              </FormItem>
            </form>
          </ForwardRef(Form)>
        </SizeContextProvider>
      </ForwardRef(InternalForm)>
    </div>
  </ClaimForm>
</Provider>
`;
