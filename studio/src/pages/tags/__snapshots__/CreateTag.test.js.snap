// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`Tags create component snapshot testing should render the component 1`] = `
<Provider
  store={
    Object {
      "clearActions": [Function],
      "dispatch": [MockFunction],
      "getActions": [Function],
      "getState": [Function],
      "replaceReducer": [Function],
      "subscribe": [Function],
    }
  }
>
  <CreateTag>
    <TagForm
      onCreate={[Function]}
    >
      <ForwardRef(InternalForm)
        form={
          Object {
            "__INTERNAL__": Object {
              "itemRef": [Function],
              "name": "create-tag",
            },
            "getFieldError": [Function],
            "getFieldInstance": [Function],
            "getFieldValue": [Function],
            "getFieldsError": [Function],
            "getFieldsValue": [Function],
            "getInternalHooks": [Function],
            "isFieldTouched": [Function],
            "isFieldValidating": [Function],
            "isFieldsTouched": [Function],
            "isFieldsValidating": [Function],
            "resetFields": [Function],
            "scrollToField": [Function],
            "setFields": [Function],
            "setFieldsValue": [Function],
            "submit": [Function],
            "validateFields": [Function],
          }
        }
        initialValues={Object {}}
        labelCol={
          Object {
            "span": 10,
          }
        }
        name="create-tag"
        onFinish={[Function]}
        onValuesChange={[Function]}
        wrapperCol={
          Object {
            "span": 8,
          }
        }
      >
        <SizeContextProvider>
          <ForwardRef(Form)
            className="ant-form ant-form-horizontal"
            form={
              Object {
                "__INTERNAL__": Object {
                  "itemRef": [Function],
                  "name": "create-tag",
                },
                "getFieldError": [Function],
                "getFieldInstance": [Function],
                "getFieldValue": [Function],
                "getFieldsError": [Function],
                "getFieldsValue": [Function],
                "getInternalHooks": [Function],
                "isFieldTouched": [Function],
                "isFieldValidating": [Function],
                "isFieldsTouched": [Function],
                "isFieldsValidating": [Function],
                "resetFields": [Function],
                "scrollToField": [Function],
                "setFields": [Function],
                "setFieldsValue": [Function],
                "submit": [Function],
                "validateFields": [Function],
              }
            }
            id="create-tag"
            initialValues={Object {}}
            name="create-tag"
            onFinish={[Function]}
            onFinishFailed={[Function]}
            onValuesChange={[Function]}
          >
            <form
              className="ant-form ant-form-horizontal"
              id="create-tag"
              onSubmit={[Function]}
            >
              <FormItem
                label="Tag"
                name="name"
                rules={
                  Array [
                    Object {
                      "message": "Please enter tag name!",
                      "required": true,
                    },
                    Object {
                      "message": "Name must be minimum 3 characters.",
                      "min": 3,
                    },
                    Object {
                      "max": 50,
                      "message": "Name must be maximum 50 characters.",
                    },
                  ]
                }
              >
                <WrapperField
                  label="Tag"
                  messageVariables={
                    Object {
                      "label": "Tag",
                    }
                  }
                  name="name"
                  onReset={[Function]}
                  rules={
                    Array [
                      Object {
                        "message": "Please enter tag name!",
                        "required": true,
                      },
                      Object {
                        "message": "Name must be minimum 3 characters.",
                        "min": 3,
                      },
                      Object {
                        "max": 50,
                        "message": "Name must be maximum 50 characters.",
                      },
                    ]
                  }
                  trigger="onChange"
                  validateTrigger="onChange"
                >
                  <Field
                    fieldContext={
                      Object {
                        "__INTERNAL__": Object {
                          "itemRef": [Function],
                          "name": "create-tag",
                        },
                        "getFieldError": [Function],
                        "getFieldInstance": [Function],
                        "getFieldValue": [Function],
                        "getFieldsError": [Function],
                        "getFieldsValue": [Function],
                        "getInternalHooks": [Function],
                        "isFieldTouched": [Function],
                        "isFieldValidating": [Function],
                        "isFieldsTouched": [Function],
                        "isFieldsValidating": [Function],
                        "resetFields": [Function],
                        "scrollToField": [Function],
                        "setFields": [Function],
                        "setFieldsValue": [Function],
                        "submit": [Function],
                        "validateFields": [Function],
                        "validateTrigger": "onChange",
                      }
                    }
                    key="_name"
                    label="Tag"
                    messageVariables={
                      Object {
                        "label": "Tag",
                      }
                    }
                    name={
                      Array [
                        "name",
                      ]
                    }
                    onReset={[Function]}
                    rules={
                      Array [
                        Object {
                          "message": "Please enter tag name!",
                          "required": true,
                        },
                        Object {
                          "message": "Name must be minimum 3 characters.",
                          "min": 3,
                        },
                        Object {
                          "max": 50,
                          "message": "Name must be maximum 50 characters.",
                        },
                      ]
                    }
                    trigger="onChange"
                    validateTrigger="onChange"
                    valuePropName="value"
                  >
                    <Row
                      className="ant-form-item"
                      key="row"
                    >
                      <div
                        className="ant-row ant-form-item"
                        style={Object {}}
                      >
                        <FormItemLabel
                          htmlFor="create-tag_name"
                          label="Tag"
                          name="name"
                          prefixCls="ant-form"
                          required={true}
                          requiredMark={true}
                          rules={
                            Array [
                              Object {
                                "message": "Please enter tag name!",
                                "required": true,
                              },
                              Object {
                                "message": "Name must be minimum 3 characters.",
                                "min": 3,
                              },
                              Object {
                                "max": 50,
                                "message": "Name must be maximum 50 characters.",
                              },
                            ]
                          }
                        >
                          <Col
                            className="ant-form-item-label"
                            span={10}
                          >
                            <div
                              className="ant-col ant-col-10 ant-form-item-label"
                              style={Object {}}
                            >
                              <label
                                className="ant-form-item-required"
                                htmlFor="create-tag_name"
                                title="Tag"
                              >
                                Tag
                              </label>
                            </div>
                          </Col>
                        </FormItemLabel>
                        <FormItemInput
                          errors={Array []}
                          label="Tag"
                          name={
                            Array [
                              "name",
                            ]
                          }
                          onDomErrorVisibleChange={[Function]}
                          prefixCls="ant-form"
                          rules={
                            Array [
                              Object {
                                "message": "Please enter tag name!",
                                "required": true,
                              },
                              Object {
                                "message": "Name must be minimum 3 characters.",
                                "min": 3,
                              },
                              Object {
                                "max": 50,
                                "message": "Name must be maximum 50 characters.",
                              },
                            ]
                          }
                          status=""
                          touched={false}
                          validateStatus=""
                          validating={false}
                        >
                          <Col
                            className="ant-form-item-control"
                            span={8}
                          >
                            <div
                              className="ant-col ant-col-8 ant-form-item-control"
                              style={Object {}}
                            >
                              <div
                                className="ant-form-item-control-input"
                              >
                                <div
                                  className="ant-form-item-control-input-content"
                                >
                                  <Component
                                    update={1}
                                  >
                                    <Input
                                      id="create-tag_name"
                                      onChange={[Function]}
                                      type="text"
                                    >
                                      <ClearableLabeledInput
                                        bordered={true}
                                        element={
                                          <input
                                            className="ant-input"
                                            id="create-tag_name"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            onKeyDown={[Function]}
                                            type="text"
                                          />
                                        }
                                        focused={false}
                                        handleReset={[Function]}
                                        id="create-tag_name"
                                        inputType="input"
                                        onChange={[Function]}
                                        prefixCls="ant-input"
                                        triggerFocus={[Function]}
                                        type="text"
                                        value=""
                                      >
                                        <input
                                          className="ant-input"
                                          id="create-tag_name"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          onKeyDown={[Function]}
                                          type="text"
                                          value=""
                                        />
                                      </ClearableLabeledInput>
                                    </Input>
                                  </Component>
                                </div>
                              </div>
                              <ErrorList
                                errors={Array []}
                                onDomErrorVisibleChange={[Function]}
                              >
                                <CSSMotion
                                  motionAppear={true}
                                  motionDeadline={500}
                                  motionName="show-help"
                                  onLeaveEnd={[Function]}
                                  removeOnLeave={true}
                                  visible={false}
                                >
                                  <DomWrapper />
                                </CSSMotion>
                              </ErrorList>
                            </div>
                          </Col>
                        </FormItemInput>
                      </div>
                    </Row>
                  </Field>
                </WrapperField>
              </FormItem>
              <FormItem
                label="Slug"
                name="slug"
                rules={
                  Array [
                    Object {
                      "message": "Please input the slug!",
                      "required": true,
                    },
                    Object {
                      "message": "Please enter valid slug!",
                      "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                    },
                  ]
                }
              >
                <WrapperField
                  label="Slug"
                  messageVariables={
                    Object {
                      "label": "Slug",
                    }
                  }
                  name="slug"
                  onReset={[Function]}
                  rules={
                    Array [
                      Object {
                        "message": "Please input the slug!",
                        "required": true,
                      },
                      Object {
                        "message": "Please enter valid slug!",
                        "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                      },
                    ]
                  }
                  trigger="onChange"
                  validateTrigger="onChange"
                >
                  <Field
                    fieldContext={
                      Object {
                        "__INTERNAL__": Object {
                          "itemRef": [Function],
                          "name": "create-tag",
                        },
                        "getFieldError": [Function],
                        "getFieldInstance": [Function],
                        "getFieldValue": [Function],
                        "getFieldsError": [Function],
                        "getFieldsValue": [Function],
                        "getInternalHooks": [Function],
                        "isFieldTouched": [Function],
                        "isFieldValidating": [Function],
                        "isFieldsTouched": [Function],
                        "isFieldsValidating": [Function],
                        "resetFields": [Function],
                        "scrollToField": [Function],
                        "setFields": [Function],
                        "setFieldsValue": [Function],
                        "submit": [Function],
                        "validateFields": [Function],
                        "validateTrigger": "onChange",
                      }
                    }
                    key="_slug"
                    label="Slug"
                    messageVariables={
                      Object {
                        "label": "Slug",
                      }
                    }
                    name={
                      Array [
                        "slug",
                      ]
                    }
                    onReset={[Function]}
                    rules={
                      Array [
                        Object {
                          "message": "Please input the slug!",
                          "required": true,
                        },
                        Object {
                          "message": "Please enter valid slug!",
                          "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                        },
                      ]
                    }
                    trigger="onChange"
                    validateTrigger="onChange"
                    valuePropName="value"
                  >
                    <Row
                      className="ant-form-item"
                      key="row"
                    >
                      <div
                        className="ant-row ant-form-item"
                        style={Object {}}
                      >
                        <FormItemLabel
                          htmlFor="create-tag_slug"
                          label="Slug"
                          name="slug"
                          prefixCls="ant-form"
                          required={true}
                          requiredMark={true}
                          rules={
                            Array [
                              Object {
                                "message": "Please input the slug!",
                                "required": true,
                              },
                              Object {
                                "message": "Please enter valid slug!",
                                "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                              },
                            ]
                          }
                        >
                          <Col
                            className="ant-form-item-label"
                            span={10}
                          >
                            <div
                              className="ant-col ant-col-10 ant-form-item-label"
                              style={Object {}}
                            >
                              <label
                                className="ant-form-item-required"
                                htmlFor="create-tag_slug"
                                title="Slug"
                              >
                                Slug
                              </label>
                            </div>
                          </Col>
                        </FormItemLabel>
                        <FormItemInput
                          errors={Array []}
                          label="Slug"
                          name={
                            Array [
                              "slug",
                            ]
                          }
                          onDomErrorVisibleChange={[Function]}
                          prefixCls="ant-form"
                          rules={
                            Array [
                              Object {
                                "message": "Please input the slug!",
                                "required": true,
                              },
                              Object {
                                "message": "Please enter valid slug!",
                                "pattern": /\\^\\[a-z0-9\\]\\+\\(\\?:-\\[a-z0-9\\]\\+\\)\\*\\$/,
                              },
                            ]
                          }
                          status=""
                          touched={false}
                          validateStatus=""
                          validating={false}
                        >
                          <Col
                            className="ant-form-item-control"
                            span={8}
                          >
                            <div
                              className="ant-col ant-col-8 ant-form-item-control"
                              style={Object {}}
                            >
                              <div
                                className="ant-form-item-control-input"
                              >
                                <div
                                  className="ant-form-item-control-input-content"
                                >
                                  <Component
                                    update={1}
                                  >
                                    <Input
                                      id="create-tag_slug"
                                      onChange={[Function]}
                                      type="text"
                                    >
                                      <ClearableLabeledInput
                                        bordered={true}
                                        element={
                                          <input
                                            className="ant-input"
                                            id="create-tag_slug"
                                            onBlur={[Function]}
                                            onChange={[Function]}
                                            onFocus={[Function]}
                                            onKeyDown={[Function]}
                                            type="text"
                                          />
                                        }
                                        focused={false}
                                        handleReset={[Function]}
                                        id="create-tag_slug"
                                        inputType="input"
                                        onChange={[Function]}
                                        prefixCls="ant-input"
                                        triggerFocus={[Function]}
                                        type="text"
                                        value=""
                                      >
                                        <input
                                          className="ant-input"
                                          id="create-tag_slug"
                                          onBlur={[Function]}
                                          onChange={[Function]}
                                          onFocus={[Function]}
                                          onKeyDown={[Function]}
                                          type="text"
                                          value=""
                                        />
                                      </ClearableLabeledInput>
                                    </Input>
                                  </Component>
                                </div>
                              </div>
                              <ErrorList
                                errors={Array []}
                                onDomErrorVisibleChange={[Function]}
                              >
                                <CSSMotion
                                  motionAppear={true}
                                  motionDeadline={500}
                                  motionName="show-help"
                                  onLeaveEnd={[Function]}
                                  removeOnLeave={true}
                                  visible={false}
                                >
                                  <DomWrapper />
                                </CSSMotion>
                              </ErrorList>
                            </div>
                          </Col>
                        </FormItemInput>
                      </div>
                    </Row>
                  </Field>
                </WrapperField>
              </FormItem>
              <FormItem
                label="Featured"
                name="is_featured"
                valuePropName="checked"
              >
                <WrapperField
                  label="Featured"
                  messageVariables={
                    Object {
                      "label": "Featured",
                    }
                  }
                  name="is_featured"
                  onReset={[Function]}
                  trigger="onChange"
                  validateTrigger="onChange"
                  valuePropName="checked"
                >
                  <Field
                    fieldContext={
                      Object {
                        "__INTERNAL__": Object {
                          "itemRef": [Function],
                          "name": "create-tag",
                        },
                        "getFieldError": [Function],
                        "getFieldInstance": [Function],
                        "getFieldValue": [Function],
                        "getFieldsError": [Function],
                        "getFieldsValue": [Function],
                        "getInternalHooks": [Function],
                        "isFieldTouched": [Function],
                        "isFieldValidating": [Function],
                        "isFieldsTouched": [Function],
                        "isFieldsValidating": [Function],
                        "resetFields": [Function],
                        "scrollToField": [Function],
                        "setFields": [Function],
                        "setFieldsValue": [Function],
                        "submit": [Function],
                        "validateFields": [Function],
                        "validateTrigger": "onChange",
                      }
                    }
                    key="_is_featured"
                    label="Featured"
                    messageVariables={
                      Object {
                        "label": "Featured",
                      }
                    }
                    name={
                      Array [
                        "is_featured",
                      ]
                    }
                    onReset={[Function]}
                    trigger="onChange"
                    validateTrigger="onChange"
                    valuePropName="checked"
                  >
                    <Row
                      className="ant-form-item"
                      key="row"
                    >
                      <div
                        className="ant-row ant-form-item"
                        style={Object {}}
                      >
                        <FormItemLabel
                          htmlFor="create-tag_is_featured"
                          label="Featured"
                          name="is_featured"
                          prefixCls="ant-form"
                          required={false}
                          requiredMark={true}
                          valuePropName="checked"
                        >
                          <Col
                            className="ant-form-item-label"
                            span={10}
                          >
                            <div
                              className="ant-col ant-col-10 ant-form-item-label"
                              style={Object {}}
                            >
                              <label
                                className=""
                                htmlFor="create-tag_is_featured"
                                title="Featured"
                              >
                                Featured
                              </label>
                            </div>
                          </Col>
                        </FormItemLabel>
                        <FormItemInput
                          errors={Array []}
                          label="Featured"
                          name={
                            Array [
                              "is_featured",
                            ]
                          }
                          onDomErrorVisibleChange={[Function]}
                          prefixCls="ant-form"
                          status=""
                          touched={false}
                          validateStatus=""
                          validating={false}
                          valuePropName="checked"
                        >
                          <Col
                            className="ant-form-item-control"
                            span={8}
                          >
                            <div
                              className="ant-col ant-col-8 ant-form-item-control"
                              style={Object {}}
                            >
                              <div
                                className="ant-form-item-control-input"
                              >
                                <div
                                  className="ant-form-item-control-input-content"
                                >
                                  <Component
                                    update={1}
                                  >
                                    <Switch
                                      id="create-tag_is_featured"
                                      onChange={[Function]}
                                    >
                                      <Wave
                                        insertExtraNode={true}
                                      >
                                        <Switch
                                          className=""
                                          id="create-tag_is_featured"
                                          loadingIcon={
                                            <div
                                              className="ant-switch-handle"
                                            />
                                          }
                                          onChange={[Function]}
                                          prefixCls="ant-switch"
                                        >
                                          <button
                                            aria-checked={false}
                                            className="ant-switch"
                                            id="create-tag_is_featured"
                                            onClick={[Function]}
                                            onKeyDown={[Function]}
                                            role="switch"
                                            type="button"
                                          >
                                            <div
                                              className="ant-switch-handle"
                                            />
                                            <span
                                              className="ant-switch-inner"
                                            />
                                          </button>
                                        </Switch>
                                      </Wave>
                                    </Switch>
                                  </Component>
                                </div>
                              </div>
                              <ErrorList
                                errors={Array []}
                                onDomErrorVisibleChange={[Function]}
                              >
                                <CSSMotion
                                  motionAppear={true}
                                  motionDeadline={500}
                                  motionName="show-help"
                                  onLeaveEnd={[Function]}
                                  removeOnLeave={true}
                                  visible={false}
                                >
                                  <DomWrapper />
                                </CSSMotion>
                              </ErrorList>
                            </div>
                          </Col>
                        </FormItemInput>
                      </div>
                    </Row>
                  </Field>
                </WrapperField>
              </FormItem>
              <FormItem
                label="Description"
                name="description"
              >
                <WrapperField
                  label="Description"
                  messageVariables={
                    Object {
                      "label": "Description",
                    }
                  }
                  name="description"
                  onReset={[Function]}
                  trigger="onChange"
                  validateTrigger="onChange"
                >
                  <Field
                    fieldContext={
                      Object {
                        "__INTERNAL__": Object {
                          "itemRef": [Function],
                          "name": "create-tag",
                        },
                        "getFieldError": [Function],
                        "getFieldInstance": [Function],
                        "getFieldValue": [Function],
                        "getFieldsError": [Function],
                        "getFieldsValue": [Function],
                        "getInternalHooks": [Function],
                        "isFieldTouched": [Function],
                        "isFieldValidating": [Function],
                        "isFieldsTouched": [Function],
                        "isFieldsValidating": [Function],
                        "resetFields": [Function],
                        "scrollToField": [Function],
                        "setFields": [Function],
                        "setFieldsValue": [Function],
                        "submit": [Function],
                        "validateFields": [Function],
                        "validateTrigger": "onChange",
                      }
                    }
                    key="_description"
                    label="Description"
                    messageVariables={
                      Object {
                        "label": "Description",
                      }
                    }
                    name={
                      Array [
                        "description",
                      ]
                    }
                    onReset={[Function]}
                    trigger="onChange"
                    validateTrigger="onChange"
                    valuePropName="value"
                  >
                    <Row
                      className="ant-form-item"
                      key="row"
                    >
                      <div
                        className="ant-row ant-form-item"
                        style={Object {}}
                      >
                        <FormItemLabel
                          htmlFor="create-tag_description"
                          label="Description"
                          name="description"
                          prefixCls="ant-form"
                          required={false}
                          requiredMark={true}
                        >
                          <Col
                            className="ant-form-item-label"
                            span={10}
                          >
                            <div
                              className="ant-col ant-col-10 ant-form-item-label"
                              style={Object {}}
                            >
                              <label
                                className=""
                                htmlFor="create-tag_description"
                                title="Description"
                              >
                                Description
                              </label>
                            </div>
                          </Col>
                        </FormItemLabel>
                        <FormItemInput
                          errors={Array []}
                          label="Description"
                          name={
                            Array [
                              "description",
                            ]
                          }
                          onDomErrorVisibleChange={[Function]}
                          prefixCls="ant-form"
                          status=""
                          touched={false}
                          validateStatus=""
                          validating={false}
                        >
                          <Col
                            className="ant-form-item-control"
                            span={8}
                          >
                            <div
                              className="ant-col ant-col-8 ant-form-item-control"
                              style={Object {}}
                            >
                              <div
                                className="ant-form-item-control-input"
                              >
                                <div
                                  className="ant-form-item-control-input-content"
                                >
                                  <Component
                                    update={1}
                                  >
                                    <Editor
                                      basic={true}
                                      id="create-tag_description"
                                      onChange={[Function]}
                                      placeholder="Enter Description..."
                                      style={
                                        Object {
                                          "width": "600px",
                                        }
                                      }
                                    >
                                      <div
                                        style={
                                          Object {
                                            "width": "600px",
                                          }
                                        }
                                      />
                                    </Editor>
                                  </Component>
                                </div>
                              </div>
                              <ErrorList
                                errors={Array []}
                                onDomErrorVisibleChange={[Function]}
                              >
                                <CSSMotion
                                  motionAppear={true}
                                  motionDeadline={500}
                                  motionName="show-help"
                                  onLeaveEnd={[Function]}
                                  removeOnLeave={true}
                                  visible={false}
                                >
                                  <DomWrapper />
                                </CSSMotion>
                              </ErrorList>
                            </div>
                          </Col>
                        </FormItemInput>
                      </div>
                    </Row>
                  </Field>
                </WrapperField>
              </FormItem>
              <FormItem
                label="Metafields"
                name="meta_fields"
              >
                <WrapperField
                  label="Metafields"
                  messageVariables={
                    Object {
                      "label": "Metafields",
                    }
                  }
                  name="meta_fields"
                  onReset={[Function]}
                  trigger="onChange"
                  validateTrigger="onChange"
                >
                  <Field
                    fieldContext={
                      Object {
                        "__INTERNAL__": Object {
                          "itemRef": [Function],
                          "name": "create-tag",
                        },
                        "getFieldError": [Function],
                        "getFieldInstance": [Function],
                        "getFieldValue": [Function],
                        "getFieldsError": [Function],
                        "getFieldsValue": [Function],
                        "getInternalHooks": [Function],
                        "isFieldTouched": [Function],
                        "isFieldValidating": [Function],
                        "isFieldsTouched": [Function],
                        "isFieldsValidating": [Function],
                        "resetFields": [Function],
                        "scrollToField": [Function],
                        "setFields": [Function],
                        "setFieldsValue": [Function],
                        "submit": [Function],
                        "validateFields": [Function],
                        "validateTrigger": "onChange",
                      }
                    }
                    key="_meta_fields"
                    label="Metafields"
                    messageVariables={
                      Object {
                        "label": "Metafields",
                      }
                    }
                    name={
                      Array [
                        "meta_fields",
                      ]
                    }
                    onReset={[Function]}
                    trigger="onChange"
                    validateTrigger="onChange"
                    valuePropName="value"
                  >
                    <Row
                      className="ant-form-item"
                      key="row"
                    >
                      <div
                        className="ant-row ant-form-item"
                        style={Object {}}
                      >
                        <FormItemLabel
                          htmlFor="create-tag_meta_fields"
                          label="Metafields"
                          name="meta_fields"
                          prefixCls="ant-form"
                          required={false}
                          requiredMark={true}
                        >
                          <Col
                            className="ant-form-item-label"
                            span={10}
                          >
                            <div
                              className="ant-col ant-col-10 ant-form-item-label"
                              style={Object {}}
                            >
                              <label
                                className=""
                                htmlFor="create-tag_meta_fields"
                                title="Metafields"
                              >
                                Metafields
                              </label>
                            </div>
                          </Col>
                        </FormItemLabel>
                        <FormItemInput
                          errors={Array []}
                          label="Metafields"
                          name={
                            Array [
                              "meta_fields",
                            ]
                          }
                          onDomErrorVisibleChange={[Function]}
                          prefixCls="ant-form"
                          status=""
                          touched={false}
                          validateStatus=""
                          validating={false}
                        >
                          <Col
                            className="ant-form-item-control"
                            span={8}
                          >
                            <div
                              className="ant-col ant-col-8 ant-form-item-control"
                              style={Object {}}
                            >
                              <div
                                className="ant-form-item-control-input"
                              >
                                <div
                                  className="ant-form-item-control-input-content"
                                >
                                  <Component
                                    update={1}
                                  >
                                    <MONACOEditor
                                      id="create-tag_meta_fields"
                                      onChange={[Function]}
                                    >
                                      <MonacoEditor
                                        height="240"
                                        language="json"
                                        onChange={[Function]}
                                        options={
                                          Object {
                                            "autoClosingBrackets": "never",
                                            "autoClosingQuotes": "never",
                                            "cursorBlinking": "smooth",
                                            "folding": true,
                                            "lineNumbersMinChars": 4,
                                            "minimap": Object {
                                              "enabled": false,
                                            },
                                            "scrollBeyondLastLine": false,
                                            "theme": "vs-dark",
                                            "wordWrap": "on",
                                          }
                                        }
                                      >
                                        <div />
                                      </MonacoEditor>
                                    </MONACOEditor>
                                  </Component>
                                </div>
                              </div>
                              <ErrorList
                                errors={Array []}
                                onDomErrorVisibleChange={[Function]}
                              >
                                <CSSMotion
                                  motionAppear={true}
                                  motionDeadline={500}
                                  motionName="show-help"
                                  onLeaveEnd={[Function]}
                                  removeOnLeave={true}
                                  visible={false}
                                >
                                  <DomWrapper />
                                </CSSMotion>
                              </ErrorList>
                            </div>
                          </Col>
                        </FormItemInput>
                      </div>
                    </Row>
                  </Field>
                </WrapperField>
              </FormItem>
              <FormItem
                wrapperCol={
                  Object {
                    "offset": 10,
                    "span": 14,
                  }
                }
              >
                <Row
                  className="ant-form-item"
                  key="row"
                >
                  <div
                    className="ant-row ant-form-item"
                    style={Object {}}
                  >
                    <FormItemLabel
                      prefixCls="ant-form"
                      requiredMark={true}
                      wrapperCol={
                        Object {
                          "offset": 10,
                          "span": 14,
                        }
                      }
                    />
                    <FormItemInput
                      errors={Array []}
                      onDomErrorVisibleChange={[Function]}
                      prefixCls="ant-form"
                      status=""
                      validateStatus=""
                      wrapperCol={
                        Object {
                          "offset": 10,
                          "span": 14,
                        }
                      }
                    >
                      <Col
                        className="ant-form-item-control"
                        offset={10}
                        span={14}
                      >
                        <div
                          className="ant-col ant-col-14 ant-col-offset-10 ant-form-item-control"
                          style={Object {}}
                        >
                          <div
                            className="ant-form-item-control-input"
                          >
                            <div
                              className="ant-form-item-control-input-content"
                            >
                              <Space>
                                <div
                                  className="ant-space ant-space-horizontal ant-space-align-center"
                                >
                                  <Item
                                    className="ant-space-item"
                                    direction="horizontal"
                                    index={0}
                                    key="ant-space-item-0"
                                    marginDirection="marginRight"
                                    size="small"
                                  >
                                    <div
                                      className="ant-space-item"
                                      style={
                                        Object {
                                          "marginRight": 8,
                                        }
                                      }
                                    >
                                      <Button
                                        block={false}
                                        disabled={true}
                                        ghost={false}
                                        htmlType="submit"
                                        loading={false}
                                        type="primary"
                                      >
                                        <Wave>
                                          <button
                                            className="ant-btn ant-btn-primary"
                                            disabled={true}
                                            onClick={[Function]}
                                            type="submit"
                                          >
                                            <LoadingIcon
                                              existIcon={false}
                                              loading={false}
                                              prefixCls="ant-btn"
                                            >
                                              <CSSMotion
                                                motionName="ant-btn-loading-icon-motion"
                                                onAppearActive={[Function]}
                                                onAppearStart={[Function]}
                                                onEnterActive={[Function]}
                                                onEnterStart={[Function]}
                                                onLeaveActive={[Function]}
                                                onLeaveStart={[Function]}
                                                removeOnLeave={true}
                                                visible={false}
                                              >
                                                <DomWrapper />
                                              </CSSMotion>
                                            </LoadingIcon>
                                            <span
                                              key=".0"
                                            >
                                              Submit
                                            </span>
                                          </button>
                                        </Wave>
                                      </Button>
                                    </div>
                                  </Item>
                                  <Item
                                    className="ant-space-item"
                                    direction="horizontal"
                                    index={1}
                                    key="ant-space-item-1"
                                    marginDirection="marginRight"
                                    size="small"
                                  >
                                    <div
                                      className="ant-space-item"
                                      style={Object {}}
                                    >
                                      <Button
                                        block={false}
                                        ghost={false}
                                        htmlType="button"
                                        loading={false}
                                        onClick={[Function]}
                                      >
                                        <Wave>
                                          <button
                                            className="ant-btn"
                                            onClick={[Function]}
                                            type="button"
                                          >
                                            <LoadingIcon
                                              existIcon={false}
                                              loading={false}
                                              prefixCls="ant-btn"
                                            >
                                              <CSSMotion
                                                motionName="ant-btn-loading-icon-motion"
                                                onAppearActive={[Function]}
                                                onAppearStart={[Function]}
                                                onEnterActive={[Function]}
                                                onEnterStart={[Function]}
                                                onLeaveActive={[Function]}
                                                onLeaveStart={[Function]}
                                                removeOnLeave={true}
                                                visible={false}
                                              >
                                                <DomWrapper />
                                              </CSSMotion>
                                            </LoadingIcon>
                                            <span
                                              key=".0"
                                            >
                                              Reset
                                            </span>
                                          </button>
                                        </Wave>
                                      </Button>
                                    </div>
                                  </Item>
                                </div>
                              </Space>
                            </div>
                          </div>
                          <ErrorList
                            errors={Array []}
                            onDomErrorVisibleChange={[Function]}
                          >
                            <CSSMotion
                              motionAppear={true}
                              motionDeadline={500}
                              motionName="show-help"
                              onLeaveEnd={[Function]}
                              removeOnLeave={true}
                              visible={false}
                            >
                              <DomWrapper />
                            </CSSMotion>
                          </ErrorList>
                        </div>
                      </Col>
                    </FormItemInput>
                  </div>
                </Row>
              </FormItem>
            </form>
          </ForwardRef(Form)>
        </SizeContextProvider>
      </ForwardRef(InternalForm)>
    </TagForm>
  </CreateTag>
</Provider>
`;
