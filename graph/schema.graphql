type Category {
  id: ID!
  created_date: Time
  updated_date: Time
  name: String!
  slug: String!
  description: String
  parent_id: Int
  medium: Medium
  space_id: Int!
}

type Tag {
  id: ID!
  created_date: Time
  updated_date: Time
  name: String!
  slug: String!
  description: String
  space_id: Int!
}

type Format {
  id: ID!
  created_date: Time
  updated_date: Time
  name: String!
  slug: String!
  description: String
  space_id: Int!
}

type Medium {
  id: ID!
  created_date: Time
  updated_date: Time
  name: String!
  slug: String
  type: String!
  title: String!
  description: String
  caption: String
  file_size: String!
  alt_text: String!
  url: String!
  dimensions: String!
  space_id: Int!
}

type Post {
  id: ID!
  created_date: Time
  updated_date: Time
  title: String!
  subtitle: String
  slug: String!
  status: String!
  excerpt: String
  description: Any
  is_featured: Boolean
  is_sticky: Boolean
  is_highlighted: Boolean
  space_id: Int!
  format: Format!
  medium: Medium
  categories: [Category!]!
  tags: [Tag!]!
  degaUsers: [User!]!
  claims: [Claim]
}


type User {
  id: ID!
  created_date: Time
  updated_date: Time
  first_name: String!
  last_name: String
  email: String!
  birth_date: String
  gender:  String
}

type Rating {
  id: ID!
  created_date: Time
  updated_date: Time
  name: String!
  slug: String!
  description: String
  numeric_value: Int!
  medium: Medium
  space_id: Int!
}

type Claimant {
  id: ID!
  created_date: Time
  updated_date: Time
  name: String!
  slug: String!
  description: String
  tag_line: String
  medium: Medium
  space_id: Int!
}

type Claim {
  id: ID!
  created_date: Time
  updated_date: Time
  title: String!
  slug: String!
  claim_date: Time
  checked_date: Time
  claim_source: String
  description: Any
  review: String
  review_tag_line: String
  review_sources: String
  space_id: Int!
  rating: Rating!
  claimant: Claimant!
}


type CategoriesPaging {
  nodes: [Category!]!
  total: Int!
}

type TagsPaging {
  nodes: [Tag!]!
  total: Int!
}

type PostsPaging {
  nodes: [Post!]!
  total: Int!
}


type UsersPaging {
  nodes: [User!]!
  total: Int!
}

type ClaimsPaging {
  nodes: [Claim!]!
  total: Int!
}

type ClaimantsPaging {
  nodes: [Claimant!]!
  total: Int!
}

type RatingsPaging {
  nodes: [Rating!]!
  total: Int!
}

type FormatsPaging {
  nodes: [Format!]!
  total: Int!
}

type Sitemap {
  slug: String!
  id: ID!
  created_date: Time
}

type Sitemaps {
  categories: [Sitemap]
  tags: [Sitemap]
  users: [Sitemap]
  formats: [Sitemap]
  posts: [Sitemap]
  claims: [Sitemap]
  claimants: [Sitemap]
  ratings: [Sitemap] 
}

type Author {
  name: String
  type: String!
  url: String
  image: String
}

type ReviewRating {
  type: String!
  ratingValue: Int!
  bestRating: Int!
  worstRating: Int!
  image: String
  alternateName: String!
}

type ItemReviewed {
  type: String!
  author: Author!
  datePublished: Time
  name: String
}

type Schemas {
  context: String
  type: String!
  datePublished: Time
  url: String
  author: Author!
  claimReviewed: String!
  reviewRating: ReviewRating!
  itemReviewed: ItemReviewed!
}

type Query {
  categories(ids: [Int!], page: Int, limit: Int, sortBy: String, sortOrder: String): CategoriesPaging
  category(id: Int!): Category
  tags(ids: [Int!], page: Int, limit: Int, sortBy: String, sortOrder: String): TagsPaging
  tag(id: Int!): Tag
  formats: FormatsPaging
  posts(formats: [String!], categories: [String!], tags: [String!], users: [String!], page: Int, limit: Int, sortBy: String, sortOrder: String): PostsPaging
  post(id: Int!): Post
  users(page: Int, limit: Int, sortBy: String, sortOrder: String): UsersPaging
  user(id: Int!): User
  ratings(page: Int, limit: Int, sortBy: String, sortOrder: String): RatingsPaging
  claimants(page: Int, limit: Int, sortBy: String, sortOrder: String): ClaimantsPaging
  claims(ratings: [String!], claimants:[String!], page: Int, limit: Int, sortBy: String, sortOrder: String): ClaimsPaging
  sitemap: Sitemaps
}

scalar Time
scalar Any