# Where are all the schema files located? globs are supported eg  src/**/*.graphqls
schema:
  - graph/*.graphql

# Where should the generated server code go?
exec:
  filename: graph/generated/generated.go
  package: generated

# Uncomment to enable federation
# federation:
#   filename: graph/generated/federation.go
#   package: generated

# Where should any generated models go?
model:
  filename: graph/model/models_gen.go
  package: model

# Where should the resolver implementations go?
#resolver:
#  layout: follow-schema
#  dir: graph/resolvers
#  package: resolvers

# Optional: turn on use `gqlgen:"fieldName"` tags in your models
# struct_tag: json

# Optional: turn on to use []Thing instead of []*Thing
# omit_slice_element_pointers: false

# Optional: set to speed up generation time by not performing a final validation pass.
# skip_validation: true

# gqlgen will search for any type names in the schema in these go packages
# if they match it will use them, otherwise it will generate them.
autobind:
  - "github.com/monarkatfactly/dega-api-go.git/graph/model"

# This section declares type mapping between the GraphQL and go type systems
#
# The first line in each type will be used as defaults for resolver arguments and
# modelgen, the others will be allowed when binding to fields. Configure them to
# your liking
models:
  ID:
    model:
      - github.com/99designs/gqlgen/graphql.ID
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  Int:
    model:
      - github.com/99designs/gqlgen/graphql.Int
      - github.com/99designs/gqlgen/graphql.Int64
      - github.com/99designs/gqlgen/graphql.Int32
  Status:
    model: github.com/monarkatfactly/dega-api-go.git/graph/models.Status
  Format:
    model: github.com/monarkatfactly/dega-api-go.git/graph/models.Format
  Medium:
    model: github.com/monarkatfactly/dega-api-go.git/graph/models.Medium
  Category:
    model: github.com/monarkatfactly/dega-api-go.git/graph/models.Category
  CategoriesPaging:
    model: github.com/monarkatfactly/dega-api-go.git/graph/models.CategoriesPaging
  Tag:
    model: github.com/monarkatfactly/dega-api-go.git/graph/models.Tag
  TagsPaging:
    model: github.com/monarkatfactly/dega-api-go.git/graph/models.TagsPaging
  Organization:
    model: github.com/monarkatfactly/dega-api-go.git/graph/models.Organization
    fields:
        mediaLogo:
          resolver: true
        mediaMobileLogo:
          resolver: true
        mediaFavicon:
          resolver: true
        mediaMobileIcon:
          resolver: true
  User:
    model: github.com/monarkatfactly/dega-api-go.git/graph/models.User
    fields:
        organizationDefault:
          resolver: true
        organizationCurrent:
          resolver: true
        media:
          resolver: true
  Post:
    model: github.com/monarkatfactly/dega-api-go.git/graph/models.Post
    fields:
        status:
          resolver: true
        tags:
          resolver: true
        categories:
          resolver: true
        format:
          resolver: true
        media:
          resolver: true
        degaUsers:
          resolver: true
  Rating:
    model: github.com/monarkatfactly/dega-api-go.git/graph/models.Rating
    fields:
        media:
          resolver: true
  Claimant:
    model: github.com/monarkatfactly/dega-api-go.git/graph/models.Claimant
    fields:
        media:
          resolver: true
  Claim:
    model: github.com/monarkatfactly/dega-api-go.git/graph/models.Claim
    fields:
        claimant:
          resolver: true
        rating:
          resolver: true
  Factcheck:
    model: github.com/monarkatfactly/dega-api-go.git/graph/models.Factcheck
    fields:
        status:
          resolver: true
        tags:
          resolver: true
        categories:
          resolver: true
        media:
          resolver: true
        degaUsers:
          resolver: true
        claims:
          resolver: true
        